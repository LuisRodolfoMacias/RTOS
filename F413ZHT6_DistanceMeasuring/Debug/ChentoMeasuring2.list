
ChentoMeasuring2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052bc  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  0800549c  0800549c  0001549c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005528  08005528  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08005528  08005528  00015528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005530  08005530  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005530  08005530  00015530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005534  08005534  00015534  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005538  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  20000078  080055b0  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000184  080055b0  00020184  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c9bc  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a5a  00000000  00000000  0002ca64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000af8  00000000  00000000  0002e4c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a68  00000000  00000000  0002efb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020fcd  00000000  00000000  0002fa20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000db8b  00000000  00000000  000509ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c8e31  00000000  00000000  0005e578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001273a9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033a0  00000000  00000000  001273fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000078 	.word	0x20000078
 80001fc:	00000000 	.word	0x00000000
 8000200:	08005484 	.word	0x08005484

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000007c 	.word	0x2000007c
 800021c:	08005484 	.word	0x08005484

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__gedf2>:
 8000648:	f04f 3cff 	mov.w	ip, #4294967295
 800064c:	e006      	b.n	800065c <__cmpdf2+0x4>
 800064e:	bf00      	nop

08000650 <__ledf2>:
 8000650:	f04f 0c01 	mov.w	ip, #1
 8000654:	e002      	b.n	800065c <__cmpdf2+0x4>
 8000656:	bf00      	nop

08000658 <__cmpdf2>:
 8000658:	f04f 0c01 	mov.w	ip, #1
 800065c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000660:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000664:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000668:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800066c:	bf18      	it	ne
 800066e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000672:	d01b      	beq.n	80006ac <__cmpdf2+0x54>
 8000674:	b001      	add	sp, #4
 8000676:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800067a:	bf0c      	ite	eq
 800067c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000680:	ea91 0f03 	teqne	r1, r3
 8000684:	bf02      	ittt	eq
 8000686:	ea90 0f02 	teqeq	r0, r2
 800068a:	2000      	moveq	r0, #0
 800068c:	4770      	bxeq	lr
 800068e:	f110 0f00 	cmn.w	r0, #0
 8000692:	ea91 0f03 	teq	r1, r3
 8000696:	bf58      	it	pl
 8000698:	4299      	cmppl	r1, r3
 800069a:	bf08      	it	eq
 800069c:	4290      	cmpeq	r0, r2
 800069e:	bf2c      	ite	cs
 80006a0:	17d8      	asrcs	r0, r3, #31
 80006a2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80006a6:	f040 0001 	orr.w	r0, r0, #1
 80006aa:	4770      	bx	lr
 80006ac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80006b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006b4:	d102      	bne.n	80006bc <__cmpdf2+0x64>
 80006b6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80006ba:	d107      	bne.n	80006cc <__cmpdf2+0x74>
 80006bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80006c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006c4:	d1d6      	bne.n	8000674 <__cmpdf2+0x1c>
 80006c6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80006ca:	d0d3      	beq.n	8000674 <__cmpdf2+0x1c>
 80006cc:	f85d 0b04 	ldr.w	r0, [sp], #4
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop

080006d4 <__aeabi_cdrcmple>:
 80006d4:	4684      	mov	ip, r0
 80006d6:	4610      	mov	r0, r2
 80006d8:	4662      	mov	r2, ip
 80006da:	468c      	mov	ip, r1
 80006dc:	4619      	mov	r1, r3
 80006de:	4663      	mov	r3, ip
 80006e0:	e000      	b.n	80006e4 <__aeabi_cdcmpeq>
 80006e2:	bf00      	nop

080006e4 <__aeabi_cdcmpeq>:
 80006e4:	b501      	push	{r0, lr}
 80006e6:	f7ff ffb7 	bl	8000658 <__cmpdf2>
 80006ea:	2800      	cmp	r0, #0
 80006ec:	bf48      	it	mi
 80006ee:	f110 0f00 	cmnmi.w	r0, #0
 80006f2:	bd01      	pop	{r0, pc}

080006f4 <__aeabi_dcmpeq>:
 80006f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006f8:	f7ff fff4 	bl	80006e4 <__aeabi_cdcmpeq>
 80006fc:	bf0c      	ite	eq
 80006fe:	2001      	moveq	r0, #1
 8000700:	2000      	movne	r0, #0
 8000702:	f85d fb08 	ldr.w	pc, [sp], #8
 8000706:	bf00      	nop

08000708 <__aeabi_dcmplt>:
 8000708:	f84d ed08 	str.w	lr, [sp, #-8]!
 800070c:	f7ff ffea 	bl	80006e4 <__aeabi_cdcmpeq>
 8000710:	bf34      	ite	cc
 8000712:	2001      	movcc	r0, #1
 8000714:	2000      	movcs	r0, #0
 8000716:	f85d fb08 	ldr.w	pc, [sp], #8
 800071a:	bf00      	nop

0800071c <__aeabi_dcmple>:
 800071c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000720:	f7ff ffe0 	bl	80006e4 <__aeabi_cdcmpeq>
 8000724:	bf94      	ite	ls
 8000726:	2001      	movls	r0, #1
 8000728:	2000      	movhi	r0, #0
 800072a:	f85d fb08 	ldr.w	pc, [sp], #8
 800072e:	bf00      	nop

08000730 <__aeabi_dcmpge>:
 8000730:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000734:	f7ff ffce 	bl	80006d4 <__aeabi_cdrcmple>
 8000738:	bf94      	ite	ls
 800073a:	2001      	movls	r0, #1
 800073c:	2000      	movhi	r0, #0
 800073e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000742:	bf00      	nop

08000744 <__aeabi_dcmpgt>:
 8000744:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000748:	f7ff ffc4 	bl	80006d4 <__aeabi_cdrcmple>
 800074c:	bf34      	ite	cc
 800074e:	2001      	movcc	r0, #1
 8000750:	2000      	movcs	r0, #0
 8000752:	f85d fb08 	ldr.w	pc, [sp], #8
 8000756:	bf00      	nop

08000758 <__aeabi_uldivmod>:
 8000758:	b953      	cbnz	r3, 8000770 <__aeabi_uldivmod+0x18>
 800075a:	b94a      	cbnz	r2, 8000770 <__aeabi_uldivmod+0x18>
 800075c:	2900      	cmp	r1, #0
 800075e:	bf08      	it	eq
 8000760:	2800      	cmpeq	r0, #0
 8000762:	bf1c      	itt	ne
 8000764:	f04f 31ff 	movne.w	r1, #4294967295
 8000768:	f04f 30ff 	movne.w	r0, #4294967295
 800076c:	f000 b974 	b.w	8000a58 <__aeabi_idiv0>
 8000770:	f1ad 0c08 	sub.w	ip, sp, #8
 8000774:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000778:	f000 f806 	bl	8000788 <__udivmoddi4>
 800077c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000780:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000784:	b004      	add	sp, #16
 8000786:	4770      	bx	lr

08000788 <__udivmoddi4>:
 8000788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800078c:	9d08      	ldr	r5, [sp, #32]
 800078e:	4604      	mov	r4, r0
 8000790:	468e      	mov	lr, r1
 8000792:	2b00      	cmp	r3, #0
 8000794:	d14d      	bne.n	8000832 <__udivmoddi4+0xaa>
 8000796:	428a      	cmp	r2, r1
 8000798:	4694      	mov	ip, r2
 800079a:	d969      	bls.n	8000870 <__udivmoddi4+0xe8>
 800079c:	fab2 f282 	clz	r2, r2
 80007a0:	b152      	cbz	r2, 80007b8 <__udivmoddi4+0x30>
 80007a2:	fa01 f302 	lsl.w	r3, r1, r2
 80007a6:	f1c2 0120 	rsb	r1, r2, #32
 80007aa:	fa20 f101 	lsr.w	r1, r0, r1
 80007ae:	fa0c fc02 	lsl.w	ip, ip, r2
 80007b2:	ea41 0e03 	orr.w	lr, r1, r3
 80007b6:	4094      	lsls	r4, r2
 80007b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80007bc:	0c21      	lsrs	r1, r4, #16
 80007be:	fbbe f6f8 	udiv	r6, lr, r8
 80007c2:	fa1f f78c 	uxth.w	r7, ip
 80007c6:	fb08 e316 	mls	r3, r8, r6, lr
 80007ca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80007ce:	fb06 f107 	mul.w	r1, r6, r7
 80007d2:	4299      	cmp	r1, r3
 80007d4:	d90a      	bls.n	80007ec <__udivmoddi4+0x64>
 80007d6:	eb1c 0303 	adds.w	r3, ip, r3
 80007da:	f106 30ff 	add.w	r0, r6, #4294967295
 80007de:	f080 811f 	bcs.w	8000a20 <__udivmoddi4+0x298>
 80007e2:	4299      	cmp	r1, r3
 80007e4:	f240 811c 	bls.w	8000a20 <__udivmoddi4+0x298>
 80007e8:	3e02      	subs	r6, #2
 80007ea:	4463      	add	r3, ip
 80007ec:	1a5b      	subs	r3, r3, r1
 80007ee:	b2a4      	uxth	r4, r4
 80007f0:	fbb3 f0f8 	udiv	r0, r3, r8
 80007f4:	fb08 3310 	mls	r3, r8, r0, r3
 80007f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80007fc:	fb00 f707 	mul.w	r7, r0, r7
 8000800:	42a7      	cmp	r7, r4
 8000802:	d90a      	bls.n	800081a <__udivmoddi4+0x92>
 8000804:	eb1c 0404 	adds.w	r4, ip, r4
 8000808:	f100 33ff 	add.w	r3, r0, #4294967295
 800080c:	f080 810a 	bcs.w	8000a24 <__udivmoddi4+0x29c>
 8000810:	42a7      	cmp	r7, r4
 8000812:	f240 8107 	bls.w	8000a24 <__udivmoddi4+0x29c>
 8000816:	4464      	add	r4, ip
 8000818:	3802      	subs	r0, #2
 800081a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800081e:	1be4      	subs	r4, r4, r7
 8000820:	2600      	movs	r6, #0
 8000822:	b11d      	cbz	r5, 800082c <__udivmoddi4+0xa4>
 8000824:	40d4      	lsrs	r4, r2
 8000826:	2300      	movs	r3, #0
 8000828:	e9c5 4300 	strd	r4, r3, [r5]
 800082c:	4631      	mov	r1, r6
 800082e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000832:	428b      	cmp	r3, r1
 8000834:	d909      	bls.n	800084a <__udivmoddi4+0xc2>
 8000836:	2d00      	cmp	r5, #0
 8000838:	f000 80ef 	beq.w	8000a1a <__udivmoddi4+0x292>
 800083c:	2600      	movs	r6, #0
 800083e:	e9c5 0100 	strd	r0, r1, [r5]
 8000842:	4630      	mov	r0, r6
 8000844:	4631      	mov	r1, r6
 8000846:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800084a:	fab3 f683 	clz	r6, r3
 800084e:	2e00      	cmp	r6, #0
 8000850:	d14a      	bne.n	80008e8 <__udivmoddi4+0x160>
 8000852:	428b      	cmp	r3, r1
 8000854:	d302      	bcc.n	800085c <__udivmoddi4+0xd4>
 8000856:	4282      	cmp	r2, r0
 8000858:	f200 80f9 	bhi.w	8000a4e <__udivmoddi4+0x2c6>
 800085c:	1a84      	subs	r4, r0, r2
 800085e:	eb61 0303 	sbc.w	r3, r1, r3
 8000862:	2001      	movs	r0, #1
 8000864:	469e      	mov	lr, r3
 8000866:	2d00      	cmp	r5, #0
 8000868:	d0e0      	beq.n	800082c <__udivmoddi4+0xa4>
 800086a:	e9c5 4e00 	strd	r4, lr, [r5]
 800086e:	e7dd      	b.n	800082c <__udivmoddi4+0xa4>
 8000870:	b902      	cbnz	r2, 8000874 <__udivmoddi4+0xec>
 8000872:	deff      	udf	#255	; 0xff
 8000874:	fab2 f282 	clz	r2, r2
 8000878:	2a00      	cmp	r2, #0
 800087a:	f040 8092 	bne.w	80009a2 <__udivmoddi4+0x21a>
 800087e:	eba1 010c 	sub.w	r1, r1, ip
 8000882:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000886:	fa1f fe8c 	uxth.w	lr, ip
 800088a:	2601      	movs	r6, #1
 800088c:	0c20      	lsrs	r0, r4, #16
 800088e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000892:	fb07 1113 	mls	r1, r7, r3, r1
 8000896:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800089a:	fb0e f003 	mul.w	r0, lr, r3
 800089e:	4288      	cmp	r0, r1
 80008a0:	d908      	bls.n	80008b4 <__udivmoddi4+0x12c>
 80008a2:	eb1c 0101 	adds.w	r1, ip, r1
 80008a6:	f103 38ff 	add.w	r8, r3, #4294967295
 80008aa:	d202      	bcs.n	80008b2 <__udivmoddi4+0x12a>
 80008ac:	4288      	cmp	r0, r1
 80008ae:	f200 80cb 	bhi.w	8000a48 <__udivmoddi4+0x2c0>
 80008b2:	4643      	mov	r3, r8
 80008b4:	1a09      	subs	r1, r1, r0
 80008b6:	b2a4      	uxth	r4, r4
 80008b8:	fbb1 f0f7 	udiv	r0, r1, r7
 80008bc:	fb07 1110 	mls	r1, r7, r0, r1
 80008c0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80008c4:	fb0e fe00 	mul.w	lr, lr, r0
 80008c8:	45a6      	cmp	lr, r4
 80008ca:	d908      	bls.n	80008de <__udivmoddi4+0x156>
 80008cc:	eb1c 0404 	adds.w	r4, ip, r4
 80008d0:	f100 31ff 	add.w	r1, r0, #4294967295
 80008d4:	d202      	bcs.n	80008dc <__udivmoddi4+0x154>
 80008d6:	45a6      	cmp	lr, r4
 80008d8:	f200 80bb 	bhi.w	8000a52 <__udivmoddi4+0x2ca>
 80008dc:	4608      	mov	r0, r1
 80008de:	eba4 040e 	sub.w	r4, r4, lr
 80008e2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80008e6:	e79c      	b.n	8000822 <__udivmoddi4+0x9a>
 80008e8:	f1c6 0720 	rsb	r7, r6, #32
 80008ec:	40b3      	lsls	r3, r6
 80008ee:	fa22 fc07 	lsr.w	ip, r2, r7
 80008f2:	ea4c 0c03 	orr.w	ip, ip, r3
 80008f6:	fa20 f407 	lsr.w	r4, r0, r7
 80008fa:	fa01 f306 	lsl.w	r3, r1, r6
 80008fe:	431c      	orrs	r4, r3
 8000900:	40f9      	lsrs	r1, r7
 8000902:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000906:	fa00 f306 	lsl.w	r3, r0, r6
 800090a:	fbb1 f8f9 	udiv	r8, r1, r9
 800090e:	0c20      	lsrs	r0, r4, #16
 8000910:	fa1f fe8c 	uxth.w	lr, ip
 8000914:	fb09 1118 	mls	r1, r9, r8, r1
 8000918:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800091c:	fb08 f00e 	mul.w	r0, r8, lr
 8000920:	4288      	cmp	r0, r1
 8000922:	fa02 f206 	lsl.w	r2, r2, r6
 8000926:	d90b      	bls.n	8000940 <__udivmoddi4+0x1b8>
 8000928:	eb1c 0101 	adds.w	r1, ip, r1
 800092c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000930:	f080 8088 	bcs.w	8000a44 <__udivmoddi4+0x2bc>
 8000934:	4288      	cmp	r0, r1
 8000936:	f240 8085 	bls.w	8000a44 <__udivmoddi4+0x2bc>
 800093a:	f1a8 0802 	sub.w	r8, r8, #2
 800093e:	4461      	add	r1, ip
 8000940:	1a09      	subs	r1, r1, r0
 8000942:	b2a4      	uxth	r4, r4
 8000944:	fbb1 f0f9 	udiv	r0, r1, r9
 8000948:	fb09 1110 	mls	r1, r9, r0, r1
 800094c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000950:	fb00 fe0e 	mul.w	lr, r0, lr
 8000954:	458e      	cmp	lr, r1
 8000956:	d908      	bls.n	800096a <__udivmoddi4+0x1e2>
 8000958:	eb1c 0101 	adds.w	r1, ip, r1
 800095c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000960:	d26c      	bcs.n	8000a3c <__udivmoddi4+0x2b4>
 8000962:	458e      	cmp	lr, r1
 8000964:	d96a      	bls.n	8000a3c <__udivmoddi4+0x2b4>
 8000966:	3802      	subs	r0, #2
 8000968:	4461      	add	r1, ip
 800096a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800096e:	fba0 9402 	umull	r9, r4, r0, r2
 8000972:	eba1 010e 	sub.w	r1, r1, lr
 8000976:	42a1      	cmp	r1, r4
 8000978:	46c8      	mov	r8, r9
 800097a:	46a6      	mov	lr, r4
 800097c:	d356      	bcc.n	8000a2c <__udivmoddi4+0x2a4>
 800097e:	d053      	beq.n	8000a28 <__udivmoddi4+0x2a0>
 8000980:	b15d      	cbz	r5, 800099a <__udivmoddi4+0x212>
 8000982:	ebb3 0208 	subs.w	r2, r3, r8
 8000986:	eb61 010e 	sbc.w	r1, r1, lr
 800098a:	fa01 f707 	lsl.w	r7, r1, r7
 800098e:	fa22 f306 	lsr.w	r3, r2, r6
 8000992:	40f1      	lsrs	r1, r6
 8000994:	431f      	orrs	r7, r3
 8000996:	e9c5 7100 	strd	r7, r1, [r5]
 800099a:	2600      	movs	r6, #0
 800099c:	4631      	mov	r1, r6
 800099e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009a2:	f1c2 0320 	rsb	r3, r2, #32
 80009a6:	40d8      	lsrs	r0, r3
 80009a8:	fa0c fc02 	lsl.w	ip, ip, r2
 80009ac:	fa21 f303 	lsr.w	r3, r1, r3
 80009b0:	4091      	lsls	r1, r2
 80009b2:	4301      	orrs	r1, r0
 80009b4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009b8:	fa1f fe8c 	uxth.w	lr, ip
 80009bc:	fbb3 f0f7 	udiv	r0, r3, r7
 80009c0:	fb07 3610 	mls	r6, r7, r0, r3
 80009c4:	0c0b      	lsrs	r3, r1, #16
 80009c6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80009ca:	fb00 f60e 	mul.w	r6, r0, lr
 80009ce:	429e      	cmp	r6, r3
 80009d0:	fa04 f402 	lsl.w	r4, r4, r2
 80009d4:	d908      	bls.n	80009e8 <__udivmoddi4+0x260>
 80009d6:	eb1c 0303 	adds.w	r3, ip, r3
 80009da:	f100 38ff 	add.w	r8, r0, #4294967295
 80009de:	d22f      	bcs.n	8000a40 <__udivmoddi4+0x2b8>
 80009e0:	429e      	cmp	r6, r3
 80009e2:	d92d      	bls.n	8000a40 <__udivmoddi4+0x2b8>
 80009e4:	3802      	subs	r0, #2
 80009e6:	4463      	add	r3, ip
 80009e8:	1b9b      	subs	r3, r3, r6
 80009ea:	b289      	uxth	r1, r1
 80009ec:	fbb3 f6f7 	udiv	r6, r3, r7
 80009f0:	fb07 3316 	mls	r3, r7, r6, r3
 80009f4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80009f8:	fb06 f30e 	mul.w	r3, r6, lr
 80009fc:	428b      	cmp	r3, r1
 80009fe:	d908      	bls.n	8000a12 <__udivmoddi4+0x28a>
 8000a00:	eb1c 0101 	adds.w	r1, ip, r1
 8000a04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000a08:	d216      	bcs.n	8000a38 <__udivmoddi4+0x2b0>
 8000a0a:	428b      	cmp	r3, r1
 8000a0c:	d914      	bls.n	8000a38 <__udivmoddi4+0x2b0>
 8000a0e:	3e02      	subs	r6, #2
 8000a10:	4461      	add	r1, ip
 8000a12:	1ac9      	subs	r1, r1, r3
 8000a14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000a18:	e738      	b.n	800088c <__udivmoddi4+0x104>
 8000a1a:	462e      	mov	r6, r5
 8000a1c:	4628      	mov	r0, r5
 8000a1e:	e705      	b.n	800082c <__udivmoddi4+0xa4>
 8000a20:	4606      	mov	r6, r0
 8000a22:	e6e3      	b.n	80007ec <__udivmoddi4+0x64>
 8000a24:	4618      	mov	r0, r3
 8000a26:	e6f8      	b.n	800081a <__udivmoddi4+0x92>
 8000a28:	454b      	cmp	r3, r9
 8000a2a:	d2a9      	bcs.n	8000980 <__udivmoddi4+0x1f8>
 8000a2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000a30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000a34:	3801      	subs	r0, #1
 8000a36:	e7a3      	b.n	8000980 <__udivmoddi4+0x1f8>
 8000a38:	4646      	mov	r6, r8
 8000a3a:	e7ea      	b.n	8000a12 <__udivmoddi4+0x28a>
 8000a3c:	4620      	mov	r0, r4
 8000a3e:	e794      	b.n	800096a <__udivmoddi4+0x1e2>
 8000a40:	4640      	mov	r0, r8
 8000a42:	e7d1      	b.n	80009e8 <__udivmoddi4+0x260>
 8000a44:	46d0      	mov	r8, sl
 8000a46:	e77b      	b.n	8000940 <__udivmoddi4+0x1b8>
 8000a48:	3b02      	subs	r3, #2
 8000a4a:	4461      	add	r1, ip
 8000a4c:	e732      	b.n	80008b4 <__udivmoddi4+0x12c>
 8000a4e:	4630      	mov	r0, r6
 8000a50:	e709      	b.n	8000866 <__udivmoddi4+0xde>
 8000a52:	4464      	add	r4, ip
 8000a54:	3802      	subs	r0, #2
 8000a56:	e742      	b.n	80008de <__udivmoddi4+0x156>

08000a58 <__aeabi_idiv0>:
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <readByte>:
        *data = b;
    }
    return count;
}

int8_t readByte(I2C_HandleTypeDef *handler, uint8_t devAddr, uint8_t regAddr, uint8_t *data, uint16_t timeout) {
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b086      	sub	sp, #24
 8000a60:	af02      	add	r7, sp, #8
 8000a62:	60f8      	str	r0, [r7, #12]
 8000a64:	607b      	str	r3, [r7, #4]
 8000a66:	460b      	mov	r3, r1
 8000a68:	72fb      	strb	r3, [r7, #11]
 8000a6a:	4613      	mov	r3, r2
 8000a6c:	72bb      	strb	r3, [r7, #10]
    return readBytes(handler, devAddr, regAddr, 1, data, timeout);
 8000a6e:	7aba      	ldrb	r2, [r7, #10]
 8000a70:	7af9      	ldrb	r1, [r7, #11]
 8000a72:	8b3b      	ldrh	r3, [r7, #24]
 8000a74:	9301      	str	r3, [sp, #4]
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	9300      	str	r3, [sp, #0]
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	68f8      	ldr	r0, [r7, #12]
 8000a7e:	f000 f805 	bl	8000a8c <readBytes>
 8000a82:	4603      	mov	r3, r0
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	3710      	adds	r7, #16
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}

08000a8c <readBytes>:

int8_t readBytes(I2C_HandleTypeDef *handler, uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t *data, uint16_t timeout){
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b088      	sub	sp, #32
 8000a90:	af04      	add	r7, sp, #16
 8000a92:	6078      	str	r0, [r7, #4]
 8000a94:	4608      	mov	r0, r1
 8000a96:	4611      	mov	r1, r2
 8000a98:	461a      	mov	r2, r3
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	70fb      	strb	r3, [r7, #3]
 8000a9e:	460b      	mov	r3, r1
 8000aa0:	70bb      	strb	r3, [r7, #2]
 8000aa2:	4613      	mov	r3, r2
 8000aa4:	707b      	strb	r3, [r7, #1]
	int8_t count = length;
 8000aa6:	787b      	ldrb	r3, [r7, #1]
 8000aa8:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(handler, devAddr<<1, (uint16_t)regAddr, 1, data, (uint16_t)length, (uint32_t)timeout);
 8000aaa:	78fb      	ldrb	r3, [r7, #3]
 8000aac:	b29b      	uxth	r3, r3
 8000aae:	005b      	lsls	r3, r3, #1
 8000ab0:	b299      	uxth	r1, r3
 8000ab2:	78bb      	ldrb	r3, [r7, #2]
 8000ab4:	b298      	uxth	r0, r3
 8000ab6:	787b      	ldrb	r3, [r7, #1]
 8000ab8:	b29b      	uxth	r3, r3
 8000aba:	8bba      	ldrh	r2, [r7, #28]
 8000abc:	9202      	str	r2, [sp, #8]
 8000abe:	9301      	str	r3, [sp, #4]
 8000ac0:	69bb      	ldr	r3, [r7, #24]
 8000ac2:	9300      	str	r3, [sp, #0]
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	4602      	mov	r2, r0
 8000ac8:	6878      	ldr	r0, [r7, #4]
 8000aca:	f002 fa4f 	bl	8002f6c <HAL_I2C_Mem_Read>
	return count;
 8000ace:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3710      	adds	r7, #16
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}

08000ada <readWord>:

int8_t readWord(I2C_HandleTypeDef *handler, uint8_t devAddr, uint8_t regAddr, uint16_t *data, uint16_t timeout) {
 8000ada:	b580      	push	{r7, lr}
 8000adc:	b088      	sub	sp, #32
 8000ade:	af02      	add	r7, sp, #8
 8000ae0:	60f8      	str	r0, [r7, #12]
 8000ae2:	607b      	str	r3, [r7, #4]
 8000ae4:	460b      	mov	r3, r1
 8000ae6:	72fb      	strb	r3, [r7, #11]
 8000ae8:	4613      	mov	r3, r2
 8000aea:	72bb      	strb	r3, [r7, #10]
	int8_t count = 2;
 8000aec:	2302      	movs	r3, #2
 8000aee:	75fb      	strb	r3, [r7, #23]
	uint8_t temp[4];
	readBytes(handler, devAddr, regAddr, 2, (uint8_t*)temp, timeout);
 8000af0:	7aba      	ldrb	r2, [r7, #10]
 8000af2:	7af9      	ldrb	r1, [r7, #11]
 8000af4:	8c3b      	ldrh	r3, [r7, #32]
 8000af6:	9301      	str	r3, [sp, #4]
 8000af8:	f107 0310 	add.w	r3, r7, #16
 8000afc:	9300      	str	r3, [sp, #0]
 8000afe:	2302      	movs	r3, #2
 8000b00:	68f8      	ldr	r0, [r7, #12]
 8000b02:	f7ff ffc3 	bl	8000a8c <readBytes>
	*data = (((uint16_t)temp[0])<<8) | (temp[1]);
 8000b06:	7c3b      	ldrb	r3, [r7, #16]
 8000b08:	021b      	lsls	r3, r3, #8
 8000b0a:	b21a      	sxth	r2, r3
 8000b0c:	7c7b      	ldrb	r3, [r7, #17]
 8000b0e:	b21b      	sxth	r3, r3
 8000b10:	4313      	orrs	r3, r2
 8000b12:	b21b      	sxth	r3, r3
 8000b14:	b29a      	uxth	r2, r3
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	801a      	strh	r2, [r3, #0]
	return count;
 8000b1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3718      	adds	r7, #24
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}

08000b26 <writeByte>:
    } else {
        return false;
    }
}

bool writeByte(I2C_HandleTypeDef *handler, uint8_t devAddr, uint8_t regAddr, uint8_t data) {
 8000b26:	b580      	push	{r7, lr}
 8000b28:	b084      	sub	sp, #16
 8000b2a:	af02      	add	r7, sp, #8
 8000b2c:	6078      	str	r0, [r7, #4]
 8000b2e:	4608      	mov	r0, r1
 8000b30:	4611      	mov	r1, r2
 8000b32:	461a      	mov	r2, r3
 8000b34:	4603      	mov	r3, r0
 8000b36:	70fb      	strb	r3, [r7, #3]
 8000b38:	460b      	mov	r3, r1
 8000b3a:	70bb      	strb	r3, [r7, #2]
 8000b3c:	4613      	mov	r3, r2
 8000b3e:	707b      	strb	r3, [r7, #1]
    return writeBytes(handler, devAddr, regAddr, 1, &data);
 8000b40:	78ba      	ldrb	r2, [r7, #2]
 8000b42:	78f9      	ldrb	r1, [r7, #3]
 8000b44:	1c7b      	adds	r3, r7, #1
 8000b46:	9300      	str	r3, [sp, #0]
 8000b48:	2301      	movs	r3, #1
 8000b4a:	6878      	ldr	r0, [r7, #4]
 8000b4c:	f000 f805 	bl	8000b5a <writeBytes>
 8000b50:	4603      	mov	r3, r0
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}

08000b5a <writeBytes>:

bool writeBytes(I2C_HandleTypeDef *handler, uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t *data){
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	b088      	sub	sp, #32
 8000b5e:	af04      	add	r7, sp, #16
 8000b60:	6078      	str	r0, [r7, #4]
 8000b62:	4608      	mov	r0, r1
 8000b64:	4611      	mov	r1, r2
 8000b66:	461a      	mov	r2, r3
 8000b68:	4603      	mov	r3, r0
 8000b6a:	70fb      	strb	r3, [r7, #3]
 8000b6c:	460b      	mov	r3, r1
 8000b6e:	70bb      	strb	r3, [r7, #2]
 8000b70:	4613      	mov	r3, r2
 8000b72:	707b      	strb	r3, [r7, #1]
	uint8_t status = 0;
 8000b74:	2300      	movs	r3, #0
 8000b76:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(handler, devAddr<<1, (uint16_t)regAddr,1,data, (uint16_t)length, (uint32_t)100);
 8000b78:	78fb      	ldrb	r3, [r7, #3]
 8000b7a:	b29b      	uxth	r3, r3
 8000b7c:	005b      	lsls	r3, r3, #1
 8000b7e:	b299      	uxth	r1, r3
 8000b80:	78bb      	ldrb	r3, [r7, #2]
 8000b82:	b29a      	uxth	r2, r3
 8000b84:	787b      	ldrb	r3, [r7, #1]
 8000b86:	b29b      	uxth	r3, r3
 8000b88:	2064      	movs	r0, #100	; 0x64
 8000b8a:	9002      	str	r0, [sp, #8]
 8000b8c:	9301      	str	r3, [sp, #4]
 8000b8e:	69bb      	ldr	r3, [r7, #24]
 8000b90:	9300      	str	r3, [sp, #0]
 8000b92:	2301      	movs	r3, #1
 8000b94:	6878      	ldr	r0, [r7, #4]
 8000b96:	f002 f8ef 	bl	8002d78 <HAL_I2C_Mem_Write>
	return status == 0;
 8000b9a:	7bfb      	ldrb	r3, [r7, #15]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	bf0c      	ite	eq
 8000ba0:	2301      	moveq	r3, #1
 8000ba2:	2300      	movne	r3, #0
 8000ba4:	b2db      	uxtb	r3, r3
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	3710      	adds	r7, #16
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}

08000bae <writeWord>:
bool writeWord(I2C_HandleTypeDef *handler, uint8_t devAddr, uint8_t regAddr, uint16_t data){
 8000bae:	b580      	push	{r7, lr}
 8000bb0:	b086      	sub	sp, #24
 8000bb2:	af02      	add	r7, sp, #8
 8000bb4:	6078      	str	r0, [r7, #4]
 8000bb6:	4608      	mov	r0, r1
 8000bb8:	4611      	mov	r1, r2
 8000bba:	461a      	mov	r2, r3
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	70fb      	strb	r3, [r7, #3]
 8000bc0:	460b      	mov	r3, r1
 8000bc2:	70bb      	strb	r3, [r7, #2]
 8000bc4:	4613      	mov	r3, r2
 8000bc6:	803b      	strh	r3, [r7, #0]
	uint8_t towrite[2];
	towrite[0]=(uint8_t)data>>8 & 0xFF; //MSB
 8000bc8:	2300      	movs	r3, #0
 8000bca:	733b      	strb	r3, [r7, #12]
	towrite[1]=(uint8_t)data & 0xFF; //LSB
 8000bcc:	883b      	ldrh	r3, [r7, #0]
 8000bce:	b2db      	uxtb	r3, r3
 8000bd0:	737b      	strb	r3, [r7, #13]
	writeBytes(handler, devAddr, regAddr, 2,(uint8_t*)towrite);
 8000bd2:	78ba      	ldrb	r2, [r7, #2]
 8000bd4:	78f9      	ldrb	r1, [r7, #3]
 8000bd6:	f107 030c 	add.w	r3, r7, #12
 8000bda:	9300      	str	r3, [sp, #0]
 8000bdc:	2302      	movs	r3, #2
 8000bde:	6878      	ldr	r0, [r7, #4]
 8000be0:	f7ff ffbb 	bl	8000b5a <writeBytes>
	return true;
 8000be4:	2301      	movs	r3, #1
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3710      	adds	r7, #16
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}

08000bee <write32Bits>:
bool write32Bits(I2C_HandleTypeDef *handler, uint8_t devAddr, uint8_t regAddr, uint32_t data){
 8000bee:	b580      	push	{r7, lr}
 8000bf0:	b088      	sub	sp, #32
 8000bf2:	af02      	add	r7, sp, #8
 8000bf4:	60f8      	str	r0, [r7, #12]
 8000bf6:	607b      	str	r3, [r7, #4]
 8000bf8:	460b      	mov	r3, r1
 8000bfa:	72fb      	strb	r3, [r7, #11]
 8000bfc:	4613      	mov	r3, r2
 8000bfe:	72bb      	strb	r3, [r7, #10]
	uint8_t towrite[4];
	towrite[0]=(uint8_t)data>>24 & 0xFF; //MSB
 8000c00:	2300      	movs	r3, #0
 8000c02:	753b      	strb	r3, [r7, #20]
	towrite[1]=(uint8_t)data>>16 & 0xFF;
 8000c04:	2300      	movs	r3, #0
 8000c06:	757b      	strb	r3, [r7, #21]
	towrite[2]=(uint8_t)data>>8 & 0xFF;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	75bb      	strb	r3, [r7, #22]
	towrite[3]=(uint8_t)data & 0xFF;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	b2db      	uxtb	r3, r3
 8000c10:	75fb      	strb	r3, [r7, #23]
	writeBytes(handler, devAddr, regAddr, 4,(uint8_t*)towrite);
 8000c12:	7aba      	ldrb	r2, [r7, #10]
 8000c14:	7af9      	ldrb	r1, [r7, #11]
 8000c16:	f107 0314 	add.w	r3, r7, #20
 8000c1a:	9300      	str	r3, [sp, #0]
 8000c1c:	2304      	movs	r3, #4
 8000c1e:	68f8      	ldr	r0, [r7, #12]
 8000c20:	f7ff ff9b 	bl	8000b5a <writeBytes>
	return true;
 8000c24:	2301      	movs	r3, #1
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3718      	adds	r7, #24
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <setAddress>:
  lidar->io_timeout=0;
  lidar->did_timeout=false;
}

void setAddress(VL53L0X * lidar, uint8_t new_addr)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	b082      	sub	sp, #8
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	6078      	str	r0, [r7, #4]
 8000c36:	460b      	mov	r3, r1
 8000c38:	70fb      	strb	r3, [r7, #3]
  writeReg(lidar,I2C_SLAVE_DEVICE_ADDRESS, new_addr & 0x7F);
 8000c3a:	78fb      	ldrb	r3, [r7, #3]
 8000c3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	461a      	mov	r2, r3
 8000c44:	218a      	movs	r1, #138	; 0x8a
 8000c46:	6878      	ldr	r0, [r7, #4]
 8000c48:	f000 fae6 	bl	8001218 <writeReg>
  lidar->address = new_addr;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	78fa      	ldrb	r2, [r7, #3]
 8000c50:	701a      	strb	r2, [r3, #0]
}
 8000c52:	bf00      	nop
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}

08000c5a <getWhoAmI>:
{
	return lidar->address;
}

uint8_t getWhoAmI(VL53L0X * lidar)
{
 8000c5a:	b580      	push	{r7, lr}
 8000c5c:	b082      	sub	sp, #8
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	6078      	str	r0, [r7, #4]
	return readReg(lidar,IDENTIFICATION_MODEL_ID);
 8000c62:	21c0      	movs	r1, #192	; 0xc0
 8000c64:	6878      	ldr	r0, [r7, #4]
 8000c66:	f000 fb1f 	bl	80012a8 <readReg>
 8000c6a:	4603      	mov	r3, r0
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3708      	adds	r7, #8
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}

08000c74 <init>:
// is performed by ST on the bare modules; it seems like that should work well
// enough unless a cover glass is added.
// If io_2v8 (optional) is true or not given, the sensor is configured for 2V8
// mode.
bool init(VL53L0X * lidar,bool io_2v8)
{
 8000c74:	b590      	push	{r4, r7, lr}
 8000c76:	b087      	sub	sp, #28
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
 8000c7c:	460b      	mov	r3, r1
 8000c7e:	70fb      	strb	r3, [r7, #3]
  // VL53L0X_DataInit() begin

  // sensor uses 1V8 mode for I/O by default; switch to 2V8 mode if necessary
  if (io_2v8)
 8000c80:	78fb      	ldrb	r3, [r7, #3]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d009      	beq.n	8000c9a <init+0x26>
  {
    writeReg(lidar,VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV,
 8000c86:	2189      	movs	r1, #137	; 0x89
 8000c88:	6878      	ldr	r0, [r7, #4]
 8000c8a:	f000 fb0d 	bl	80012a8 <readReg>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	461a      	mov	r2, r3
 8000c92:	2189      	movs	r1, #137	; 0x89
 8000c94:	6878      	ldr	r0, [r7, #4]
 8000c96:	f000 fabf 	bl	8001218 <writeReg>
      readReg(lidar,(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV) | 0x01)); // set bit 0
  }

  // "Set I2C standard mode"
  writeReg(lidar,0x88, 0x00);
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2188      	movs	r1, #136	; 0x88
 8000c9e:	6878      	ldr	r0, [r7, #4]
 8000ca0:	f000 faba 	bl	8001218 <writeReg>

  writeReg(lidar,0x80, 0x01);
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	2180      	movs	r1, #128	; 0x80
 8000ca8:	6878      	ldr	r0, [r7, #4]
 8000caa:	f000 fab5 	bl	8001218 <writeReg>
  writeReg(lidar,0xFF, 0x01);
 8000cae:	2201      	movs	r2, #1
 8000cb0:	21ff      	movs	r1, #255	; 0xff
 8000cb2:	6878      	ldr	r0, [r7, #4]
 8000cb4:	f000 fab0 	bl	8001218 <writeReg>
  writeReg(lidar,0x00, 0x00);
 8000cb8:	2200      	movs	r2, #0
 8000cba:	2100      	movs	r1, #0
 8000cbc:	6878      	ldr	r0, [r7, #4]
 8000cbe:	f000 faab 	bl	8001218 <writeReg>
  lidar->stop_variable = readReg(lidar,0x91);
 8000cc2:	2191      	movs	r1, #145	; 0x91
 8000cc4:	6878      	ldr	r0, [r7, #4]
 8000cc6:	f000 faef 	bl	80012a8 <readReg>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	461a      	mov	r2, r3
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	741a      	strb	r2, [r3, #16]
  //snprintf(msg,sizeof(msg),"Stop variable is: 0x%X , should be 0x%X\r\n",lidar->stop_variable,readReg(lidar,0x91));
  //HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 0xFFFF);
  writeReg(lidar,0x00, 0x01);
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	6878      	ldr	r0, [r7, #4]
 8000cd8:	f000 fa9e 	bl	8001218 <writeReg>
  writeReg(lidar,0xFF, 0x00);
 8000cdc:	2200      	movs	r2, #0
 8000cde:	21ff      	movs	r1, #255	; 0xff
 8000ce0:	6878      	ldr	r0, [r7, #4]
 8000ce2:	f000 fa99 	bl	8001218 <writeReg>
  writeReg(lidar,0x80, 0x00);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	2180      	movs	r1, #128	; 0x80
 8000cea:	6878      	ldr	r0, [r7, #4]
 8000cec:	f000 fa94 	bl	8001218 <writeReg>

  // disable SIGNAL_RATE_MSRC (bit 1) and SIGNAL_RATE_PRE_RANGE (bit 4) limit checks
  writeReg(lidar,MSRC_CONFIG_CONTROL, readReg(lidar,MSRC_CONFIG_CONTROL) | 0x12);
 8000cf0:	2160      	movs	r1, #96	; 0x60
 8000cf2:	6878      	ldr	r0, [r7, #4]
 8000cf4:	f000 fad8 	bl	80012a8 <readReg>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	f043 0312 	orr.w	r3, r3, #18
 8000cfe:	b2db      	uxtb	r3, r3
 8000d00:	461a      	mov	r2, r3
 8000d02:	2160      	movs	r1, #96	; 0x60
 8000d04:	6878      	ldr	r0, [r7, #4]
 8000d06:	f000 fa87 	bl	8001218 <writeReg>

  // set final range signal rate limit to 0.25 MCPS (million counts per second)
  setSignalRateLimit(lidar,0.25);
 8000d0a:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
 8000d0e:	6878      	ldr	r0, [r7, #4]
 8000d10:	f000 fb42 	bl	8001398 <setSignalRateLimit>

  writeReg(lidar,SYSTEM_SEQUENCE_CONFIG, 0xFF);
 8000d14:	22ff      	movs	r2, #255	; 0xff
 8000d16:	2101      	movs	r1, #1
 8000d18:	6878      	ldr	r0, [r7, #4]
 8000d1a:	f000 fa7d 	bl	8001218 <writeReg>

  // VL53L0X_StaticInit() begin

  uint8_t spad_count;
  bool spad_type_is_aperture;
  if (!getSpadInfo(lidar,&spad_count, &spad_type_is_aperture)) { return false; }
 8000d1e:	f107 0213 	add.w	r2, r7, #19
 8000d22:	f107 0314 	add.w	r3, r7, #20
 8000d26:	4619      	mov	r1, r3
 8000d28:	6878      	ldr	r0, [r7, #4]
 8000d2a:	f000 fe91 	bl	8001a50 <getSpadInfo>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	f083 0301 	eor.w	r3, r3, #1
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <init+0xca>
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	e268      	b.n	8001210 <init+0x59c>

  // The SPAD map (RefGoodSpadMap) is read by VL53L0X_get_info_from_device() in
  // the API, but the same data seems to be more easily readable from
  // GLOBAL_CONFIG_SPAD_ENABLES_REF_0 through _6, so read it from there
  uint8_t ref_spad_map[6];
  readMulti(lidar,GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 8000d3e:	f107 020c 	add.w	r2, r7, #12
 8000d42:	2306      	movs	r3, #6
 8000d44:	21b0      	movs	r1, #176	; 0xb0
 8000d46:	6878      	ldr	r0, [r7, #4]
 8000d48:	f000 fb04 	bl	8001354 <readMulti>
  //snprintf(msg,sizeof(msg),"Spads: 0x%X, 0x%X, 0x%X, 0x%X, 0x%X, 0x%X\r\n",ref_spad_map[0],ref_spad_map[1],ref_spad_map[2],ref_spad_map[3],ref_spad_map[4],ref_spad_map[5]);
  //HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 0xFFFF);
  // -- VL53L0X_set_reference_spads() begin (assume NVM values are valid)

  writeReg(lidar,0xFF, 0x01);
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	21ff      	movs	r1, #255	; 0xff
 8000d50:	6878      	ldr	r0, [r7, #4]
 8000d52:	f000 fa61 	bl	8001218 <writeReg>
  writeReg(lidar,DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
 8000d56:	2200      	movs	r2, #0
 8000d58:	214f      	movs	r1, #79	; 0x4f
 8000d5a:	6878      	ldr	r0, [r7, #4]
 8000d5c:	f000 fa5c 	bl	8001218 <writeReg>
  writeReg(lidar,DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
 8000d60:	222c      	movs	r2, #44	; 0x2c
 8000d62:	214e      	movs	r1, #78	; 0x4e
 8000d64:	6878      	ldr	r0, [r7, #4]
 8000d66:	f000 fa57 	bl	8001218 <writeReg>
  writeReg(lidar,0xFF, 0x00);
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	21ff      	movs	r1, #255	; 0xff
 8000d6e:	6878      	ldr	r0, [r7, #4]
 8000d70:	f000 fa52 	bl	8001218 <writeReg>
  writeReg(lidar,GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);
 8000d74:	22b4      	movs	r2, #180	; 0xb4
 8000d76:	21b6      	movs	r1, #182	; 0xb6
 8000d78:	6878      	ldr	r0, [r7, #4]
 8000d7a:	f000 fa4d 	bl	8001218 <writeReg>

  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
 8000d7e:	7cfb      	ldrb	r3, [r7, #19]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <init+0x114>
 8000d84:	230c      	movs	r3, #12
 8000d86:	e000      	b.n	8000d8a <init+0x116>
 8000d88:	2300      	movs	r3, #0
 8000d8a:	757b      	strb	r3, [r7, #21]
  uint8_t spads_enabled = 0;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	75fb      	strb	r3, [r7, #23]

  for (uint8_t i = 0; i < 48; i++)
 8000d90:	2300      	movs	r3, #0
 8000d92:	75bb      	strb	r3, [r7, #22]
 8000d94:	e052      	b.n	8000e3c <init+0x1c8>
  {
    if (i < first_spad_to_enable || spads_enabled == spad_count)
 8000d96:	7dba      	ldrb	r2, [r7, #22]
 8000d98:	7d7b      	ldrb	r3, [r7, #21]
 8000d9a:	429a      	cmp	r2, r3
 8000d9c:	d303      	bcc.n	8000da6 <init+0x132>
 8000d9e:	7d3b      	ldrb	r3, [r7, #20]
 8000da0:	7dfa      	ldrb	r2, [r7, #23]
 8000da2:	429a      	cmp	r2, r3
 8000da4:	d126      	bne.n	8000df4 <init+0x180>
    {
      // This bit is lower than the first one that should be enabled, or
      // (reference_spad_count) bits have already been enabled, so zero this bit
      ref_spad_map[i / 8] &= ~(1 << (i % 7));
 8000da6:	7dbb      	ldrb	r3, [r7, #22]
 8000da8:	08db      	lsrs	r3, r3, #3
 8000daa:	b2dc      	uxtb	r4, r3
 8000dac:	4623      	mov	r3, r4
 8000dae:	3318      	adds	r3, #24
 8000db0:	443b      	add	r3, r7
 8000db2:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000db6:	b258      	sxtb	r0, r3
 8000db8:	7dba      	ldrb	r2, [r7, #22]
 8000dba:	4b0d      	ldr	r3, [pc, #52]	; (8000df0 <init+0x17c>)
 8000dbc:	fba3 1302 	umull	r1, r3, r3, r2
 8000dc0:	1ad1      	subs	r1, r2, r3
 8000dc2:	0849      	lsrs	r1, r1, #1
 8000dc4:	440b      	add	r3, r1
 8000dc6:	0899      	lsrs	r1, r3, #2
 8000dc8:	460b      	mov	r3, r1
 8000dca:	00db      	lsls	r3, r3, #3
 8000dcc:	1a5b      	subs	r3, r3, r1
 8000dce:	1ad3      	subs	r3, r2, r3
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	4093      	lsls	r3, r2
 8000dd8:	b25b      	sxtb	r3, r3
 8000dda:	43db      	mvns	r3, r3
 8000ddc:	b25b      	sxtb	r3, r3
 8000dde:	4003      	ands	r3, r0
 8000de0:	b25a      	sxtb	r2, r3
 8000de2:	4623      	mov	r3, r4
 8000de4:	b2d2      	uxtb	r2, r2
 8000de6:	3318      	adds	r3, #24
 8000de8:	443b      	add	r3, r7
 8000dea:	f803 2c0c 	strb.w	r2, [r3, #-12]
 8000dee:	e01f      	b.n	8000e30 <init+0x1bc>
 8000df0:	24924925 	.word	0x24924925
    }
    else if ((ref_spad_map[i / 8] >> (i % 7)) & 0x1)
 8000df4:	7dbb      	ldrb	r3, [r7, #22]
 8000df6:	08db      	lsrs	r3, r3, #3
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	3318      	adds	r3, #24
 8000dfc:	443b      	add	r3, r7
 8000dfe:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000e02:	4618      	mov	r0, r3
 8000e04:	7dba      	ldrb	r2, [r7, #22]
 8000e06:	4b0c      	ldr	r3, [pc, #48]	; (8000e38 <init+0x1c4>)
 8000e08:	fba3 1302 	umull	r1, r3, r3, r2
 8000e0c:	1ad1      	subs	r1, r2, r3
 8000e0e:	0849      	lsrs	r1, r1, #1
 8000e10:	440b      	add	r3, r1
 8000e12:	0899      	lsrs	r1, r3, #2
 8000e14:	460b      	mov	r3, r1
 8000e16:	00db      	lsls	r3, r3, #3
 8000e18:	1a5b      	subs	r3, r3, r1
 8000e1a:	1ad3      	subs	r3, r2, r3
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	fa40 f303 	asr.w	r3, r0, r3
 8000e22:	f003 0301 	and.w	r3, r3, #1
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d002      	beq.n	8000e30 <init+0x1bc>
    {
      spads_enabled++;
 8000e2a:	7dfb      	ldrb	r3, [r7, #23]
 8000e2c:	3301      	adds	r3, #1
 8000e2e:	75fb      	strb	r3, [r7, #23]
  for (uint8_t i = 0; i < 48; i++)
 8000e30:	7dbb      	ldrb	r3, [r7, #22]
 8000e32:	3301      	adds	r3, #1
 8000e34:	75bb      	strb	r3, [r7, #22]
 8000e36:	e001      	b.n	8000e3c <init+0x1c8>
 8000e38:	24924925 	.word	0x24924925
 8000e3c:	7dbb      	ldrb	r3, [r7, #22]
 8000e3e:	2b2f      	cmp	r3, #47	; 0x2f
 8000e40:	d9a9      	bls.n	8000d96 <init+0x122>
    }
  }

  writeMulti(lidar,GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 8000e42:	f107 020c 	add.w	r2, r7, #12
 8000e46:	2306      	movs	r3, #6
 8000e48:	21b0      	movs	r1, #176	; 0xb0
 8000e4a:	6878      	ldr	r0, [r7, #4]
 8000e4c:	f000 fa64 	bl	8001318 <writeMulti>
  // -- VL53L0X_set_reference_spads() end

  // -- VL53L0X_load_tuning_settings() begin
  // DefaultTuningSettings from vl53l0x_tuning.h

  writeReg(lidar,0xFF, 0x01);
 8000e50:	2201      	movs	r2, #1
 8000e52:	21ff      	movs	r1, #255	; 0xff
 8000e54:	6878      	ldr	r0, [r7, #4]
 8000e56:	f000 f9df 	bl	8001218 <writeReg>
  writeReg(lidar,0x00, 0x00);
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	6878      	ldr	r0, [r7, #4]
 8000e60:	f000 f9da 	bl	8001218 <writeReg>

  writeReg(lidar,0xFF, 0x00);
 8000e64:	2200      	movs	r2, #0
 8000e66:	21ff      	movs	r1, #255	; 0xff
 8000e68:	6878      	ldr	r0, [r7, #4]
 8000e6a:	f000 f9d5 	bl	8001218 <writeReg>
  writeReg(lidar,0x09, 0x00);
 8000e6e:	2200      	movs	r2, #0
 8000e70:	2109      	movs	r1, #9
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	f000 f9d0 	bl	8001218 <writeReg>
  writeReg(lidar,0x10, 0x00);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	2110      	movs	r1, #16
 8000e7c:	6878      	ldr	r0, [r7, #4]
 8000e7e:	f000 f9cb 	bl	8001218 <writeReg>
  writeReg(lidar,0x11, 0x00);
 8000e82:	2200      	movs	r2, #0
 8000e84:	2111      	movs	r1, #17
 8000e86:	6878      	ldr	r0, [r7, #4]
 8000e88:	f000 f9c6 	bl	8001218 <writeReg>

  writeReg(lidar,0x24, 0x01);
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	2124      	movs	r1, #36	; 0x24
 8000e90:	6878      	ldr	r0, [r7, #4]
 8000e92:	f000 f9c1 	bl	8001218 <writeReg>
  writeReg(lidar,0x25, 0xFF);
 8000e96:	22ff      	movs	r2, #255	; 0xff
 8000e98:	2125      	movs	r1, #37	; 0x25
 8000e9a:	6878      	ldr	r0, [r7, #4]
 8000e9c:	f000 f9bc 	bl	8001218 <writeReg>
  writeReg(lidar,0x75, 0x00);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	2175      	movs	r1, #117	; 0x75
 8000ea4:	6878      	ldr	r0, [r7, #4]
 8000ea6:	f000 f9b7 	bl	8001218 <writeReg>

  writeReg(lidar,0xFF, 0x01);
 8000eaa:	2201      	movs	r2, #1
 8000eac:	21ff      	movs	r1, #255	; 0xff
 8000eae:	6878      	ldr	r0, [r7, #4]
 8000eb0:	f000 f9b2 	bl	8001218 <writeReg>
  writeReg(lidar,0x4E, 0x2C);
 8000eb4:	222c      	movs	r2, #44	; 0x2c
 8000eb6:	214e      	movs	r1, #78	; 0x4e
 8000eb8:	6878      	ldr	r0, [r7, #4]
 8000eba:	f000 f9ad 	bl	8001218 <writeReg>
  writeReg(lidar,0x48, 0x00);
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	2148      	movs	r1, #72	; 0x48
 8000ec2:	6878      	ldr	r0, [r7, #4]
 8000ec4:	f000 f9a8 	bl	8001218 <writeReg>
  writeReg(lidar,0x30, 0x20);
 8000ec8:	2220      	movs	r2, #32
 8000eca:	2130      	movs	r1, #48	; 0x30
 8000ecc:	6878      	ldr	r0, [r7, #4]
 8000ece:	f000 f9a3 	bl	8001218 <writeReg>

  writeReg(lidar,0xFF, 0x00);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	21ff      	movs	r1, #255	; 0xff
 8000ed6:	6878      	ldr	r0, [r7, #4]
 8000ed8:	f000 f99e 	bl	8001218 <writeReg>
  writeReg(lidar,0x30, 0x09);
 8000edc:	2209      	movs	r2, #9
 8000ede:	2130      	movs	r1, #48	; 0x30
 8000ee0:	6878      	ldr	r0, [r7, #4]
 8000ee2:	f000 f999 	bl	8001218 <writeReg>
  writeReg(lidar,0x54, 0x00);
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	2154      	movs	r1, #84	; 0x54
 8000eea:	6878      	ldr	r0, [r7, #4]
 8000eec:	f000 f994 	bl	8001218 <writeReg>
  writeReg(lidar,0x31, 0x04);
 8000ef0:	2204      	movs	r2, #4
 8000ef2:	2131      	movs	r1, #49	; 0x31
 8000ef4:	6878      	ldr	r0, [r7, #4]
 8000ef6:	f000 f98f 	bl	8001218 <writeReg>
  writeReg(lidar,0x32, 0x03);
 8000efa:	2203      	movs	r2, #3
 8000efc:	2132      	movs	r1, #50	; 0x32
 8000efe:	6878      	ldr	r0, [r7, #4]
 8000f00:	f000 f98a 	bl	8001218 <writeReg>
  writeReg(lidar,0x40, 0x83);
 8000f04:	2283      	movs	r2, #131	; 0x83
 8000f06:	2140      	movs	r1, #64	; 0x40
 8000f08:	6878      	ldr	r0, [r7, #4]
 8000f0a:	f000 f985 	bl	8001218 <writeReg>
  writeReg(lidar,0x46, 0x25);
 8000f0e:	2225      	movs	r2, #37	; 0x25
 8000f10:	2146      	movs	r1, #70	; 0x46
 8000f12:	6878      	ldr	r0, [r7, #4]
 8000f14:	f000 f980 	bl	8001218 <writeReg>
  writeReg(lidar,0x60, 0x00);
 8000f18:	2200      	movs	r2, #0
 8000f1a:	2160      	movs	r1, #96	; 0x60
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	f000 f97b 	bl	8001218 <writeReg>
  writeReg(lidar,0x27, 0x00);
 8000f22:	2200      	movs	r2, #0
 8000f24:	2127      	movs	r1, #39	; 0x27
 8000f26:	6878      	ldr	r0, [r7, #4]
 8000f28:	f000 f976 	bl	8001218 <writeReg>
  writeReg(lidar,0x50, 0x06);
 8000f2c:	2206      	movs	r2, #6
 8000f2e:	2150      	movs	r1, #80	; 0x50
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f000 f971 	bl	8001218 <writeReg>
  writeReg(lidar,0x51, 0x00);
 8000f36:	2200      	movs	r2, #0
 8000f38:	2151      	movs	r1, #81	; 0x51
 8000f3a:	6878      	ldr	r0, [r7, #4]
 8000f3c:	f000 f96c 	bl	8001218 <writeReg>
  writeReg(lidar,0x52, 0x96);
 8000f40:	2296      	movs	r2, #150	; 0x96
 8000f42:	2152      	movs	r1, #82	; 0x52
 8000f44:	6878      	ldr	r0, [r7, #4]
 8000f46:	f000 f967 	bl	8001218 <writeReg>
  writeReg(lidar,0x56, 0x08);
 8000f4a:	2208      	movs	r2, #8
 8000f4c:	2156      	movs	r1, #86	; 0x56
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	f000 f962 	bl	8001218 <writeReg>
  writeReg(lidar,0x57, 0x30);
 8000f54:	2230      	movs	r2, #48	; 0x30
 8000f56:	2157      	movs	r1, #87	; 0x57
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	f000 f95d 	bl	8001218 <writeReg>
  writeReg(lidar,0x61, 0x00);
 8000f5e:	2200      	movs	r2, #0
 8000f60:	2161      	movs	r1, #97	; 0x61
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f000 f958 	bl	8001218 <writeReg>
  writeReg(lidar,0x62, 0x00);
 8000f68:	2200      	movs	r2, #0
 8000f6a:	2162      	movs	r1, #98	; 0x62
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f000 f953 	bl	8001218 <writeReg>
  writeReg(lidar,0x64, 0x00);
 8000f72:	2200      	movs	r2, #0
 8000f74:	2164      	movs	r1, #100	; 0x64
 8000f76:	6878      	ldr	r0, [r7, #4]
 8000f78:	f000 f94e 	bl	8001218 <writeReg>
  writeReg(lidar,0x65, 0x00);
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	2165      	movs	r1, #101	; 0x65
 8000f80:	6878      	ldr	r0, [r7, #4]
 8000f82:	f000 f949 	bl	8001218 <writeReg>
  writeReg(lidar,0x66, 0xA0);
 8000f86:	22a0      	movs	r2, #160	; 0xa0
 8000f88:	2166      	movs	r1, #102	; 0x66
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	f000 f944 	bl	8001218 <writeReg>

  writeReg(lidar,0xFF, 0x01);
 8000f90:	2201      	movs	r2, #1
 8000f92:	21ff      	movs	r1, #255	; 0xff
 8000f94:	6878      	ldr	r0, [r7, #4]
 8000f96:	f000 f93f 	bl	8001218 <writeReg>
  writeReg(lidar,0x22, 0x32);
 8000f9a:	2232      	movs	r2, #50	; 0x32
 8000f9c:	2122      	movs	r1, #34	; 0x22
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f000 f93a 	bl	8001218 <writeReg>
  writeReg(lidar,0x47, 0x14);
 8000fa4:	2214      	movs	r2, #20
 8000fa6:	2147      	movs	r1, #71	; 0x47
 8000fa8:	6878      	ldr	r0, [r7, #4]
 8000faa:	f000 f935 	bl	8001218 <writeReg>
  writeReg(lidar,0x49, 0xFF);
 8000fae:	22ff      	movs	r2, #255	; 0xff
 8000fb0:	2149      	movs	r1, #73	; 0x49
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	f000 f930 	bl	8001218 <writeReg>
  writeReg(lidar,0x4A, 0x00);
 8000fb8:	2200      	movs	r2, #0
 8000fba:	214a      	movs	r1, #74	; 0x4a
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f000 f92b 	bl	8001218 <writeReg>

  writeReg(lidar,0xFF, 0x00);
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	21ff      	movs	r1, #255	; 0xff
 8000fc6:	6878      	ldr	r0, [r7, #4]
 8000fc8:	f000 f926 	bl	8001218 <writeReg>
  writeReg(lidar,0x7A, 0x0A);
 8000fcc:	220a      	movs	r2, #10
 8000fce:	217a      	movs	r1, #122	; 0x7a
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	f000 f921 	bl	8001218 <writeReg>
  writeReg(lidar,0x7B, 0x00);
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	217b      	movs	r1, #123	; 0x7b
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f000 f91c 	bl	8001218 <writeReg>
  writeReg(lidar,0x78, 0x21);
 8000fe0:	2221      	movs	r2, #33	; 0x21
 8000fe2:	2178      	movs	r1, #120	; 0x78
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f000 f917 	bl	8001218 <writeReg>

  writeReg(lidar,0xFF, 0x01);
 8000fea:	2201      	movs	r2, #1
 8000fec:	21ff      	movs	r1, #255	; 0xff
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f000 f912 	bl	8001218 <writeReg>
  writeReg(lidar,0x23, 0x34);
 8000ff4:	2234      	movs	r2, #52	; 0x34
 8000ff6:	2123      	movs	r1, #35	; 0x23
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	f000 f90d 	bl	8001218 <writeReg>
  writeReg(lidar,0x42, 0x00);
 8000ffe:	2200      	movs	r2, #0
 8001000:	2142      	movs	r1, #66	; 0x42
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f000 f908 	bl	8001218 <writeReg>
  writeReg(lidar,0x44, 0xFF);
 8001008:	22ff      	movs	r2, #255	; 0xff
 800100a:	2144      	movs	r1, #68	; 0x44
 800100c:	6878      	ldr	r0, [r7, #4]
 800100e:	f000 f903 	bl	8001218 <writeReg>
  writeReg(lidar,0x45, 0x26);
 8001012:	2226      	movs	r2, #38	; 0x26
 8001014:	2145      	movs	r1, #69	; 0x45
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f000 f8fe 	bl	8001218 <writeReg>
  writeReg(lidar,0x46, 0x05);
 800101c:	2205      	movs	r2, #5
 800101e:	2146      	movs	r1, #70	; 0x46
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	f000 f8f9 	bl	8001218 <writeReg>
  writeReg(lidar,0x40, 0x40);
 8001026:	2240      	movs	r2, #64	; 0x40
 8001028:	2140      	movs	r1, #64	; 0x40
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f000 f8f4 	bl	8001218 <writeReg>
  writeReg(lidar,0x0E, 0x06);
 8001030:	2206      	movs	r2, #6
 8001032:	210e      	movs	r1, #14
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	f000 f8ef 	bl	8001218 <writeReg>
  writeReg(lidar,0x20, 0x1A);
 800103a:	221a      	movs	r2, #26
 800103c:	2120      	movs	r1, #32
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	f000 f8ea 	bl	8001218 <writeReg>
  writeReg(lidar,0x43, 0x40);
 8001044:	2240      	movs	r2, #64	; 0x40
 8001046:	2143      	movs	r1, #67	; 0x43
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	f000 f8e5 	bl	8001218 <writeReg>

  writeReg(lidar,0xFF, 0x00);
 800104e:	2200      	movs	r2, #0
 8001050:	21ff      	movs	r1, #255	; 0xff
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f000 f8e0 	bl	8001218 <writeReg>
  writeReg(lidar,0x34, 0x03);
 8001058:	2203      	movs	r2, #3
 800105a:	2134      	movs	r1, #52	; 0x34
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	f000 f8db 	bl	8001218 <writeReg>
  writeReg(lidar,0x35, 0x44);
 8001062:	2244      	movs	r2, #68	; 0x44
 8001064:	2135      	movs	r1, #53	; 0x35
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f000 f8d6 	bl	8001218 <writeReg>

  writeReg(lidar,0xFF, 0x01);
 800106c:	2201      	movs	r2, #1
 800106e:	21ff      	movs	r1, #255	; 0xff
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f000 f8d1 	bl	8001218 <writeReg>
  writeReg(lidar,0x31, 0x04);
 8001076:	2204      	movs	r2, #4
 8001078:	2131      	movs	r1, #49	; 0x31
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f000 f8cc 	bl	8001218 <writeReg>
  writeReg(lidar,0x4B, 0x09);
 8001080:	2209      	movs	r2, #9
 8001082:	214b      	movs	r1, #75	; 0x4b
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f000 f8c7 	bl	8001218 <writeReg>
  writeReg(lidar,0x4C, 0x05);
 800108a:	2205      	movs	r2, #5
 800108c:	214c      	movs	r1, #76	; 0x4c
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f000 f8c2 	bl	8001218 <writeReg>
  writeReg(lidar,0x4D, 0x04);
 8001094:	2204      	movs	r2, #4
 8001096:	214d      	movs	r1, #77	; 0x4d
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f000 f8bd 	bl	8001218 <writeReg>

  writeReg(lidar,0xFF, 0x00);
 800109e:	2200      	movs	r2, #0
 80010a0:	21ff      	movs	r1, #255	; 0xff
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f000 f8b8 	bl	8001218 <writeReg>
  writeReg(lidar,0x44, 0x00);
 80010a8:	2200      	movs	r2, #0
 80010aa:	2144      	movs	r1, #68	; 0x44
 80010ac:	6878      	ldr	r0, [r7, #4]
 80010ae:	f000 f8b3 	bl	8001218 <writeReg>
  writeReg(lidar,0x45, 0x20);
 80010b2:	2220      	movs	r2, #32
 80010b4:	2145      	movs	r1, #69	; 0x45
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	f000 f8ae 	bl	8001218 <writeReg>
  writeReg(lidar,0x47, 0x08);
 80010bc:	2208      	movs	r2, #8
 80010be:	2147      	movs	r1, #71	; 0x47
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	f000 f8a9 	bl	8001218 <writeReg>
  writeReg(lidar,0x48, 0x28);
 80010c6:	2228      	movs	r2, #40	; 0x28
 80010c8:	2148      	movs	r1, #72	; 0x48
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f000 f8a4 	bl	8001218 <writeReg>
  writeReg(lidar,0x67, 0x00);
 80010d0:	2200      	movs	r2, #0
 80010d2:	2167      	movs	r1, #103	; 0x67
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f000 f89f 	bl	8001218 <writeReg>
  writeReg(lidar,0x70, 0x04);
 80010da:	2204      	movs	r2, #4
 80010dc:	2170      	movs	r1, #112	; 0x70
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f000 f89a 	bl	8001218 <writeReg>
  writeReg(lidar,0x71, 0x01);
 80010e4:	2201      	movs	r2, #1
 80010e6:	2171      	movs	r1, #113	; 0x71
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f000 f895 	bl	8001218 <writeReg>
  writeReg(lidar,0x72, 0xFE);
 80010ee:	22fe      	movs	r2, #254	; 0xfe
 80010f0:	2172      	movs	r1, #114	; 0x72
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f000 f890 	bl	8001218 <writeReg>
  writeReg(lidar,0x76, 0x00);
 80010f8:	2200      	movs	r2, #0
 80010fa:	2176      	movs	r1, #118	; 0x76
 80010fc:	6878      	ldr	r0, [r7, #4]
 80010fe:	f000 f88b 	bl	8001218 <writeReg>
  writeReg(lidar,0x77, 0x00);
 8001102:	2200      	movs	r2, #0
 8001104:	2177      	movs	r1, #119	; 0x77
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f000 f886 	bl	8001218 <writeReg>

  writeReg(lidar,0xFF, 0x01);
 800110c:	2201      	movs	r2, #1
 800110e:	21ff      	movs	r1, #255	; 0xff
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f000 f881 	bl	8001218 <writeReg>
  writeReg(lidar,0x0D, 0x01);
 8001116:	2201      	movs	r2, #1
 8001118:	210d      	movs	r1, #13
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f000 f87c 	bl	8001218 <writeReg>

  writeReg(lidar,0xFF, 0x00);
 8001120:	2200      	movs	r2, #0
 8001122:	21ff      	movs	r1, #255	; 0xff
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f000 f877 	bl	8001218 <writeReg>
  writeReg(lidar,0x80, 0x01);
 800112a:	2201      	movs	r2, #1
 800112c:	2180      	movs	r1, #128	; 0x80
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f000 f872 	bl	8001218 <writeReg>
  writeReg(lidar,0x01, 0xF8);
 8001134:	22f8      	movs	r2, #248	; 0xf8
 8001136:	2101      	movs	r1, #1
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	f000 f86d 	bl	8001218 <writeReg>

  writeReg(lidar,0xFF, 0x01);
 800113e:	2201      	movs	r2, #1
 8001140:	21ff      	movs	r1, #255	; 0xff
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f000 f868 	bl	8001218 <writeReg>
  writeReg(lidar,0x8E, 0x01);
 8001148:	2201      	movs	r2, #1
 800114a:	218e      	movs	r1, #142	; 0x8e
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	f000 f863 	bl	8001218 <writeReg>
  writeReg(lidar,0x00, 0x01);
 8001152:	2201      	movs	r2, #1
 8001154:	2100      	movs	r1, #0
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f000 f85e 	bl	8001218 <writeReg>
  writeReg(lidar,0xFF, 0x00);
 800115c:	2200      	movs	r2, #0
 800115e:	21ff      	movs	r1, #255	; 0xff
 8001160:	6878      	ldr	r0, [r7, #4]
 8001162:	f000 f859 	bl	8001218 <writeReg>
  writeReg(lidar,0x80, 0x00);
 8001166:	2200      	movs	r2, #0
 8001168:	2180      	movs	r1, #128	; 0x80
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f000 f854 	bl	8001218 <writeReg>
  // -- VL53L0X_load_tuning_settings() end

  // "Set interrupt config to new sample ready"
  // -- VL53L0X_SetGpioConfig() begin

  writeReg(lidar,SYSTEM_INTERRUPT_CONFIG_GPIO, 0x04);
 8001170:	2204      	movs	r2, #4
 8001172:	210a      	movs	r1, #10
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f000 f84f 	bl	8001218 <writeReg>
  writeReg(lidar,GPIO_HV_MUX_ACTIVE_HIGH, readReg(lidar,GPIO_HV_MUX_ACTIVE_HIGH) & ~0x10); // active low
 800117a:	2184      	movs	r1, #132	; 0x84
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f000 f893 	bl	80012a8 <readReg>
 8001182:	4603      	mov	r3, r0
 8001184:	f023 0310 	bic.w	r3, r3, #16
 8001188:	b2db      	uxtb	r3, r3
 800118a:	461a      	mov	r2, r3
 800118c:	2184      	movs	r1, #132	; 0x84
 800118e:	6878      	ldr	r0, [r7, #4]
 8001190:	f000 f842 	bl	8001218 <writeReg>
  writeReg(lidar,SYSTEM_INTERRUPT_CLEAR, 0x01);
 8001194:	2201      	movs	r2, #1
 8001196:	210b      	movs	r1, #11
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f000 f83d 	bl	8001218 <writeReg>

  // -- VL53L0X_SetGpioConfig() end

  lidar->measurement_timing_budget_us = getMeasurementTimingBudget(lidar);
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f000 f9c7 	bl	8001532 <getMeasurementTimingBudget>
 80011a4:	4602      	mov	r2, r0
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	615a      	str	r2, [r3, #20]
  // "Disable MSRC and TCC by default"
  // MSRC = Minimum Signal Rate Check
  // TCC = Target CentreCheck
  // -- VL53L0X_SetSequenceStepEnable() begin

  writeReg(lidar,SYSTEM_SEQUENCE_CONFIG, 0xE8);
 80011aa:	22e8      	movs	r2, #232	; 0xe8
 80011ac:	2101      	movs	r1, #1
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	f000 f832 	bl	8001218 <writeReg>

  // -- VL53L0X_SetSequenceStepEnable() end

  // "Recalculate timing budget"
  setMeasurementTimingBudget(lidar,lidar->measurement_timing_budget_us);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	695b      	ldr	r3, [r3, #20]
 80011b8:	4619      	mov	r1, r3
 80011ba:	6878      	ldr	r0, [r7, #4]
 80011bc:	f000 f920 	bl	8001400 <setMeasurementTimingBudget>

  // VL53L0X_PerformRefCalibration() begin (VL53L0X_perform_ref_calibration())

  // -- VL53L0X_perform_vhv_calibration() begin

  writeReg(lidar,SYSTEM_SEQUENCE_CONFIG, 0x01);
 80011c0:	2201      	movs	r2, #1
 80011c2:	2101      	movs	r1, #1
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	f000 f827 	bl	8001218 <writeReg>
  if (!performSingleRefCalibration(lidar,0x40)) { return false; }
 80011ca:	2140      	movs	r1, #64	; 0x40
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f000 fe0f 	bl	8001df0 <performSingleRefCalibration>
 80011d2:	4603      	mov	r3, r0
 80011d4:	f083 0301 	eor.w	r3, r3, #1
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <init+0x56e>
 80011de:	2300      	movs	r3, #0
 80011e0:	e016      	b.n	8001210 <init+0x59c>

  // -- VL53L0X_perform_vhv_calibration() end

  // -- VL53L0X_perform_phase_calibration() begin

  writeReg(lidar,SYSTEM_SEQUENCE_CONFIG, 0x02);
 80011e2:	2202      	movs	r2, #2
 80011e4:	2101      	movs	r1, #1
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f000 f816 	bl	8001218 <writeReg>
  if (!performSingleRefCalibration(lidar,0x00)) { return false; }
 80011ec:	2100      	movs	r1, #0
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f000 fdfe 	bl	8001df0 <performSingleRefCalibration>
 80011f4:	4603      	mov	r3, r0
 80011f6:	f083 0301 	eor.w	r3, r3, #1
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <init+0x590>
 8001200:	2300      	movs	r3, #0
 8001202:	e005      	b.n	8001210 <init+0x59c>

  // -- VL53L0X_perform_phase_calibration() end

  // "restore the previous Sequence Config"
  writeReg(lidar,SYSTEM_SEQUENCE_CONFIG, 0xE8);
 8001204:	22e8      	movs	r2, #232	; 0xe8
 8001206:	2101      	movs	r1, #1
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	f000 f805 	bl	8001218 <writeReg>

  // VL53L0X_PerformRefCalibration() end

  return true;
 800120e:	2301      	movs	r3, #1
}
 8001210:	4618      	mov	r0, r3
 8001212:	371c      	adds	r7, #28
 8001214:	46bd      	mov	sp, r7
 8001216:	bd90      	pop	{r4, r7, pc}

08001218 <writeReg>:

// Write an 8-bit register
void writeReg(VL53L0X * lidar,uint8_t reg, uint8_t value)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	460b      	mov	r3, r1
 8001222:	70fb      	strb	r3, [r7, #3]
 8001224:	4613      	mov	r3, r2
 8001226:	70bb      	strb	r3, [r7, #2]
	writeByte(I2C,lidar->address,reg,value);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	7819      	ldrb	r1, [r3, #0]
 800122c:	78bb      	ldrb	r3, [r7, #2]
 800122e:	78fa      	ldrb	r2, [r7, #3]
 8001230:	4804      	ldr	r0, [pc, #16]	; (8001244 <writeReg+0x2c>)
 8001232:	f7ff fc78 	bl	8000b26 <writeByte>
	lidar->last_status = 0;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2200      	movs	r2, #0
 800123a:	761a      	strb	r2, [r3, #24]
}
 800123c:	bf00      	nop
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	20000094 	.word	0x20000094

08001248 <writeReg16Bit>:

// Write a 16-bit register
void writeReg16Bit(VL53L0X * lidar,uint8_t reg, uint16_t value)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	460b      	mov	r3, r1
 8001252:	70fb      	strb	r3, [r7, #3]
 8001254:	4613      	mov	r3, r2
 8001256:	803b      	strh	r3, [r7, #0]
  writeWord(I2C,lidar->address,reg,value);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	7819      	ldrb	r1, [r3, #0]
 800125c:	883b      	ldrh	r3, [r7, #0]
 800125e:	78fa      	ldrb	r2, [r7, #3]
 8001260:	4804      	ldr	r0, [pc, #16]	; (8001274 <writeReg16Bit+0x2c>)
 8001262:	f7ff fca4 	bl	8000bae <writeWord>
  lidar->last_status = 0;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2200      	movs	r2, #0
 800126a:	761a      	strb	r2, [r3, #24]
}
 800126c:	bf00      	nop
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	20000094 	.word	0x20000094

08001278 <writeReg32Bit>:

// Write a 32-bit register
void writeReg32Bit(VL53L0X * lidar,uint8_t reg, uint32_t value)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	60f8      	str	r0, [r7, #12]
 8001280:	460b      	mov	r3, r1
 8001282:	607a      	str	r2, [r7, #4]
 8001284:	72fb      	strb	r3, [r7, #11]
  write32Bits(I2C,lidar->address,reg,value);
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	7819      	ldrb	r1, [r3, #0]
 800128a:	7afa      	ldrb	r2, [r7, #11]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	4805      	ldr	r0, [pc, #20]	; (80012a4 <writeReg32Bit+0x2c>)
 8001290:	f7ff fcad 	bl	8000bee <write32Bits>
  lidar->last_status = 0;
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	2200      	movs	r2, #0
 8001298:	761a      	strb	r2, [r3, #24]
}
 800129a:	bf00      	nop
 800129c:	3710      	adds	r7, #16
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	20000094 	.word	0x20000094

080012a8 <readReg>:

// Read an 8-bit register
uint8_t readReg(VL53L0X * lidar,uint8_t reg)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b086      	sub	sp, #24
 80012ac:	af02      	add	r7, sp, #8
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	460b      	mov	r3, r1
 80012b2:	70fb      	strb	r3, [r7, #3]
  uint8_t value;
  readByte(I2C,lidar->address,reg,&value,I2CTIMEOUT);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	7819      	ldrb	r1, [r3, #0]
 80012b8:	f107 030f 	add.w	r3, r7, #15
 80012bc:	78fa      	ldrb	r2, [r7, #3]
 80012be:	f44f 7080 	mov.w	r0, #256	; 0x100
 80012c2:	9000      	str	r0, [sp, #0]
 80012c4:	4805      	ldr	r0, [pc, #20]	; (80012dc <readReg+0x34>)
 80012c6:	f7ff fbc9 	bl	8000a5c <readByte>

  lidar->last_status = 0;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2200      	movs	r2, #0
 80012ce:	761a      	strb	r2, [r3, #24]
  return value;
 80012d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3710      	adds	r7, #16
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	20000094 	.word	0x20000094

080012e0 <readReg16Bit>:

// Read a 16-bit register
uint16_t readReg16Bit(VL53L0X * lidar,uint8_t reg)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af02      	add	r7, sp, #8
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	460b      	mov	r3, r1
 80012ea:	70fb      	strb	r3, [r7, #3]
  uint16_t value;
  readWord(I2C,lidar->address,reg,&value,I2CTIMEOUT);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	7819      	ldrb	r1, [r3, #0]
 80012f0:	f107 030e 	add.w	r3, r7, #14
 80012f4:	78fa      	ldrb	r2, [r7, #3]
 80012f6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80012fa:	9000      	str	r0, [sp, #0]
 80012fc:	4805      	ldr	r0, [pc, #20]	; (8001314 <readReg16Bit+0x34>)
 80012fe:	f7ff fbec 	bl	8000ada <readWord>

  lidar->last_status = 0;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2200      	movs	r2, #0
 8001306:	761a      	strb	r2, [r3, #24]
  return value;
 8001308:	89fb      	ldrh	r3, [r7, #14]
}
 800130a:	4618      	mov	r0, r3
 800130c:	3710      	adds	r7, #16
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	20000094 	.word	0x20000094

08001318 <writeMulti>:
}

// Write an arbitrary number of bytes from the given array to the sensor,
// starting at the given register
void writeMulti(VL53L0X * lidar,uint8_t reg, uint8_t * src, uint8_t count)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b086      	sub	sp, #24
 800131c:	af02      	add	r7, sp, #8
 800131e:	60f8      	str	r0, [r7, #12]
 8001320:	607a      	str	r2, [r7, #4]
 8001322:	461a      	mov	r2, r3
 8001324:	460b      	mov	r3, r1
 8001326:	72fb      	strb	r3, [r7, #11]
 8001328:	4613      	mov	r3, r2
 800132a:	72bb      	strb	r3, [r7, #10]
	writeBytes(I2C,lidar->address,reg,count,src);
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	7819      	ldrb	r1, [r3, #0]
 8001330:	7ab8      	ldrb	r0, [r7, #10]
 8001332:	7afa      	ldrb	r2, [r7, #11]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	9300      	str	r3, [sp, #0]
 8001338:	4603      	mov	r3, r0
 800133a:	4805      	ldr	r0, [pc, #20]	; (8001350 <writeMulti+0x38>)
 800133c:	f7ff fc0d 	bl	8000b5a <writeBytes>
	lidar->last_status = 0;
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	2200      	movs	r2, #0
 8001344:	761a      	strb	r2, [r3, #24]
}
 8001346:	bf00      	nop
 8001348:	3710      	adds	r7, #16
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	20000094 	.word	0x20000094

08001354 <readMulti>:

// Read an arbitrary number of bytes from the sensor, starting at the given
// register, into the given array
void readMulti(VL53L0X * lidar,uint8_t reg, uint8_t * dst, uint8_t count)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b086      	sub	sp, #24
 8001358:	af02      	add	r7, sp, #8
 800135a:	60f8      	str	r0, [r7, #12]
 800135c:	607a      	str	r2, [r7, #4]
 800135e:	461a      	mov	r2, r3
 8001360:	460b      	mov	r3, r1
 8001362:	72fb      	strb	r3, [r7, #11]
 8001364:	4613      	mov	r3, r2
 8001366:	72bb      	strb	r3, [r7, #10]
	readBytes(I2C,lidar->address,reg,count,dst,I2CTIMEOUT);
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	7819      	ldrb	r1, [r3, #0]
 800136c:	7ab8      	ldrb	r0, [r7, #10]
 800136e:	7afa      	ldrb	r2, [r7, #11]
 8001370:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001374:	9301      	str	r3, [sp, #4]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	9300      	str	r3, [sp, #0]
 800137a:	4603      	mov	r3, r0
 800137c:	4804      	ldr	r0, [pc, #16]	; (8001390 <readMulti+0x3c>)
 800137e:	f7ff fb85 	bl	8000a8c <readBytes>
	lidar->last_status = 0;
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	2200      	movs	r2, #0
 8001386:	761a      	strb	r2, [r3, #24]
}
 8001388:	bf00      	nop
 800138a:	3710      	adds	r7, #16
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	20000094 	.word	0x20000094
 8001394:	00000000 	.word	0x00000000

08001398 <setSignalRateLimit>:
// Setting a lower limit increases the potential range of the sensor but also
// seems to increase the likelihood of getting an inaccurate reading because of
// unwanted reflections from objects other than the intended target.
// Defaults to 0.25 MCPS as initialized by the ST API and this library.
bool setSignalRateLimit(VL53L0X * lidar,float limit_Mcps)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	ed87 0a00 	vstr	s0, [r7]
  if (limit_Mcps < 0 || limit_Mcps > 511.99) { return false; }
 80013a4:	edd7 7a00 	vldr	s15, [r7]
 80013a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013b0:	d40a      	bmi.n	80013c8 <setSignalRateLimit+0x30>
 80013b2:	6838      	ldr	r0, [r7, #0]
 80013b4:	f7ff f8f0 	bl	8000598 <__aeabi_f2d>
 80013b8:	a30f      	add	r3, pc, #60	; (adr r3, 80013f8 <setSignalRateLimit+0x60>)
 80013ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013be:	f7ff f9c1 	bl	8000744 <__aeabi_dcmpgt>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <setSignalRateLimit+0x34>
 80013c8:	2300      	movs	r3, #0
 80013ca:	e00e      	b.n	80013ea <setSignalRateLimit+0x52>

  // Q9.7 fixed point format (9 integer bits, 7 fractional bits)
  writeReg16Bit(lidar,FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, (int)limit_Mcps * (1 << 7));
 80013cc:	edd7 7a00 	vldr	s15, [r7]
 80013d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013d4:	ee17 3a90 	vmov	r3, s15
 80013d8:	b29b      	uxth	r3, r3
 80013da:	01db      	lsls	r3, r3, #7
 80013dc:	b29b      	uxth	r3, r3
 80013de:	461a      	mov	r2, r3
 80013e0:	2144      	movs	r1, #68	; 0x44
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f7ff ff30 	bl	8001248 <writeReg16Bit>
  return true;
 80013e8:	2301      	movs	r3, #1
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	f3af 8000 	nop.w
 80013f8:	0a3d70a4 	.word	0x0a3d70a4
 80013fc:	407fffd7 	.word	0x407fffd7

08001400 <setMeasurementTimingBudget>:
// budget allows for more accurate measurements. Increasing the budget by a
// factor of N decreases the range measurement standard deviation by a factor of
// sqrt(N). Defaults to about 33 milliseconds; the minimum is 20 ms.
// based on VL53L0X_set_measurement_timing_budget_micro_seconds()
bool setMeasurementTimingBudget(VL53L0X * lidar,uint32_t budget_us)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b092      	sub	sp, #72	; 0x48
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	6039      	str	r1, [r7, #0]
  SequenceStepEnables enables;
  SequenceStepTimeouts timeouts;

  uint16_t const StartOverhead      = 1320; // note that this is different than the value in get_
 800140a:	f44f 63a5 	mov.w	r3, #1320	; 0x528
 800140e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  uint16_t const EndOverhead        = 960;
 8001412:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001416:	87fb      	strh	r3, [r7, #62]	; 0x3e
  uint16_t const MsrcOverhead       = 660;
 8001418:	f44f 7325 	mov.w	r3, #660	; 0x294
 800141c:	87bb      	strh	r3, [r7, #60]	; 0x3c
  uint16_t const TccOverhead        = 590;
 800141e:	f240 234e 	movw	r3, #590	; 0x24e
 8001422:	877b      	strh	r3, [r7, #58]	; 0x3a
  uint16_t const DssOverhead        = 690;
 8001424:	f240 23b2 	movw	r3, #690	; 0x2b2
 8001428:	873b      	strh	r3, [r7, #56]	; 0x38
  uint16_t const PreRangeOverhead   = 660;
 800142a:	f44f 7325 	mov.w	r3, #660	; 0x294
 800142e:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint16_t const FinalRangeOverhead = 550;
 8001430:	f240 2326 	movw	r3, #550	; 0x226
 8001434:	86bb      	strh	r3, [r7, #52]	; 0x34

  uint32_t const MinTimingBudget = 20000;
 8001436:	f644 6320 	movw	r3, #20000	; 0x4e20
 800143a:	633b      	str	r3, [r7, #48]	; 0x30

  if (budget_us < MinTimingBudget) { return false; }
 800143c:	683a      	ldr	r2, [r7, #0]
 800143e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001440:	429a      	cmp	r2, r3
 8001442:	d201      	bcs.n	8001448 <setMeasurementTimingBudget+0x48>
 8001444:	2300      	movs	r3, #0
 8001446:	e070      	b.n	800152a <setMeasurementTimingBudget+0x12a>

  uint32_t used_budget_us = StartOverhead + EndOverhead;
 8001448:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800144c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800144e:	4413      	add	r3, r2
 8001450:	647b      	str	r3, [r7, #68]	; 0x44

  getSequenceStepEnables(lidar,&enables);
 8001452:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001456:	4619      	mov	r1, r3
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f000 fb99 	bl	8001b90 <getSequenceStepEnables>
  getSequenceStepTimeouts(lidar,&enables, &timeouts);
 800145e:	f107 020c 	add.w	r2, r7, #12
 8001462:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001466:	4619      	mov	r1, r3
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f000 fbdc 	bl	8001c26 <getSequenceStepTimeouts>

  if (enables.tcc)
 800146e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001472:	2b00      	cmp	r3, #0
 8001474:	d005      	beq.n	8001482 <setMeasurementTimingBudget+0x82>
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 8001476:	69ba      	ldr	r2, [r7, #24]
 8001478:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800147a:	4413      	add	r3, r2
 800147c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800147e:	4413      	add	r3, r2
 8001480:	647b      	str	r3, [r7, #68]	; 0x44
  }

  if (enables.dss)
 8001482:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001486:	2b00      	cmp	r3, #0
 8001488:	d007      	beq.n	800149a <setMeasurementTimingBudget+0x9a>
  {
    used_budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800148e:	4413      	add	r3, r2
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001494:	4413      	add	r3, r2
 8001496:	647b      	str	r3, [r7, #68]	; 0x44
 8001498:	e009      	b.n	80014ae <setMeasurementTimingBudget+0xae>
  }
  else if (enables.msrc)
 800149a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d005      	beq.n	80014ae <setMeasurementTimingBudget+0xae>
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 80014a2:	69ba      	ldr	r2, [r7, #24]
 80014a4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80014a6:	4413      	add	r3, r2
 80014a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80014aa:	4413      	add	r3, r2
 80014ac:	647b      	str	r3, [r7, #68]	; 0x44
  }

  if (enables.pre_range)
 80014ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d005      	beq.n	80014c2 <setMeasurementTimingBudget+0xc2>
  {
    used_budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 80014b6:	69fa      	ldr	r2, [r7, #28]
 80014b8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80014ba:	4413      	add	r3, r2
 80014bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80014be:	4413      	add	r3, r2
 80014c0:	647b      	str	r3, [r7, #68]	; 0x44
  }

  if (enables.final_range)
 80014c2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d02e      	beq.n	8001528 <setMeasurementTimingBudget+0x128>
  {
    used_budget_us += FinalRangeOverhead;
 80014ca:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80014cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80014ce:	4413      	add	r3, r2
 80014d0:	647b      	str	r3, [r7, #68]	; 0x44
    // budget and the sum of all other timeouts within the sequence.
    // If there is no room for the final range timeout, then an error
    // will be set. Otherwise the remaining time will be applied to
    // the final range."

    if (used_budget_us > budget_us)
 80014d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	429a      	cmp	r2, r3
 80014d8:	d901      	bls.n	80014de <setMeasurementTimingBudget+0xde>
    {
      // "Requested timeout too big."
      return false;
 80014da:	2300      	movs	r3, #0
 80014dc:	e025      	b.n	800152a <setMeasurementTimingBudget+0x12a>
    }

    uint32_t final_range_timeout_us = budget_us - used_budget_us;
 80014de:	683a      	ldr	r2, [r7, #0]
 80014e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014e2:	1ad3      	subs	r3, r2, r3
 80014e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    //  timeouts must be expressed in macro periods MClks
    //  because they have different vcsel periods."

    uint16_t final_range_timeout_mclks =
      timeoutMicrosecondsToMclks(final_range_timeout_us,
                                 timeouts.final_range_vcsel_period_pclks);
 80014e6:	89fb      	ldrh	r3, [r7, #14]
      timeoutMicrosecondsToMclks(final_range_timeout_us,
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	4619      	mov	r1, r3
 80014ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80014ee:	f000 fc65 	bl	8001dbc <timeoutMicrosecondsToMclks>
 80014f2:	4603      	mov	r3, r0
    uint16_t final_range_timeout_mclks =
 80014f4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

    if (enables.pre_range)
 80014f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d005      	beq.n	800150c <setMeasurementTimingBudget+0x10c>
    {
      final_range_timeout_mclks += timeouts.pre_range_mclks;
 8001500:	8a7a      	ldrh	r2, [r7, #18]
 8001502:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001506:	4413      	add	r3, r2
 8001508:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    }

    writeReg16Bit(lidar,FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 800150c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001510:	4618      	mov	r0, r3
 8001512:	f000 fc08 	bl	8001d26 <encodeTimeout>
 8001516:	4603      	mov	r3, r0
 8001518:	461a      	mov	r2, r3
 800151a:	2171      	movs	r1, #113	; 0x71
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f7ff fe93 	bl	8001248 <writeReg16Bit>
      encodeTimeout(final_range_timeout_mclks));

    // set_sequence_step_timeout() end

    lidar->measurement_timing_budget_us = budget_us; // store for internal reuse
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	683a      	ldr	r2, [r7, #0]
 8001526:	615a      	str	r2, [r3, #20]
  }
  return true;
 8001528:	2301      	movs	r3, #1
}
 800152a:	4618      	mov	r0, r3
 800152c:	3748      	adds	r7, #72	; 0x48
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}

08001532 <getMeasurementTimingBudget>:

// Get the measurement timing budget in microseconds
// based on VL53L0X_get_measurement_timing_budget_micro_seconds()
// in us
uint32_t getMeasurementTimingBudget(VL53L0X * lidar)
{
 8001532:	b580      	push	{r7, lr}
 8001534:	b08e      	sub	sp, #56	; 0x38
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
  SequenceStepEnables enables;
  SequenceStepTimeouts timeouts;

  uint16_t const StartOverhead     = 1910; // note that this is different than the value in set_
 800153a:	f240 7376 	movw	r3, #1910	; 0x776
 800153e:	867b      	strh	r3, [r7, #50]	; 0x32
  uint16_t const EndOverhead        = 960;
 8001540:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001544:	863b      	strh	r3, [r7, #48]	; 0x30
  uint16_t const MsrcOverhead       = 660;
 8001546:	f44f 7325 	mov.w	r3, #660	; 0x294
 800154a:	85fb      	strh	r3, [r7, #46]	; 0x2e
  uint16_t const TccOverhead        = 590;
 800154c:	f240 234e 	movw	r3, #590	; 0x24e
 8001550:	85bb      	strh	r3, [r7, #44]	; 0x2c
  uint16_t const DssOverhead        = 690;
 8001552:	f240 23b2 	movw	r3, #690	; 0x2b2
 8001556:	857b      	strh	r3, [r7, #42]	; 0x2a
  uint16_t const PreRangeOverhead   = 660;
 8001558:	f44f 7325 	mov.w	r3, #660	; 0x294
 800155c:	853b      	strh	r3, [r7, #40]	; 0x28
  uint16_t const FinalRangeOverhead = 550;
 800155e:	f240 2326 	movw	r3, #550	; 0x226
 8001562:	84fb      	strh	r3, [r7, #38]	; 0x26

  // "Start and end overhead times always present"
  uint32_t budget_us = StartOverhead + EndOverhead;
 8001564:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8001566:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001568:	4413      	add	r3, r2
 800156a:	637b      	str	r3, [r7, #52]	; 0x34

  getSequenceStepEnables(lidar,&enables);
 800156c:	f107 0320 	add.w	r3, r7, #32
 8001570:	4619      	mov	r1, r3
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	f000 fb0c 	bl	8001b90 <getSequenceStepEnables>
  getSequenceStepTimeouts(lidar,&enables, &timeouts);
 8001578:	f107 0208 	add.w	r2, r7, #8
 800157c:	f107 0320 	add.w	r3, r7, #32
 8001580:	4619      	mov	r1, r3
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f000 fb4f 	bl	8001c26 <getSequenceStepTimeouts>

  if (enables.tcc)
 8001588:	f897 3020 	ldrb.w	r3, [r7, #32]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d005      	beq.n	800159c <getMeasurementTimingBudget+0x6a>
  {
    budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 8001590:	697a      	ldr	r2, [r7, #20]
 8001592:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001594:	4413      	add	r3, r2
 8001596:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001598:	4413      	add	r3, r2
 800159a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  if (enables.dss)
 800159c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d007      	beq.n	80015b4 <getMeasurementTimingBudget+0x82>
  {
    budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 80015a4:	697a      	ldr	r2, [r7, #20]
 80015a6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80015a8:	4413      	add	r3, r2
 80015aa:	005b      	lsls	r3, r3, #1
 80015ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80015ae:	4413      	add	r3, r2
 80015b0:	637b      	str	r3, [r7, #52]	; 0x34
 80015b2:	e009      	b.n	80015c8 <getMeasurementTimingBudget+0x96>
  }
  else if (enables.msrc)
 80015b4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d005      	beq.n	80015c8 <getMeasurementTimingBudget+0x96>
  {
    budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 80015bc:	697a      	ldr	r2, [r7, #20]
 80015be:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80015c0:	4413      	add	r3, r2
 80015c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80015c4:	4413      	add	r3, r2
 80015c6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  if (enables.pre_range)
 80015c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d005      	beq.n	80015dc <getMeasurementTimingBudget+0xaa>
  {
    budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 80015d0:	69ba      	ldr	r2, [r7, #24]
 80015d2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80015d4:	4413      	add	r3, r2
 80015d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80015d8:	4413      	add	r3, r2
 80015da:	637b      	str	r3, [r7, #52]	; 0x34
  }

  if (enables.final_range)
 80015dc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d005      	beq.n	80015f0 <getMeasurementTimingBudget+0xbe>
  {
    budget_us += (timeouts.final_range_us + FinalRangeOverhead);
 80015e4:	69fa      	ldr	r2, [r7, #28]
 80015e6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80015e8:	4413      	add	r3, r2
 80015ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80015ec:	4413      	add	r3, r2
 80015ee:	637b      	str	r3, [r7, #52]	; 0x34
  }

  lidar->measurement_timing_budget_us = budget_us; // store for internal reuse
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80015f4:	615a      	str	r2, [r3, #20]
  return budget_us;
 80015f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3738      	adds	r7, #56	; 0x38
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}

08001600 <setVcselPulsePeriod>:
// Valid values are (even numbers only):
//  pre:  12 to 18 (initialized default: 14)
//  final: 8 to 14 (initialized default: 10)
// based on VL53L0X_set_vcsel_pulse_period()
bool setVcselPulsePeriod(VL53L0X * lidar,vcselPeriodType type, uint8_t period_pclks)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b08c      	sub	sp, #48	; 0x30
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	460b      	mov	r3, r1
 800160a:	70fb      	strb	r3, [r7, #3]
 800160c:	4613      	mov	r3, r2
 800160e:	70bb      	strb	r3, [r7, #2]
  uint8_t vcsel_period_reg = encodeVcselPeriod(period_pclks);
 8001610:	78bb      	ldrb	r3, [r7, #2]
 8001612:	4618      	mov	r0, r3
 8001614:	f000 fc55 	bl	8001ec2 <encodeVcselPeriod>
 8001618:	4603      	mov	r3, r0
 800161a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

  SequenceStepEnables enables;
  SequenceStepTimeouts timeouts;

  getSequenceStepEnables(lidar,&enables);
 800161e:	f107 0320 	add.w	r3, r7, #32
 8001622:	4619      	mov	r1, r3
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f000 fab3 	bl	8001b90 <getSequenceStepEnables>
  getSequenceStepTimeouts(lidar,&enables, &timeouts);
 800162a:	f107 0208 	add.w	r2, r7, #8
 800162e:	f107 0320 	add.w	r3, r7, #32
 8001632:	4619      	mov	r1, r3
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	f000 faf6 	bl	8001c26 <getSequenceStepTimeouts>
  //
  // For the MSRC timeout, the same applies - this timeout being
  // dependant on the pre-range vcsel period."


  if (type == VcselPeriodPreRange)
 800163a:	78fb      	ldrb	r3, [r7, #3]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d165      	bne.n	800170c <setVcselPulsePeriod+0x10c>
  {
    // "Set phase check limits"
    switch (period_pclks)
 8001640:	78bb      	ldrb	r3, [r7, #2]
 8001642:	3b0c      	subs	r3, #12
 8001644:	2b06      	cmp	r3, #6
 8001646:	d829      	bhi.n	800169c <setVcselPulsePeriod+0x9c>
 8001648:	a201      	add	r2, pc, #4	; (adr r2, 8001650 <setVcselPulsePeriod+0x50>)
 800164a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800164e:	bf00      	nop
 8001650:	0800166d 	.word	0x0800166d
 8001654:	0800169d 	.word	0x0800169d
 8001658:	08001679 	.word	0x08001679
 800165c:	0800169d 	.word	0x0800169d
 8001660:	08001685 	.word	0x08001685
 8001664:	0800169d 	.word	0x0800169d
 8001668:	08001691 	.word	0x08001691
    {
      case 12:
        writeReg(lidar,PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x18);
 800166c:	2218      	movs	r2, #24
 800166e:	2157      	movs	r1, #87	; 0x57
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	f7ff fdd1 	bl	8001218 <writeReg>
        break;
 8001676:	e013      	b.n	80016a0 <setVcselPulsePeriod+0xa0>

      case 14:
        writeReg(lidar,PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x30);
 8001678:	2230      	movs	r2, #48	; 0x30
 800167a:	2157      	movs	r1, #87	; 0x57
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	f7ff fdcb 	bl	8001218 <writeReg>
        break;
 8001682:	e00d      	b.n	80016a0 <setVcselPulsePeriod+0xa0>

      case 16:
        writeReg(lidar,PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x40);
 8001684:	2240      	movs	r2, #64	; 0x40
 8001686:	2157      	movs	r1, #87	; 0x57
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f7ff fdc5 	bl	8001218 <writeReg>
        break;
 800168e:	e007      	b.n	80016a0 <setVcselPulsePeriod+0xa0>

      case 18:
        writeReg(lidar,PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x50);
 8001690:	2250      	movs	r2, #80	; 0x50
 8001692:	2157      	movs	r1, #87	; 0x57
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f7ff fdbf 	bl	8001218 <writeReg>
        break;
 800169a:	e001      	b.n	80016a0 <setVcselPulsePeriod+0xa0>

      default:
        // invalid period
        return false;
 800169c:	2300      	movs	r3, #0
 800169e:	e123      	b.n	80018e8 <setVcselPulsePeriod+0x2e8>
    }
    writeReg(lidar,PRE_RANGE_CONFIG_VALID_PHASE_LOW, 0x08);
 80016a0:	2208      	movs	r2, #8
 80016a2:	2156      	movs	r1, #86	; 0x56
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f7ff fdb7 	bl	8001218 <writeReg>

    // apply new VCSEL period
    writeReg(lidar,PRE_RANGE_CONFIG_VCSEL_PERIOD, vcsel_period_reg);
 80016aa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80016ae:	461a      	mov	r2, r3
 80016b0:	2150      	movs	r1, #80	; 0x50
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f7ff fdb0 	bl	8001218 <writeReg>

    // set_sequence_step_timeout() begin
    // (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE)

    uint16_t new_pre_range_timeout_mclks =
      timeoutMicrosecondsToMclks(timeouts.pre_range_us, period_pclks);
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	78ba      	ldrb	r2, [r7, #2]
 80016bc:	4611      	mov	r1, r2
 80016be:	4618      	mov	r0, r3
 80016c0:	f000 fb7c 	bl	8001dbc <timeoutMicrosecondsToMclks>
 80016c4:	4603      	mov	r3, r0
    uint16_t new_pre_range_timeout_mclks =
 80016c6:	857b      	strh	r3, [r7, #42]	; 0x2a

    writeReg16Bit(lidar,PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 80016c8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80016ca:	4618      	mov	r0, r3
 80016cc:	f000 fb2b 	bl	8001d26 <encodeTimeout>
 80016d0:	4603      	mov	r3, r0
 80016d2:	461a      	mov	r2, r3
 80016d4:	2151      	movs	r1, #81	; 0x51
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f7ff fdb6 	bl	8001248 <writeReg16Bit>

    // set_sequence_step_timeout() begin
    // (SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)

    uint16_t new_msrc_timeout_mclks =
      timeoutMicrosecondsToMclks(timeouts.msrc_dss_tcc_us, period_pclks);
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	78ba      	ldrb	r2, [r7, #2]
 80016e0:	4611      	mov	r1, r2
 80016e2:	4618      	mov	r0, r3
 80016e4:	f000 fb6a 	bl	8001dbc <timeoutMicrosecondsToMclks>
 80016e8:	4603      	mov	r3, r0
    uint16_t new_msrc_timeout_mclks =
 80016ea:	853b      	strh	r3, [r7, #40]	; 0x28

    writeReg(lidar,MSRC_CONFIG_TIMEOUT_MACROP,
 80016ec:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80016ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016f2:	d804      	bhi.n	80016fe <setVcselPulsePeriod+0xfe>
      (new_msrc_timeout_mclks > 256) ? 255 : (new_msrc_timeout_mclks - 1));
 80016f4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80016f6:	b2db      	uxtb	r3, r3
    writeReg(lidar,MSRC_CONFIG_TIMEOUT_MACROP,
 80016f8:	3b01      	subs	r3, #1
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	e000      	b.n	8001700 <setVcselPulsePeriod+0x100>
 80016fe:	23ff      	movs	r3, #255	; 0xff
 8001700:	461a      	mov	r2, r3
 8001702:	2146      	movs	r1, #70	; 0x46
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f7ff fd87 	bl	8001218 <writeReg>
 800170a:	e0cf      	b.n	80018ac <setVcselPulsePeriod+0x2ac>

    // set_sequence_step_timeout() end
  }
  else if (type == VcselPeriodFinalRange)
 800170c:	78fb      	ldrb	r3, [r7, #3]
 800170e:	2b01      	cmp	r3, #1
 8001710:	f040 80ca 	bne.w	80018a8 <setVcselPulsePeriod+0x2a8>
  {
    switch (period_pclks)
 8001714:	78bb      	ldrb	r3, [r7, #2]
 8001716:	3b08      	subs	r3, #8
 8001718:	2b06      	cmp	r3, #6
 800171a:	f200 80a1 	bhi.w	8001860 <setVcselPulsePeriod+0x260>
 800171e:	a201      	add	r2, pc, #4	; (adr r2, 8001724 <setVcselPulsePeriod+0x124>)
 8001720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001724:	08001741 	.word	0x08001741
 8001728:	08001861 	.word	0x08001861
 800172c:	08001789 	.word	0x08001789
 8001730:	08001861 	.word	0x08001861
 8001734:	080017d1 	.word	0x080017d1
 8001738:	08001861 	.word	0x08001861
 800173c:	08001819 	.word	0x08001819
    {
      case 8:
        writeReg(lidar,FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x10);
 8001740:	2210      	movs	r2, #16
 8001742:	2148      	movs	r1, #72	; 0x48
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f7ff fd67 	bl	8001218 <writeReg>
        writeReg(lidar,FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 800174a:	2208      	movs	r2, #8
 800174c:	2147      	movs	r1, #71	; 0x47
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f7ff fd62 	bl	8001218 <writeReg>
        writeReg(lidar,GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
 8001754:	2202      	movs	r2, #2
 8001756:	2132      	movs	r1, #50	; 0x32
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	f7ff fd5d 	bl	8001218 <writeReg>
        writeReg(lidar,ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);
 800175e:	220c      	movs	r2, #12
 8001760:	2130      	movs	r1, #48	; 0x30
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f7ff fd58 	bl	8001218 <writeReg>
        writeReg(lidar,0xFF, 0x01);
 8001768:	2201      	movs	r2, #1
 800176a:	21ff      	movs	r1, #255	; 0xff
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f7ff fd53 	bl	8001218 <writeReg>
        writeReg(lidar,ALGO_PHASECAL_LIM, 0x30);
 8001772:	2230      	movs	r2, #48	; 0x30
 8001774:	2130      	movs	r1, #48	; 0x30
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f7ff fd4e 	bl	8001218 <writeReg>
        writeReg(lidar,0xFF, 0x00);
 800177c:	2200      	movs	r2, #0
 800177e:	21ff      	movs	r1, #255	; 0xff
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f7ff fd49 	bl	8001218 <writeReg>
        break;
 8001786:	e06d      	b.n	8001864 <setVcselPulsePeriod+0x264>

      case 10:
        writeReg(lidar,FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x28);
 8001788:	2228      	movs	r2, #40	; 0x28
 800178a:	2148      	movs	r1, #72	; 0x48
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	f7ff fd43 	bl	8001218 <writeReg>
        writeReg(lidar,FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 8001792:	2208      	movs	r2, #8
 8001794:	2147      	movs	r1, #71	; 0x47
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f7ff fd3e 	bl	8001218 <writeReg>
        writeReg(lidar,GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
 800179c:	2203      	movs	r2, #3
 800179e:	2132      	movs	r1, #50	; 0x32
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	f7ff fd39 	bl	8001218 <writeReg>
        writeReg(lidar,ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);
 80017a6:	2209      	movs	r2, #9
 80017a8:	2130      	movs	r1, #48	; 0x30
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	f7ff fd34 	bl	8001218 <writeReg>
        writeReg(lidar,0xFF, 0x01);
 80017b0:	2201      	movs	r2, #1
 80017b2:	21ff      	movs	r1, #255	; 0xff
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f7ff fd2f 	bl	8001218 <writeReg>
        writeReg(lidar,ALGO_PHASECAL_LIM, 0x20);
 80017ba:	2220      	movs	r2, #32
 80017bc:	2130      	movs	r1, #48	; 0x30
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f7ff fd2a 	bl	8001218 <writeReg>
        writeReg(lidar,0xFF, 0x00);
 80017c4:	2200      	movs	r2, #0
 80017c6:	21ff      	movs	r1, #255	; 0xff
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f7ff fd25 	bl	8001218 <writeReg>
        break;
 80017ce:	e049      	b.n	8001864 <setVcselPulsePeriod+0x264>

      case 12:
        writeReg(lidar,FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x38);
 80017d0:	2238      	movs	r2, #56	; 0x38
 80017d2:	2148      	movs	r1, #72	; 0x48
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f7ff fd1f 	bl	8001218 <writeReg>
        writeReg(lidar,FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 80017da:	2208      	movs	r2, #8
 80017dc:	2147      	movs	r1, #71	; 0x47
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f7ff fd1a 	bl	8001218 <writeReg>
        writeReg(lidar,GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
 80017e4:	2203      	movs	r2, #3
 80017e6:	2132      	movs	r1, #50	; 0x32
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f7ff fd15 	bl	8001218 <writeReg>
        writeReg(lidar,ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);
 80017ee:	2208      	movs	r2, #8
 80017f0:	2130      	movs	r1, #48	; 0x30
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f7ff fd10 	bl	8001218 <writeReg>
        writeReg(lidar,0xFF, 0x01);
 80017f8:	2201      	movs	r2, #1
 80017fa:	21ff      	movs	r1, #255	; 0xff
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f7ff fd0b 	bl	8001218 <writeReg>
        writeReg(lidar,ALGO_PHASECAL_LIM, 0x20);
 8001802:	2220      	movs	r2, #32
 8001804:	2130      	movs	r1, #48	; 0x30
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f7ff fd06 	bl	8001218 <writeReg>
        writeReg(lidar,0xFF, 0x00);
 800180c:	2200      	movs	r2, #0
 800180e:	21ff      	movs	r1, #255	; 0xff
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f7ff fd01 	bl	8001218 <writeReg>
        break;
 8001816:	e025      	b.n	8001864 <setVcselPulsePeriod+0x264>

      case 14:
        writeReg(lidar,FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x48);
 8001818:	2248      	movs	r2, #72	; 0x48
 800181a:	2148      	movs	r1, #72	; 0x48
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f7ff fcfb 	bl	8001218 <writeReg>
        writeReg(lidar,FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 8001822:	2208      	movs	r2, #8
 8001824:	2147      	movs	r1, #71	; 0x47
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f7ff fcf6 	bl	8001218 <writeReg>
        writeReg(lidar,GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
 800182c:	2203      	movs	r2, #3
 800182e:	2132      	movs	r1, #50	; 0x32
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f7ff fcf1 	bl	8001218 <writeReg>
        writeReg(lidar,ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);
 8001836:	2207      	movs	r2, #7
 8001838:	2130      	movs	r1, #48	; 0x30
 800183a:	6878      	ldr	r0, [r7, #4]
 800183c:	f7ff fcec 	bl	8001218 <writeReg>
        writeReg(lidar,0xFF, 0x01);
 8001840:	2201      	movs	r2, #1
 8001842:	21ff      	movs	r1, #255	; 0xff
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f7ff fce7 	bl	8001218 <writeReg>
        writeReg(lidar,ALGO_PHASECAL_LIM, 0x20);
 800184a:	2220      	movs	r2, #32
 800184c:	2130      	movs	r1, #48	; 0x30
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f7ff fce2 	bl	8001218 <writeReg>
        writeReg(lidar,0xFF, 0x00);
 8001854:	2200      	movs	r2, #0
 8001856:	21ff      	movs	r1, #255	; 0xff
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f7ff fcdd 	bl	8001218 <writeReg>
        break;
 800185e:	e001      	b.n	8001864 <setVcselPulsePeriod+0x264>

      default:
        // invalid period
        return false;
 8001860:	2300      	movs	r3, #0
 8001862:	e041      	b.n	80018e8 <setVcselPulsePeriod+0x2e8>
    }

    // apply new VCSEL period
    writeReg(lidar,FINAL_RANGE_CONFIG_VCSEL_PERIOD, vcsel_period_reg);
 8001864:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001868:	461a      	mov	r2, r3
 800186a:	2170      	movs	r1, #112	; 0x70
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f7ff fcd3 	bl	8001218 <writeReg>
    //  must be added. To do this both final and pre-range
    //  timeouts must be expressed in macro periods MClks
    //  because they have different vcsel periods."

    uint16_t new_final_range_timeout_mclks =
      timeoutMicrosecondsToMclks(timeouts.final_range_us, period_pclks);
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	78ba      	ldrb	r2, [r7, #2]
 8001876:	4611      	mov	r1, r2
 8001878:	4618      	mov	r0, r3
 800187a:	f000 fa9f 	bl	8001dbc <timeoutMicrosecondsToMclks>
 800187e:	4603      	mov	r3, r0
    uint16_t new_final_range_timeout_mclks =
 8001880:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (enables.pre_range)
 8001882:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001886:	2b00      	cmp	r3, #0
 8001888:	d003      	beq.n	8001892 <setVcselPulsePeriod+0x292>
    {
      new_final_range_timeout_mclks += timeouts.pre_range_mclks;
 800188a:	89fa      	ldrh	r2, [r7, #14]
 800188c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800188e:	4413      	add	r3, r2
 8001890:	85fb      	strh	r3, [r7, #46]	; 0x2e
    }

    writeReg16Bit(lidar,FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 8001892:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001894:	4618      	mov	r0, r3
 8001896:	f000 fa46 	bl	8001d26 <encodeTimeout>
 800189a:	4603      	mov	r3, r0
 800189c:	461a      	mov	r2, r3
 800189e:	2171      	movs	r1, #113	; 0x71
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	f7ff fcd1 	bl	8001248 <writeReg16Bit>
 80018a6:	e001      	b.n	80018ac <setVcselPulsePeriod+0x2ac>
    // set_sequence_step_timeout end
  }
  else
  {
    // invalid type
    return false;
 80018a8:	2300      	movs	r3, #0
 80018aa:	e01d      	b.n	80018e8 <setVcselPulsePeriod+0x2e8>
  }

  // "Finally, the timing budget must be re-applied"

  setMeasurementTimingBudget(lidar,lidar->measurement_timing_budget_us);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	695b      	ldr	r3, [r3, #20]
 80018b0:	4619      	mov	r1, r3
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f7ff fda4 	bl	8001400 <setMeasurementTimingBudget>

  // "Perform the phase calibration. This is needed after changing on vcsel period."
  // VL53L0X_perform_phase_calibration() begin

  uint8_t sequence_config = readReg(lidar,SYSTEM_SEQUENCE_CONFIG);
 80018b8:	2101      	movs	r1, #1
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f7ff fcf4 	bl	80012a8 <readReg>
 80018c0:	4603      	mov	r3, r0
 80018c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  writeReg(lidar,SYSTEM_SEQUENCE_CONFIG, 0x02);
 80018c6:	2202      	movs	r2, #2
 80018c8:	2101      	movs	r1, #1
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f7ff fca4 	bl	8001218 <writeReg>
  performSingleRefCalibration(lidar,0x0);
 80018d0:	2100      	movs	r1, #0
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f000 fa8c 	bl	8001df0 <performSingleRefCalibration>
  writeReg(lidar,SYSTEM_SEQUENCE_CONFIG, sequence_config);
 80018d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80018dc:	461a      	mov	r2, r3
 80018de:	2101      	movs	r1, #1
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f7ff fc99 	bl	8001218 <writeReg>

  // VL53L0X_perform_phase_calibration() end

  return true;
 80018e6:	2301      	movs	r3, #1
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3730      	adds	r7, #48	; 0x30
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <getVcselPulsePeriod>:

// Get the VCSEL pulse period in PCLKs for the given period type.
// based on VL53L0X_get_vcsel_pulse_period()
uint8_t getVcselPulsePeriod(VL53L0X * lidar,vcselPeriodType type)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	460b      	mov	r3, r1
 80018fa:	70fb      	strb	r3, [r7, #3]
  if (type == VcselPeriodPreRange)
 80018fc:	78fb      	ldrb	r3, [r7, #3]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d109      	bne.n	8001916 <getVcselPulsePeriod+0x26>
  {
    return decodeVcselPeriod(readReg(lidar,PRE_RANGE_CONFIG_VCSEL_PERIOD));
 8001902:	2150      	movs	r1, #80	; 0x50
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f7ff fccf 	bl	80012a8 <readReg>
 800190a:	4603      	mov	r3, r0
 800190c:	4618      	mov	r0, r3
 800190e:	f000 fac8 	bl	8001ea2 <decodeVcselPeriod>
 8001912:	4603      	mov	r3, r0
 8001914:	e00d      	b.n	8001932 <getVcselPulsePeriod+0x42>
  }
  else if (type == VcselPeriodFinalRange)
 8001916:	78fb      	ldrb	r3, [r7, #3]
 8001918:	2b01      	cmp	r3, #1
 800191a:	d109      	bne.n	8001930 <getVcselPulsePeriod+0x40>
  {
    return decodeVcselPeriod(readReg(lidar,FINAL_RANGE_CONFIG_VCSEL_PERIOD));
 800191c:	2170      	movs	r1, #112	; 0x70
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f7ff fcc2 	bl	80012a8 <readReg>
 8001924:	4603      	mov	r3, r0
 8001926:	4618      	mov	r0, r3
 8001928:	f000 fabb 	bl	8001ea2 <decodeVcselPeriod>
 800192c:	4603      	mov	r3, r0
 800192e:	e000      	b.n	8001932 <getVcselPulsePeriod+0x42>
  }
  else { return 255; }
 8001930:	23ff      	movs	r3, #255	; 0xff
}
 8001932:	4618      	mov	r0, r3
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}

0800193a <startContinuous>:
// often as possible); otherwise, continuous timed mode is used, with the given
// inter-measurement period in milliseconds determining how often the sensor
// takes a measurement.
// based on VL53L0X_StartMeasurement()
void startContinuous(VL53L0X * lidar,uint32_t period_ms)
{
 800193a:	b580      	push	{r7, lr}
 800193c:	b084      	sub	sp, #16
 800193e:	af00      	add	r7, sp, #0
 8001940:	6078      	str	r0, [r7, #4]
 8001942:	6039      	str	r1, [r7, #0]
  writeReg(lidar,0x80, 0x01);
 8001944:	2201      	movs	r2, #1
 8001946:	2180      	movs	r1, #128	; 0x80
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f7ff fc65 	bl	8001218 <writeReg>
  writeReg(lidar,0xFF, 0x01);
 800194e:	2201      	movs	r2, #1
 8001950:	21ff      	movs	r1, #255	; 0xff
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f7ff fc60 	bl	8001218 <writeReg>
  writeReg(lidar,0x00, 0x00);
 8001958:	2200      	movs	r2, #0
 800195a:	2100      	movs	r1, #0
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f7ff fc5b 	bl	8001218 <writeReg>
  writeReg(lidar,0x91, lidar->stop_variable);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	7c1b      	ldrb	r3, [r3, #16]
 8001966:	461a      	mov	r2, r3
 8001968:	2191      	movs	r1, #145	; 0x91
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f7ff fc54 	bl	8001218 <writeReg>
  writeReg(lidar,0x00, 0x01);
 8001970:	2201      	movs	r2, #1
 8001972:	2100      	movs	r1, #0
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	f7ff fc4f 	bl	8001218 <writeReg>
  writeReg(lidar,0xFF, 0x00);
 800197a:	2200      	movs	r2, #0
 800197c:	21ff      	movs	r1, #255	; 0xff
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f7ff fc4a 	bl	8001218 <writeReg>
  writeReg(lidar,0x80, 0x00);
 8001984:	2200      	movs	r2, #0
 8001986:	2180      	movs	r1, #128	; 0x80
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f7ff fc45 	bl	8001218 <writeReg>

  if (period_ms != 0)
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d018      	beq.n	80019c6 <startContinuous+0x8c>
  {
    // continuous timed mode

    // VL53L0X_SetInterMeasurementPeriodMilliSeconds() begin
    uint16_t osc_calibrate_val = readReg16Bit(lidar,OSC_CALIBRATE_VAL);
 8001994:	21f8      	movs	r1, #248	; 0xf8
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f7ff fca2 	bl	80012e0 <readReg16Bit>
 800199c:	4603      	mov	r3, r0
 800199e:	81fb      	strh	r3, [r7, #14]

    if (osc_calibrate_val != 0)
 80019a0:	89fb      	ldrh	r3, [r7, #14]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d004      	beq.n	80019b0 <startContinuous+0x76>
    {
      period_ms *= osc_calibrate_val;
 80019a6:	89fa      	ldrh	r2, [r7, #14]
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	fb02 f303 	mul.w	r3, r2, r3
 80019ae:	603b      	str	r3, [r7, #0]
    }

    writeReg32Bit(lidar,SYSTEM_INTERMEASUREMENT_PERIOD, period_ms);
 80019b0:	683a      	ldr	r2, [r7, #0]
 80019b2:	2104      	movs	r1, #4
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f7ff fc5f 	bl	8001278 <writeReg32Bit>

    // VL53L0X_SetInterMeasurementPeriodMilliSeconds() end

    writeReg(lidar,SYSRANGE_START, 0x04); // VL53L0X_REG_SYSRANGE_MODE_TIMED
 80019ba:	2204      	movs	r2, #4
 80019bc:	2100      	movs	r1, #0
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f7ff fc2a 	bl	8001218 <writeReg>
    // continuous back-to-back mode
	//snprintf(msg,sizeof(msg),"Starting continuous...\r\n");
	//HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 0xFFFF);
    writeReg(lidar,SYSRANGE_START, 0x02); // VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK
  }
}
 80019c4:	e004      	b.n	80019d0 <startContinuous+0x96>
    writeReg(lidar,SYSRANGE_START, 0x02); // VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK
 80019c6:	2202      	movs	r2, #2
 80019c8:	2100      	movs	r1, #0
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f7ff fc24 	bl	8001218 <writeReg>
}
 80019d0:	bf00      	nop
 80019d2:	3710      	adds	r7, #16
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}

080019d8 <readRangeContinuousMillimeters>:

// Returns a range reading in millimeters when continuous mode is active
// (readRangeSingleMillimeters() also calls this function after starting a
// single-shot range measurement)
uint16_t readRangeContinuousMillimeters(VL53L0X * lidar)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  startTimeout(lidar);
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f000 fa38 	bl	8001e56 <startTimeout>
  while ((readReg(lidar,RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 80019e6:	e00b      	b.n	8001a00 <readRangeContinuousMillimeters+0x28>
  {
    if (checkTimeoutExpired(lidar))
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f000 fa41 	bl	8001e70 <checkTimeoutExpired>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d005      	beq.n	8001a00 <readRangeContinuousMillimeters+0x28>
    {
      lidar->did_timeout = true;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2201      	movs	r2, #1
 80019f8:	721a      	strb	r2, [r3, #8]
      return 65535;
 80019fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019fe:	e014      	b.n	8001a2a <readRangeContinuousMillimeters+0x52>
  while ((readReg(lidar,RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 8001a00:	2113      	movs	r1, #19
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f7ff fc50 	bl	80012a8 <readReg>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	f003 0307 	and.w	r3, r3, #7
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d0ea      	beq.n	80019e8 <readRangeContinuousMillimeters+0x10>
    }
  }

  // assumptions: Linearity Corrective Gain is 1000 (default);
  // fractional ranging is not enabled
  uint16_t range = readReg16Bit(lidar,RESULT_RANGE_STATUS + 10);
 8001a12:	211e      	movs	r1, #30
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f7ff fc63 	bl	80012e0 <readReg16Bit>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	81fb      	strh	r3, [r7, #14]

  writeReg(lidar,SYSTEM_INTERRUPT_CLEAR, 0x01);
 8001a1e:	2201      	movs	r2, #1
 8001a20:	210b      	movs	r1, #11
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f7ff fbf8 	bl	8001218 <writeReg>

  return range;
 8001a28:	89fb      	ldrh	r3, [r7, #14]
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3710      	adds	r7, #16
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <setTimeout>:

  return readRangeContinuousMillimeters(lidar);
}

void setTimeout(VL53L0X * lidar,uint16_t timeout)
{
 8001a32:	b480      	push	{r7}
 8001a34:	b083      	sub	sp, #12
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	807b      	strh	r3, [r7, #2]
	lidar->io_timeout = timeout;
 8001a3e:	887a      	ldrh	r2, [r7, #2]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	605a      	str	r2, [r3, #4]
}
 8001a44:	bf00      	nop
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr

08001a50 <getSpadInfo>:

// Get reference SPAD (single photon avalanche diode) count and type
// based on VL53L0X_get_info_from_device(),
// but only gets reference SPAD count and type
bool getSpadInfo(VL53L0X * lidar,uint8_t * count, bool * type_is_aperture)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b086      	sub	sp, #24
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	60f8      	str	r0, [r7, #12]
 8001a58:	60b9      	str	r1, [r7, #8]
 8001a5a:	607a      	str	r2, [r7, #4]
  uint8_t tmp;

  writeReg(lidar,0x80, 0x01);
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	2180      	movs	r1, #128	; 0x80
 8001a60:	68f8      	ldr	r0, [r7, #12]
 8001a62:	f7ff fbd9 	bl	8001218 <writeReg>
  writeReg(lidar,0xFF, 0x01);
 8001a66:	2201      	movs	r2, #1
 8001a68:	21ff      	movs	r1, #255	; 0xff
 8001a6a:	68f8      	ldr	r0, [r7, #12]
 8001a6c:	f7ff fbd4 	bl	8001218 <writeReg>
  writeReg(lidar,0x00, 0x00);
 8001a70:	2200      	movs	r2, #0
 8001a72:	2100      	movs	r1, #0
 8001a74:	68f8      	ldr	r0, [r7, #12]
 8001a76:	f7ff fbcf 	bl	8001218 <writeReg>

  writeReg(lidar,0xFF, 0x06);
 8001a7a:	2206      	movs	r2, #6
 8001a7c:	21ff      	movs	r1, #255	; 0xff
 8001a7e:	68f8      	ldr	r0, [r7, #12]
 8001a80:	f7ff fbca 	bl	8001218 <writeReg>
  writeReg(lidar,0x83, readReg(lidar,0x83) | 0x04);
 8001a84:	2183      	movs	r1, #131	; 0x83
 8001a86:	68f8      	ldr	r0, [r7, #12]
 8001a88:	f7ff fc0e 	bl	80012a8 <readReg>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	f043 0304 	orr.w	r3, r3, #4
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	461a      	mov	r2, r3
 8001a96:	2183      	movs	r1, #131	; 0x83
 8001a98:	68f8      	ldr	r0, [r7, #12]
 8001a9a:	f7ff fbbd 	bl	8001218 <writeReg>
  writeReg(lidar,0xFF, 0x07);
 8001a9e:	2207      	movs	r2, #7
 8001aa0:	21ff      	movs	r1, #255	; 0xff
 8001aa2:	68f8      	ldr	r0, [r7, #12]
 8001aa4:	f7ff fbb8 	bl	8001218 <writeReg>
  writeReg(lidar,0x81, 0x01);
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	2181      	movs	r1, #129	; 0x81
 8001aac:	68f8      	ldr	r0, [r7, #12]
 8001aae:	f7ff fbb3 	bl	8001218 <writeReg>

  writeReg(lidar,0x80, 0x01);
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	2180      	movs	r1, #128	; 0x80
 8001ab6:	68f8      	ldr	r0, [r7, #12]
 8001ab8:	f7ff fbae 	bl	8001218 <writeReg>

  writeReg(lidar,0x94, 0x6b);
 8001abc:	226b      	movs	r2, #107	; 0x6b
 8001abe:	2194      	movs	r1, #148	; 0x94
 8001ac0:	68f8      	ldr	r0, [r7, #12]
 8001ac2:	f7ff fba9 	bl	8001218 <writeReg>
  writeReg(lidar,0x83, 0x00);
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	2183      	movs	r1, #131	; 0x83
 8001aca:	68f8      	ldr	r0, [r7, #12]
 8001acc:	f7ff fba4 	bl	8001218 <writeReg>
  startTimeout(lidar);
 8001ad0:	68f8      	ldr	r0, [r7, #12]
 8001ad2:	f000 f9c0 	bl	8001e56 <startTimeout>
  while (readReg(lidar,0x83) == 0x00)
 8001ad6:	e007      	b.n	8001ae8 <getSpadInfo+0x98>
  {
    if (checkTimeoutExpired(lidar)) { return false; }
 8001ad8:	68f8      	ldr	r0, [r7, #12]
 8001ada:	f000 f9c9 	bl	8001e70 <checkTimeoutExpired>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <getSpadInfo+0x98>
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	e04f      	b.n	8001b88 <getSpadInfo+0x138>
  while (readReg(lidar,0x83) == 0x00)
 8001ae8:	2183      	movs	r1, #131	; 0x83
 8001aea:	68f8      	ldr	r0, [r7, #12]
 8001aec:	f7ff fbdc 	bl	80012a8 <readReg>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d0f0      	beq.n	8001ad8 <getSpadInfo+0x88>
  }
  writeReg(lidar,0x83, 0x01);
 8001af6:	2201      	movs	r2, #1
 8001af8:	2183      	movs	r1, #131	; 0x83
 8001afa:	68f8      	ldr	r0, [r7, #12]
 8001afc:	f7ff fb8c 	bl	8001218 <writeReg>
  tmp = readReg(lidar,0x92);
 8001b00:	2192      	movs	r1, #146	; 0x92
 8001b02:	68f8      	ldr	r0, [r7, #12]
 8001b04:	f7ff fbd0 	bl	80012a8 <readReg>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	75fb      	strb	r3, [r7, #23]

  *count = tmp & 0x7f;
 8001b0c:	7dfb      	ldrb	r3, [r7, #23]
 8001b0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b12:	b2da      	uxtb	r2, r3
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	701a      	strb	r2, [r3, #0]
  *type_is_aperture = (tmp >> 7) & 0x01;
 8001b18:	7dfb      	ldrb	r3, [r7, #23]
 8001b1a:	09db      	lsrs	r3, r3, #7
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	bf14      	ite	ne
 8001b26:	2301      	movne	r3, #1
 8001b28:	2300      	moveq	r3, #0
 8001b2a:	b2da      	uxtb	r2, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	701a      	strb	r2, [r3, #0]

  writeReg(lidar,0x81, 0x00);
 8001b30:	2200      	movs	r2, #0
 8001b32:	2181      	movs	r1, #129	; 0x81
 8001b34:	68f8      	ldr	r0, [r7, #12]
 8001b36:	f7ff fb6f 	bl	8001218 <writeReg>
  writeReg(lidar,0xFF, 0x06);
 8001b3a:	2206      	movs	r2, #6
 8001b3c:	21ff      	movs	r1, #255	; 0xff
 8001b3e:	68f8      	ldr	r0, [r7, #12]
 8001b40:	f7ff fb6a 	bl	8001218 <writeReg>
  writeReg(lidar,0x83, readReg(lidar,0x83)  & ~0x04);
 8001b44:	2183      	movs	r1, #131	; 0x83
 8001b46:	68f8      	ldr	r0, [r7, #12]
 8001b48:	f7ff fbae 	bl	80012a8 <readReg>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	f023 0304 	bic.w	r3, r3, #4
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	461a      	mov	r2, r3
 8001b56:	2183      	movs	r1, #131	; 0x83
 8001b58:	68f8      	ldr	r0, [r7, #12]
 8001b5a:	f7ff fb5d 	bl	8001218 <writeReg>
  writeReg(lidar,0xFF, 0x01);
 8001b5e:	2201      	movs	r2, #1
 8001b60:	21ff      	movs	r1, #255	; 0xff
 8001b62:	68f8      	ldr	r0, [r7, #12]
 8001b64:	f7ff fb58 	bl	8001218 <writeReg>
  writeReg(lidar,0x00, 0x01);
 8001b68:	2201      	movs	r2, #1
 8001b6a:	2100      	movs	r1, #0
 8001b6c:	68f8      	ldr	r0, [r7, #12]
 8001b6e:	f7ff fb53 	bl	8001218 <writeReg>

  writeReg(lidar,0xFF, 0x00);
 8001b72:	2200      	movs	r2, #0
 8001b74:	21ff      	movs	r1, #255	; 0xff
 8001b76:	68f8      	ldr	r0, [r7, #12]
 8001b78:	f7ff fb4e 	bl	8001218 <writeReg>
  writeReg(lidar,0x80, 0x00);
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	2180      	movs	r1, #128	; 0x80
 8001b80:	68f8      	ldr	r0, [r7, #12]
 8001b82:	f7ff fb49 	bl	8001218 <writeReg>

  return true;
 8001b86:	2301      	movs	r3, #1
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3718      	adds	r7, #24
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <getSequenceStepEnables>:

// Get sequence step enables
// based on VL53L0X_GetSequenceStepEnables()
void getSequenceStepEnables(VL53L0X * lidar,SequenceStepEnables * enables)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]
  uint8_t sequence_config = readReg(lidar,SYSTEM_SEQUENCE_CONFIG);
 8001b9a:	2101      	movs	r1, #1
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f7ff fb83 	bl	80012a8 <readReg>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	73fb      	strb	r3, [r7, #15]

  enables->tcc          = (sequence_config >> 4) & 0x1;
 8001ba6:	7bfb      	ldrb	r3, [r7, #15]
 8001ba8:	091b      	lsrs	r3, r3, #4
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	f003 0301 	and.w	r3, r3, #1
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	bf14      	ite	ne
 8001bb4:	2301      	movne	r3, #1
 8001bb6:	2300      	moveq	r3, #0
 8001bb8:	b2da      	uxtb	r2, r3
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	701a      	strb	r2, [r3, #0]
  enables->dss          = (sequence_config >> 3) & 0x1;
 8001bbe:	7bfb      	ldrb	r3, [r7, #15]
 8001bc0:	08db      	lsrs	r3, r3, #3
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	f003 0301 	and.w	r3, r3, #1
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	bf14      	ite	ne
 8001bcc:	2301      	movne	r3, #1
 8001bce:	2300      	moveq	r3, #0
 8001bd0:	b2da      	uxtb	r2, r3
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	709a      	strb	r2, [r3, #2]
  enables->msrc         = (sequence_config >> 2) & 0x1;
 8001bd6:	7bfb      	ldrb	r3, [r7, #15]
 8001bd8:	089b      	lsrs	r3, r3, #2
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	f003 0301 	and.w	r3, r3, #1
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	bf14      	ite	ne
 8001be4:	2301      	movne	r3, #1
 8001be6:	2300      	moveq	r3, #0
 8001be8:	b2da      	uxtb	r2, r3
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	705a      	strb	r2, [r3, #1]
  enables->pre_range    = (sequence_config >> 6) & 0x1;
 8001bee:	7bfb      	ldrb	r3, [r7, #15]
 8001bf0:	099b      	lsrs	r3, r3, #6
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	f003 0301 	and.w	r3, r3, #1
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	bf14      	ite	ne
 8001bfc:	2301      	movne	r3, #1
 8001bfe:	2300      	moveq	r3, #0
 8001c00:	b2da      	uxtb	r2, r3
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	70da      	strb	r2, [r3, #3]
  enables->final_range  = (sequence_config >> 7) & 0x1;
 8001c06:	7bfb      	ldrb	r3, [r7, #15]
 8001c08:	09db      	lsrs	r3, r3, #7
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	f003 0301 	and.w	r3, r3, #1
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	bf14      	ite	ne
 8001c14:	2301      	movne	r3, #1
 8001c16:	2300      	moveq	r3, #0
 8001c18:	b2da      	uxtb	r2, r3
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	711a      	strb	r2, [r3, #4]
}
 8001c1e:	bf00      	nop
 8001c20:	3710      	adds	r7, #16
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <getSequenceStepTimeouts>:
// Get sequence step timeouts
// based on get_sequence_step_timeout(),
// but gets all timeouts instead of just the requested one, and also stores
// intermediate values
void getSequenceStepTimeouts(VL53L0X * lidar,SequenceStepEnables const * enables, SequenceStepTimeouts * timeouts)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b084      	sub	sp, #16
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	60f8      	str	r0, [r7, #12]
 8001c2e:	60b9      	str	r1, [r7, #8]
 8001c30:	607a      	str	r2, [r7, #4]
  timeouts->pre_range_vcsel_period_pclks = getVcselPulsePeriod(lidar,VcselPeriodPreRange);
 8001c32:	2100      	movs	r1, #0
 8001c34:	68f8      	ldr	r0, [r7, #12]
 8001c36:	f7ff fe5b 	bl	80018f0 <getVcselPulsePeriod>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	b29a      	uxth	r2, r3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	801a      	strh	r2, [r3, #0]

  timeouts->msrc_dss_tcc_mclks = readReg(lidar,MSRC_CONFIG_TIMEOUT_MACROP) + 1;
 8001c42:	2146      	movs	r1, #70	; 0x46
 8001c44:	68f8      	ldr	r0, [r7, #12]
 8001c46:	f7ff fb2f 	bl	80012a8 <readReg>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	b29b      	uxth	r3, r3
 8001c4e:	3301      	adds	r3, #1
 8001c50:	b29a      	uxth	r2, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	809a      	strh	r2, [r3, #4]
  timeouts->msrc_dss_tcc_us =
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	889a      	ldrh	r2, [r3, #4]
                               timeouts->pre_range_vcsel_period_pclks);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	881b      	ldrh	r3, [r3, #0]
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	4619      	mov	r1, r3
 8001c62:	4610      	mov	r0, r2
 8001c64:	f000 f88c 	bl	8001d80 <timeoutMclksToMicroseconds>
 8001c68:	4602      	mov	r2, r0
  timeouts->msrc_dss_tcc_us =
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	60da      	str	r2, [r3, #12]

  timeouts->pre_range_mclks =
    decodeTimeout(readReg16Bit(lidar,PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 8001c6e:	2151      	movs	r1, #81	; 0x51
 8001c70:	68f8      	ldr	r0, [r7, #12]
 8001c72:	f7ff fb35 	bl	80012e0 <readReg16Bit>
 8001c76:	4603      	mov	r3, r0
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f000 f840 	bl	8001cfe <decodeTimeout>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	461a      	mov	r2, r3
  timeouts->pre_range_mclks =
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	80da      	strh	r2, [r3, #6]
  timeouts->pre_range_us =
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	88da      	ldrh	r2, [r3, #6]
                               timeouts->pre_range_vcsel_period_pclks);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	881b      	ldrh	r3, [r3, #0]
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	4619      	mov	r1, r3
 8001c92:	4610      	mov	r0, r2
 8001c94:	f000 f874 	bl	8001d80 <timeoutMclksToMicroseconds>
 8001c98:	4602      	mov	r2, r0
  timeouts->pre_range_us =
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	611a      	str	r2, [r3, #16]

  timeouts->final_range_vcsel_period_pclks = getVcselPulsePeriod(lidar,VcselPeriodFinalRange);
 8001c9e:	2101      	movs	r1, #1
 8001ca0:	68f8      	ldr	r0, [r7, #12]
 8001ca2:	f7ff fe25 	bl	80018f0 <getVcselPulsePeriod>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	b29a      	uxth	r2, r3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	805a      	strh	r2, [r3, #2]

  timeouts->final_range_mclks =
    decodeTimeout(readReg16Bit(lidar,FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 8001cae:	2171      	movs	r1, #113	; 0x71
 8001cb0:	68f8      	ldr	r0, [r7, #12]
 8001cb2:	f7ff fb15 	bl	80012e0 <readReg16Bit>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f000 f820 	bl	8001cfe <decodeTimeout>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	461a      	mov	r2, r3
  timeouts->final_range_mclks =
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	811a      	strh	r2, [r3, #8]

  if (enables->pre_range)
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	78db      	ldrb	r3, [r3, #3]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d007      	beq.n	8001cde <getSequenceStepTimeouts+0xb8>
  {
    timeouts->final_range_mclks -= timeouts->pre_range_mclks;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	891a      	ldrh	r2, [r3, #8]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	88db      	ldrh	r3, [r3, #6]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	b29a      	uxth	r2, r3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	811a      	strh	r2, [r3, #8]
  }

  timeouts->final_range_us =
    timeoutMclksToMicroseconds(timeouts->final_range_mclks,
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	891a      	ldrh	r2, [r3, #8]
                               timeouts->final_range_vcsel_period_pclks);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	885b      	ldrh	r3, [r3, #2]
    timeoutMclksToMicroseconds(timeouts->final_range_mclks,
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	4619      	mov	r1, r3
 8001cea:	4610      	mov	r0, r2
 8001cec:	f000 f848 	bl	8001d80 <timeoutMclksToMicroseconds>
 8001cf0:	4602      	mov	r2, r0
  timeouts->final_range_us =
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	615a      	str	r2, [r3, #20]
}
 8001cf6:	bf00      	nop
 8001cf8:	3710      	adds	r7, #16
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <decodeTimeout>:
// Decode sequence step timeout in MCLKs from register value
// based on VL53L0X_decode_timeout()
// Note: the original function returned a uint32_t, but the return value is
// always stored in a uint16_t.
uint16_t decodeTimeout(uint16_t reg_val)
{
 8001cfe:	b480      	push	{r7}
 8001d00:	b083      	sub	sp, #12
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	4603      	mov	r3, r0
 8001d06:	80fb      	strh	r3, [r7, #6]
  // format: "(LSByte * 2^MSByte) + 1"
  return (uint16_t)((reg_val & 0x00FF) <<
 8001d08:	88fb      	ldrh	r3, [r7, #6]
 8001d0a:	b2db      	uxtb	r3, r3
         (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 8001d0c:	88fa      	ldrh	r2, [r7, #6]
 8001d0e:	0a12      	lsrs	r2, r2, #8
 8001d10:	b292      	uxth	r2, r2
  return (uint16_t)((reg_val & 0x00FF) <<
 8001d12:	4093      	lsls	r3, r2
 8001d14:	b29b      	uxth	r3, r3
         (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 8001d16:	3301      	adds	r3, #1
 8001d18:	b29b      	uxth	r3, r3
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	370c      	adds	r7, #12
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr

08001d26 <encodeTimeout>:
// Encode sequence step timeout register value from timeout in MCLKs
// based on VL53L0X_encode_timeout()
// Note: the original function took a uint16_t, but the argument passed to it
// is always a uint16_t.
uint16_t encodeTimeout(uint16_t timeout_mclks)
{
 8001d26:	b480      	push	{r7}
 8001d28:	b085      	sub	sp, #20
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	80fb      	strh	r3, [r7, #6]
  // format: "(LSByte * 2^MSByte) + 1"

  uint32_t ls_byte = 0;
 8001d30:	2300      	movs	r3, #0
 8001d32:	60fb      	str	r3, [r7, #12]
  uint16_t ms_byte = 0;
 8001d34:	2300      	movs	r3, #0
 8001d36:	817b      	strh	r3, [r7, #10]

  if (timeout_mclks > 0)
 8001d38:	88fb      	ldrh	r3, [r7, #6]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d018      	beq.n	8001d70 <encodeTimeout+0x4a>
  {
    ls_byte = timeout_mclks - 1;
 8001d3e:	88fb      	ldrh	r3, [r7, #6]
 8001d40:	3b01      	subs	r3, #1
 8001d42:	60fb      	str	r3, [r7, #12]

    while ((ls_byte & 0xFFFFFF00) > 0)
 8001d44:	e005      	b.n	8001d52 <encodeTimeout+0x2c>
    {
      ls_byte >>= 1;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	085b      	lsrs	r3, r3, #1
 8001d4a:	60fb      	str	r3, [r7, #12]
      ms_byte++;
 8001d4c:	897b      	ldrh	r3, [r7, #10]
 8001d4e:	3301      	adds	r3, #1
 8001d50:	817b      	strh	r3, [r7, #10]
    while ((ls_byte & 0xFFFFFF00) > 0)
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d1f4      	bne.n	8001d46 <encodeTimeout+0x20>
    }

    return (ms_byte << 8) | (ls_byte & 0xFF);
 8001d5c:	897b      	ldrh	r3, [r7, #10]
 8001d5e:	021b      	lsls	r3, r3, #8
 8001d60:	b29a      	uxth	r2, r3
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	b29b      	uxth	r3, r3
 8001d6e:	e000      	b.n	8001d72 <encodeTimeout+0x4c>
  }
  else { return 0; }
 8001d70:	2300      	movs	r3, #0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3714      	adds	r7, #20
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
	...

08001d80 <timeoutMclksToMicroseconds>:

// Convert sequence step timeout from MCLKs to microseconds with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_us()
uint32_t timeoutMclksToMicroseconds(uint16_t timeout_period_mclks, uint8_t vcsel_period_pclks)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	4603      	mov	r3, r0
 8001d88:	460a      	mov	r2, r1
 8001d8a:	80fb      	strh	r3, [r7, #6]
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	717b      	strb	r3, [r7, #5]
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 8001d90:	797b      	ldrb	r3, [r7, #5]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f000 f8a6 	bl	8001ee4 <calcMacroPeriod>
 8001d98:	60f8      	str	r0, [r7, #12]

  return ((timeout_period_mclks * macro_period_ns) + (macro_period_ns / 2)) / 1000;
 8001d9a:	88fb      	ldrh	r3, [r7, #6]
 8001d9c:	68fa      	ldr	r2, [r7, #12]
 8001d9e:	fb03 f202 	mul.w	r2, r3, r2
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	085b      	lsrs	r3, r3, #1
 8001da6:	4413      	add	r3, r2
 8001da8:	4a03      	ldr	r2, [pc, #12]	; (8001db8 <timeoutMclksToMicroseconds+0x38>)
 8001daa:	fba2 2303 	umull	r2, r3, r2, r3
 8001dae:	099b      	lsrs	r3, r3, #6
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3710      	adds	r7, #16
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	10624dd3 	.word	0x10624dd3

08001dbc <timeoutMicrosecondsToMclks>:

// Convert sequence step timeout from microseconds to MCLKs with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_mclks()
uint32_t timeoutMicrosecondsToMclks(uint32_t timeout_period_us, uint8_t vcsel_period_pclks)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	70fb      	strb	r3, [r7, #3]
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 8001dc8:	78fb      	ldrb	r3, [r7, #3]
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f000 f88a 	bl	8001ee4 <calcMacroPeriod>
 8001dd0:	60f8      	str	r0, [r7, #12]

  return (((timeout_period_us * 1000) + (macro_period_ns / 2)) / macro_period_ns);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001dd8:	fb03 f202 	mul.w	r2, r3, r2
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	085b      	lsrs	r3, r3, #1
 8001de0:	441a      	add	r2, r3
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3710      	adds	r7, #16
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <performSingleRefCalibration>:


// based on VL53L0X_perform_single_ref_calibration()
bool performSingleRefCalibration(VL53L0X * lidar,uint8_t vhv_init_byte)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	460b      	mov	r3, r1
 8001dfa:	70fb      	strb	r3, [r7, #3]
  writeReg(lidar,SYSRANGE_START, 0x01 | vhv_init_byte); // VL53L0X_REG_SYSRANGE_MODE_START_STOP
 8001dfc:	78fb      	ldrb	r3, [r7, #3]
 8001dfe:	f043 0301 	orr.w	r3, r3, #1
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	461a      	mov	r2, r3
 8001e06:	2100      	movs	r1, #0
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	f7ff fa05 	bl	8001218 <writeReg>

  startTimeout(lidar);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f000 f821 	bl	8001e56 <startTimeout>
  
  
  while ((readReg(lidar,RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 8001e14:	e007      	b.n	8001e26 <performSingleRefCalibration+0x36>
  {
    if (checkTimeoutExpired(lidar)) { return false; }
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f000 f82a 	bl	8001e70 <checkTimeoutExpired>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <performSingleRefCalibration+0x36>
 8001e22:	2300      	movs	r3, #0
 8001e24:	e013      	b.n	8001e4e <performSingleRefCalibration+0x5e>
  while ((readReg(lidar,RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 8001e26:	2113      	movs	r1, #19
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f7ff fa3d 	bl	80012a8 <readReg>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	f003 0307 	and.w	r3, r3, #7
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d0ee      	beq.n	8001e16 <performSingleRefCalibration+0x26>
  }

  writeReg(lidar,SYSTEM_INTERRUPT_CLEAR, 0x01);
 8001e38:	2201      	movs	r2, #1
 8001e3a:	210b      	movs	r1, #11
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f7ff f9eb 	bl	8001218 <writeReg>

  writeReg(lidar,SYSRANGE_START, 0x00);
 8001e42:	2200      	movs	r2, #0
 8001e44:	2100      	movs	r1, #0
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f7ff f9e6 	bl	8001218 <writeReg>

  return true;
 8001e4c:	2301      	movs	r3, #1
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3708      	adds	r7, #8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}

08001e56 <startTimeout>:


void startTimeout(VL53L0X * lidar)
{
 8001e56:	b580      	push	{r7, lr}
 8001e58:	b082      	sub	sp, #8
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
	lidar->timeout_start_ms = HAL_GetTick();
 8001e5e:	f000 fb9d 	bl	800259c <HAL_GetTick>
 8001e62:	4602      	mov	r2, r0
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	60da      	str	r2, [r3, #12]
}
 8001e68:	bf00      	nop
 8001e6a:	3708      	adds	r7, #8
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <checkTimeoutExpired>:

// Check if timeout is enabled (set to nonzero value) and has expired
bool checkTimeoutExpired(VL53L0X * lidar)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
	if (lidar->io_timeout > 0 && (HAL_GetTick() - lidar->timeout_start_ms) > lidar->io_timeout)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d00b      	beq.n	8001e98 <checkTimeoutExpired+0x28>
 8001e80:	f000 fb8c 	bl	800259c <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	1ad2      	subs	r2, r2, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d901      	bls.n	8001e98 <checkTimeoutExpired+0x28>
		{
			return true;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e000      	b.n	8001e9a <checkTimeoutExpired+0x2a>
		}
	else
	{
		return false;
 8001e98:	2300      	movs	r3, #0
	}
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <decodeVcselPeriod>:

// Decode VCSEL (vertical cavity surface emitting laser) pulse period in PCLKs
// from register value
// based on VL53L0X_decode_vcsel_period()
uint8_t decodeVcselPeriod(uint8_t reg_val)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	b083      	sub	sp, #12
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	71fb      	strb	r3, [r7, #7]
	return (((reg_val) + 1) << 1);
 8001eac:	79fb      	ldrb	r3, [r7, #7]
 8001eae:	3301      	adds	r3, #1
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	b2db      	uxtb	r3, r3
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	370c      	adds	r7, #12
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr

08001ec2 <encodeVcselPeriod>:

// Encode VCSEL pulse period register value from period in PCLKs
// based on VL53L0X_encode_vcsel_period()
uint8_t encodeVcselPeriod(uint8_t period_pclks)
{
 8001ec2:	b480      	push	{r7}
 8001ec4:	b083      	sub	sp, #12
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	4603      	mov	r3, r0
 8001eca:	71fb      	strb	r3, [r7, #7]
	return (((period_pclks) >> 1) - 1);
 8001ecc:	79fb      	ldrb	r3, [r7, #7]
 8001ece:	085b      	lsrs	r3, r3, #1
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	3b01      	subs	r3, #1
 8001ed4:	b2db      	uxtb	r3, r3
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	370c      	adds	r7, #12
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
	...

08001ee4 <calcMacroPeriod>:

// Calculate macro period in *nanoseconds* from VCSEL period in PCLKs
// based on VL53L0X_calc_macro_period_ps()
// PLL_period_ps = 1655; macro_period_vclks = 2304
uint32_t calcMacroPeriod(uint8_t vcsel_period_pclks)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	4603      	mov	r3, r0
 8001eec:	71fb      	strb	r3, [r7, #7]
	return ((((uint32_t)2304 * (vcsel_period_pclks) * 1655) + 500) / 1000);
 8001eee:	79fb      	ldrb	r3, [r7, #7]
 8001ef0:	4a07      	ldr	r2, [pc, #28]	; (8001f10 <calcMacroPeriod+0x2c>)
 8001ef2:	fb02 f303 	mul.w	r3, r2, r3
 8001ef6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001efa:	4a06      	ldr	r2, [pc, #24]	; (8001f14 <calcMacroPeriod+0x30>)
 8001efc:	fba2 2303 	umull	r2, r3, r2, r3
 8001f00:	099b      	lsrs	r3, r3, #6
 8001f02:	4618      	mov	r0, r3
 8001f04:	370c      	adds	r7, #12
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	003a2f00 	.word	0x003a2f00
 8001f14:	10624dd3 	.word	0x10624dd3

08001f18 <InitVL53>:
static void MX_GPIO_Init(void);
static void MX_I2C1_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */
void InitVL53(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
  setAddress(&sensor1,0x29);//Default
 8001f1c:	2129      	movs	r1, #41	; 0x29
 8001f1e:	4818      	ldr	r0, [pc, #96]	; (8001f80 <InitVL53+0x68>)
 8001f20:	f7fe fe85 	bl	8000c2e <setAddress>

//  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_RESET); //De-select VL53L0X
//  HAL_Delay(100);
//  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET); //Select VL53L0X
  HAL_Delay(200);//Wait sensor startup
 8001f24:	20c8      	movs	r0, #200	; 0xc8
 8001f26:	f000 fb45 	bl	80025b4 <HAL_Delay>
  if(!init(&sensor1,true)) //Returns 0 if fail, 1 if success.
 8001f2a:	2101      	movs	r1, #1
 8001f2c:	4814      	ldr	r0, [pc, #80]	; (8001f80 <InitVL53+0x68>)
 8001f2e:	f7fe fea1 	bl	8000c74 <init>
 8001f32:	4603      	mov	r3, r0
 8001f34:	f083 0301 	eor.w	r3, r3, #1
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d00f      	beq.n	8001f5e <InitVL53+0x46>
    {
	snprintf(msg,sizeof(msg),"Failed to initialize\r\n");
 8001f3e:	4a11      	ldr	r2, [pc, #68]	; (8001f84 <InitVL53+0x6c>)
 8001f40:	2120      	movs	r1, #32
 8001f42:	4811      	ldr	r0, [pc, #68]	; (8001f88 <InitVL53+0x70>)
 8001f44:	f002 fdfc 	bl	8004b40 <sniprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), 0xFFFF);
 8001f48:	480f      	ldr	r0, [pc, #60]	; (8001f88 <InitVL53+0x70>)
 8001f4a:	f7fe f969 	bl	8000220 <strlen>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	b29a      	uxth	r2, r3
 8001f52:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f56:	490c      	ldr	r1, [pc, #48]	; (8001f88 <InitVL53+0x70>)
 8001f58:	480c      	ldr	r0, [pc, #48]	; (8001f8c <InitVL53+0x74>)
 8001f5a:	f002 fa3a 	bl	80043d2 <HAL_UART_Transmit>
    }
  setVcselPulsePeriod (& sensor1, VcselPeriodPreRange, 16);
 8001f5e:	2210      	movs	r2, #16
 8001f60:	2100      	movs	r1, #0
 8001f62:	4807      	ldr	r0, [pc, #28]	; (8001f80 <InitVL53+0x68>)
 8001f64:	f7ff fb4c 	bl	8001600 <setVcselPulsePeriod>
  //setVcselPulsePeriod (& sensor1, VcselPeriodFinalRange, 10);
  setTimeout(&sensor1,500); //Max time before timeout.
 8001f68:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001f6c:	4804      	ldr	r0, [pc, #16]	; (8001f80 <InitVL53+0x68>)
 8001f6e:	f7ff fd60 	bl	8001a32 <setTimeout>
  setAddress(&sensor1,0x4); //New addr
 8001f72:	2104      	movs	r1, #4
 8001f74:	4802      	ldr	r0, [pc, #8]	; (8001f80 <InitVL53+0x68>)
 8001f76:	f7fe fe5a 	bl	8000c2e <setAddress>
}
 8001f7a:	bf00      	nop
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	20000150 	.word	0x20000150
 8001f84:	0800549c 	.word	0x0800549c
 8001f88:	2000012c 	.word	0x2000012c
 8001f8c:	200000e8 	.word	0x200000e8

08001f90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f94:	f000 fa9c 	bl	80024d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f98:	f000 f860 	bl	800205c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f9c:	f000 f914 	bl	80021c8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001fa0:	f000 f8ba 	bl	8002118 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001fa4:	f000 f8e6 	bl	8002174 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  InitVL53();
 8001fa8:	f7ff ffb6 	bl	8001f18 <InitVL53>
startContinuous(&sensor1,0); //Second parameter: x ms wait
 8001fac:	2100      	movs	r1, #0
 8001fae:	4823      	ldr	r0, [pc, #140]	; (800203c <main+0xac>)
 8001fb0:	f7ff fcc3 	bl	800193a <startContinuous>
sprintf(msg,"Identificador 0x%X \n",getWhoAmI(&sensor1)); //check sensor
 8001fb4:	4821      	ldr	r0, [pc, #132]	; (800203c <main+0xac>)
 8001fb6:	f7fe fe50 	bl	8000c5a <getWhoAmI>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	4920      	ldr	r1, [pc, #128]	; (8002040 <main+0xb0>)
 8001fc0:	4820      	ldr	r0, [pc, #128]	; (8002044 <main+0xb4>)
 8001fc2:	f002 fdf1 	bl	8004ba8 <siprintf>
HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), 100);
 8001fc6:	481f      	ldr	r0, [pc, #124]	; (8002044 <main+0xb4>)
 8001fc8:	f7fe f92a 	bl	8000220 <strlen>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	b29a      	uxth	r2, r3
 8001fd0:	2364      	movs	r3, #100	; 0x64
 8001fd2:	491c      	ldr	r1, [pc, #112]	; (8002044 <main+0xb4>)
 8001fd4:	481c      	ldr	r0, [pc, #112]	; (8002048 <main+0xb8>)
 8001fd6:	f002 f9fc 	bl	80043d2 <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    dist=(int16_t)(readRangeContinuousMillimeters(&sensor1)*myscale)-myoffset;
 8001fda:	4818      	ldr	r0, [pc, #96]	; (800203c <main+0xac>)
 8001fdc:	f7ff fcfc 	bl	80019d8 <readRangeContinuousMillimeters>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	ee07 3a90 	vmov	s15, r3
 8001fe6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fea:	4b18      	ldr	r3, [pc, #96]	; (800204c <main+0xbc>)
 8001fec:	edd3 7a00 	vldr	s15, [r3]
 8001ff0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ff4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ff8:	ee17 3a90 	vmov	r3, s15
 8001ffc:	b21b      	sxth	r3, r3
 8001ffe:	b29a      	uxth	r2, r3
 8002000:	4b13      	ldr	r3, [pc, #76]	; (8002050 <main+0xc0>)
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	b29b      	uxth	r3, r3
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	b29a      	uxth	r2, r3
 800200a:	4b12      	ldr	r3, [pc, #72]	; (8002054 <main+0xc4>)
 800200c:	801a      	strh	r2, [r3, #0]
    sprintf(msg,"Read value: %u\n",dist);
 800200e:	4b11      	ldr	r3, [pc, #68]	; (8002054 <main+0xc4>)
 8002010:	881b      	ldrh	r3, [r3, #0]
 8002012:	461a      	mov	r2, r3
 8002014:	4910      	ldr	r1, [pc, #64]	; (8002058 <main+0xc8>)
 8002016:	480b      	ldr	r0, [pc, #44]	; (8002044 <main+0xb4>)
 8002018:	f002 fdc6 	bl	8004ba8 <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), 100);
 800201c:	4809      	ldr	r0, [pc, #36]	; (8002044 <main+0xb4>)
 800201e:	f7fe f8ff 	bl	8000220 <strlen>
 8002022:	4603      	mov	r3, r0
 8002024:	b29a      	uxth	r2, r3
 8002026:	2364      	movs	r3, #100	; 0x64
 8002028:	4906      	ldr	r1, [pc, #24]	; (8002044 <main+0xb4>)
 800202a:	4807      	ldr	r0, [pc, #28]	; (8002048 <main+0xb8>)
 800202c:	f002 f9d1 	bl	80043d2 <HAL_UART_Transmit>
    HAL_Delay(500);
 8002030:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002034:	f000 fabe 	bl	80025b4 <HAL_Delay>
    dist=(int16_t)(readRangeContinuousMillimeters(&sensor1)*myscale)-myoffset;
 8002038:	e7cf      	b.n	8001fda <main+0x4a>
 800203a:	bf00      	nop
 800203c:	20000150 	.word	0x20000150
 8002040:	080054b4 	.word	0x080054b4
 8002044:	2000012c 	.word	0x2000012c
 8002048:	200000e8 	.word	0x200000e8
 800204c:	20000004 	.word	0x20000004
 8002050:	20000000 	.word	0x20000000
 8002054:	2000014c 	.word	0x2000014c
 8002058:	080054cc 	.word	0x080054cc

0800205c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b094      	sub	sp, #80	; 0x50
 8002060:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002062:	f107 031c 	add.w	r3, r7, #28
 8002066:	2234      	movs	r2, #52	; 0x34
 8002068:	2100      	movs	r1, #0
 800206a:	4618      	mov	r0, r3
 800206c:	f002 fd60 	bl	8004b30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002070:	f107 0308 	add.w	r3, r7, #8
 8002074:	2200      	movs	r2, #0
 8002076:	601a      	str	r2, [r3, #0]
 8002078:	605a      	str	r2, [r3, #4]
 800207a:	609a      	str	r2, [r3, #8]
 800207c:	60da      	str	r2, [r3, #12]
 800207e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002080:	2300      	movs	r3, #0
 8002082:	607b      	str	r3, [r7, #4]
 8002084:	4b22      	ldr	r3, [pc, #136]	; (8002110 <SystemClock_Config+0xb4>)
 8002086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002088:	4a21      	ldr	r2, [pc, #132]	; (8002110 <SystemClock_Config+0xb4>)
 800208a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800208e:	6413      	str	r3, [r2, #64]	; 0x40
 8002090:	4b1f      	ldr	r3, [pc, #124]	; (8002110 <SystemClock_Config+0xb4>)
 8002092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002094:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002098:	607b      	str	r3, [r7, #4]
 800209a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800209c:	2300      	movs	r3, #0
 800209e:	603b      	str	r3, [r7, #0]
 80020a0:	4b1c      	ldr	r3, [pc, #112]	; (8002114 <SystemClock_Config+0xb8>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a1b      	ldr	r2, [pc, #108]	; (8002114 <SystemClock_Config+0xb8>)
 80020a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80020aa:	6013      	str	r3, [r2, #0]
 80020ac:	4b19      	ldr	r3, [pc, #100]	; (8002114 <SystemClock_Config+0xb8>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80020b4:	603b      	str	r3, [r7, #0]
 80020b6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80020b8:	2302      	movs	r3, #2
 80020ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80020bc:	2301      	movs	r3, #1
 80020be:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80020c0:	2310      	movs	r3, #16
 80020c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80020c4:	2300      	movs	r3, #0
 80020c6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020c8:	f107 031c 	add.w	r3, r7, #28
 80020cc:	4618      	mov	r0, r3
 80020ce:	f001 feaf 	bl	8003e30 <HAL_RCC_OscConfig>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d001      	beq.n	80020dc <SystemClock_Config+0x80>
  {
    Error_Handler();
 80020d8:	f000 f89e 	bl	8002218 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020dc:	230f      	movs	r3, #15
 80020de:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80020e0:	2300      	movs	r3, #0
 80020e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020e4:	2300      	movs	r3, #0
 80020e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80020e8:	2300      	movs	r3, #0
 80020ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80020ec:	2300      	movs	r3, #0
 80020ee:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80020f0:	f107 0308 	add.w	r3, r7, #8
 80020f4:	2100      	movs	r1, #0
 80020f6:	4618      	mov	r0, r3
 80020f8:	f001 fcba 	bl	8003a70 <HAL_RCC_ClockConfig>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8002102:	f000 f889 	bl	8002218 <Error_Handler>
  }
}
 8002106:	bf00      	nop
 8002108:	3750      	adds	r7, #80	; 0x50
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	40023800 	.word	0x40023800
 8002114:	40007000 	.word	0x40007000

08002118 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800211c:	4b12      	ldr	r3, [pc, #72]	; (8002168 <MX_I2C1_Init+0x50>)
 800211e:	4a13      	ldr	r2, [pc, #76]	; (800216c <MX_I2C1_Init+0x54>)
 8002120:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002122:	4b11      	ldr	r3, [pc, #68]	; (8002168 <MX_I2C1_Init+0x50>)
 8002124:	4a12      	ldr	r2, [pc, #72]	; (8002170 <MX_I2C1_Init+0x58>)
 8002126:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002128:	4b0f      	ldr	r3, [pc, #60]	; (8002168 <MX_I2C1_Init+0x50>)
 800212a:	2200      	movs	r2, #0
 800212c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800212e:	4b0e      	ldr	r3, [pc, #56]	; (8002168 <MX_I2C1_Init+0x50>)
 8002130:	2200      	movs	r2, #0
 8002132:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002134:	4b0c      	ldr	r3, [pc, #48]	; (8002168 <MX_I2C1_Init+0x50>)
 8002136:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800213a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800213c:	4b0a      	ldr	r3, [pc, #40]	; (8002168 <MX_I2C1_Init+0x50>)
 800213e:	2200      	movs	r2, #0
 8002140:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002142:	4b09      	ldr	r3, [pc, #36]	; (8002168 <MX_I2C1_Init+0x50>)
 8002144:	2200      	movs	r2, #0
 8002146:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002148:	4b07      	ldr	r3, [pc, #28]	; (8002168 <MX_I2C1_Init+0x50>)
 800214a:	2200      	movs	r2, #0
 800214c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800214e:	4b06      	ldr	r3, [pc, #24]	; (8002168 <MX_I2C1_Init+0x50>)
 8002150:	2200      	movs	r2, #0
 8002152:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002154:	4804      	ldr	r0, [pc, #16]	; (8002168 <MX_I2C1_Init+0x50>)
 8002156:	f000 fccb 	bl	8002af0 <HAL_I2C_Init>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d001      	beq.n	8002164 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002160:	f000 f85a 	bl	8002218 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002164:	bf00      	nop
 8002166:	bd80      	pop	{r7, pc}
 8002168:	20000094 	.word	0x20000094
 800216c:	40005400 	.word	0x40005400
 8002170:	000186a0 	.word	0x000186a0

08002174 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002178:	4b11      	ldr	r3, [pc, #68]	; (80021c0 <MX_USART1_UART_Init+0x4c>)
 800217a:	4a12      	ldr	r2, [pc, #72]	; (80021c4 <MX_USART1_UART_Init+0x50>)
 800217c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800217e:	4b10      	ldr	r3, [pc, #64]	; (80021c0 <MX_USART1_UART_Init+0x4c>)
 8002180:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002184:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002186:	4b0e      	ldr	r3, [pc, #56]	; (80021c0 <MX_USART1_UART_Init+0x4c>)
 8002188:	2200      	movs	r2, #0
 800218a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800218c:	4b0c      	ldr	r3, [pc, #48]	; (80021c0 <MX_USART1_UART_Init+0x4c>)
 800218e:	2200      	movs	r2, #0
 8002190:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002192:	4b0b      	ldr	r3, [pc, #44]	; (80021c0 <MX_USART1_UART_Init+0x4c>)
 8002194:	2200      	movs	r2, #0
 8002196:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002198:	4b09      	ldr	r3, [pc, #36]	; (80021c0 <MX_USART1_UART_Init+0x4c>)
 800219a:	220c      	movs	r2, #12
 800219c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800219e:	4b08      	ldr	r3, [pc, #32]	; (80021c0 <MX_USART1_UART_Init+0x4c>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80021a4:	4b06      	ldr	r3, [pc, #24]	; (80021c0 <MX_USART1_UART_Init+0x4c>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80021aa:	4805      	ldr	r0, [pc, #20]	; (80021c0 <MX_USART1_UART_Init+0x4c>)
 80021ac:	f002 f8c4 	bl	8004338 <HAL_UART_Init>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80021b6:	f000 f82f 	bl	8002218 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80021ba:	bf00      	nop
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	200000e8 	.word	0x200000e8
 80021c4:	40011000 	.word	0x40011000

080021c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80021ce:	2300      	movs	r3, #0
 80021d0:	607b      	str	r3, [r7, #4]
 80021d2:	4b10      	ldr	r3, [pc, #64]	; (8002214 <MX_GPIO_Init+0x4c>)
 80021d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d6:	4a0f      	ldr	r2, [pc, #60]	; (8002214 <MX_GPIO_Init+0x4c>)
 80021d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021dc:	6313      	str	r3, [r2, #48]	; 0x30
 80021de:	4b0d      	ldr	r3, [pc, #52]	; (8002214 <MX_GPIO_Init+0x4c>)
 80021e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021e6:	607b      	str	r3, [r7, #4]
 80021e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ea:	2300      	movs	r3, #0
 80021ec:	603b      	str	r3, [r7, #0]
 80021ee:	4b09      	ldr	r3, [pc, #36]	; (8002214 <MX_GPIO_Init+0x4c>)
 80021f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f2:	4a08      	ldr	r2, [pc, #32]	; (8002214 <MX_GPIO_Init+0x4c>)
 80021f4:	f043 0302 	orr.w	r3, r3, #2
 80021f8:	6313      	str	r3, [r2, #48]	; 0x30
 80021fa:	4b06      	ldr	r3, [pc, #24]	; (8002214 <MX_GPIO_Init+0x4c>)
 80021fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fe:	f003 0302 	and.w	r3, r3, #2
 8002202:	603b      	str	r3, [r7, #0]
 8002204:	683b      	ldr	r3, [r7, #0]

}
 8002206:	bf00      	nop
 8002208:	370c      	adds	r7, #12
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	40023800 	.word	0x40023800

08002218 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800221c:	bf00      	nop
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
	...

08002228 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800222e:	2300      	movs	r3, #0
 8002230:	607b      	str	r3, [r7, #4]
 8002232:	4b10      	ldr	r3, [pc, #64]	; (8002274 <HAL_MspInit+0x4c>)
 8002234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002236:	4a0f      	ldr	r2, [pc, #60]	; (8002274 <HAL_MspInit+0x4c>)
 8002238:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800223c:	6453      	str	r3, [r2, #68]	; 0x44
 800223e:	4b0d      	ldr	r3, [pc, #52]	; (8002274 <HAL_MspInit+0x4c>)
 8002240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002242:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002246:	607b      	str	r3, [r7, #4]
 8002248:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800224a:	2300      	movs	r3, #0
 800224c:	603b      	str	r3, [r7, #0]
 800224e:	4b09      	ldr	r3, [pc, #36]	; (8002274 <HAL_MspInit+0x4c>)
 8002250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002252:	4a08      	ldr	r2, [pc, #32]	; (8002274 <HAL_MspInit+0x4c>)
 8002254:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002258:	6413      	str	r3, [r2, #64]	; 0x40
 800225a:	4b06      	ldr	r3, [pc, #24]	; (8002274 <HAL_MspInit+0x4c>)
 800225c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002262:	603b      	str	r3, [r7, #0]
 8002264:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002266:	bf00      	nop
 8002268:	370c      	adds	r7, #12
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	40023800 	.word	0x40023800

08002278 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b08a      	sub	sp, #40	; 0x28
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002280:	f107 0314 	add.w	r3, r7, #20
 8002284:	2200      	movs	r2, #0
 8002286:	601a      	str	r2, [r3, #0]
 8002288:	605a      	str	r2, [r3, #4]
 800228a:	609a      	str	r2, [r3, #8]
 800228c:	60da      	str	r2, [r3, #12]
 800228e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a19      	ldr	r2, [pc, #100]	; (80022fc <HAL_I2C_MspInit+0x84>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d12c      	bne.n	80022f4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800229a:	2300      	movs	r3, #0
 800229c:	613b      	str	r3, [r7, #16]
 800229e:	4b18      	ldr	r3, [pc, #96]	; (8002300 <HAL_I2C_MspInit+0x88>)
 80022a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a2:	4a17      	ldr	r2, [pc, #92]	; (8002300 <HAL_I2C_MspInit+0x88>)
 80022a4:	f043 0302 	orr.w	r3, r3, #2
 80022a8:	6313      	str	r3, [r2, #48]	; 0x30
 80022aa:	4b15      	ldr	r3, [pc, #84]	; (8002300 <HAL_I2C_MspInit+0x88>)
 80022ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ae:	f003 0302 	and.w	r3, r3, #2
 80022b2:	613b      	str	r3, [r7, #16]
 80022b4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80022b6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80022ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022bc:	2312      	movs	r3, #18
 80022be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c0:	2300      	movs	r3, #0
 80022c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022c4:	2303      	movs	r3, #3
 80022c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80022c8:	2304      	movs	r3, #4
 80022ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022cc:	f107 0314 	add.w	r3, r7, #20
 80022d0:	4619      	mov	r1, r3
 80022d2:	480c      	ldr	r0, [pc, #48]	; (8002304 <HAL_I2C_MspInit+0x8c>)
 80022d4:	f000 fa78 	bl	80027c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80022d8:	2300      	movs	r3, #0
 80022da:	60fb      	str	r3, [r7, #12]
 80022dc:	4b08      	ldr	r3, [pc, #32]	; (8002300 <HAL_I2C_MspInit+0x88>)
 80022de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e0:	4a07      	ldr	r2, [pc, #28]	; (8002300 <HAL_I2C_MspInit+0x88>)
 80022e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80022e6:	6413      	str	r3, [r2, #64]	; 0x40
 80022e8:	4b05      	ldr	r3, [pc, #20]	; (8002300 <HAL_I2C_MspInit+0x88>)
 80022ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022f0:	60fb      	str	r3, [r7, #12]
 80022f2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80022f4:	bf00      	nop
 80022f6:	3728      	adds	r7, #40	; 0x28
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	40005400 	.word	0x40005400
 8002300:	40023800 	.word	0x40023800
 8002304:	40020400 	.word	0x40020400

08002308 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b08a      	sub	sp, #40	; 0x28
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002310:	f107 0314 	add.w	r3, r7, #20
 8002314:	2200      	movs	r2, #0
 8002316:	601a      	str	r2, [r3, #0]
 8002318:	605a      	str	r2, [r3, #4]
 800231a:	609a      	str	r2, [r3, #8]
 800231c:	60da      	str	r2, [r3, #12]
 800231e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a19      	ldr	r2, [pc, #100]	; (800238c <HAL_UART_MspInit+0x84>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d12b      	bne.n	8002382 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800232a:	2300      	movs	r3, #0
 800232c:	613b      	str	r3, [r7, #16]
 800232e:	4b18      	ldr	r3, [pc, #96]	; (8002390 <HAL_UART_MspInit+0x88>)
 8002330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002332:	4a17      	ldr	r2, [pc, #92]	; (8002390 <HAL_UART_MspInit+0x88>)
 8002334:	f043 0310 	orr.w	r3, r3, #16
 8002338:	6453      	str	r3, [r2, #68]	; 0x44
 800233a:	4b15      	ldr	r3, [pc, #84]	; (8002390 <HAL_UART_MspInit+0x88>)
 800233c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800233e:	f003 0310 	and.w	r3, r3, #16
 8002342:	613b      	str	r3, [r7, #16]
 8002344:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002346:	2300      	movs	r3, #0
 8002348:	60fb      	str	r3, [r7, #12]
 800234a:	4b11      	ldr	r3, [pc, #68]	; (8002390 <HAL_UART_MspInit+0x88>)
 800234c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234e:	4a10      	ldr	r2, [pc, #64]	; (8002390 <HAL_UART_MspInit+0x88>)
 8002350:	f043 0302 	orr.w	r3, r3, #2
 8002354:	6313      	str	r3, [r2, #48]	; 0x30
 8002356:	4b0e      	ldr	r3, [pc, #56]	; (8002390 <HAL_UART_MspInit+0x88>)
 8002358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	60fb      	str	r3, [r7, #12]
 8002360:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002362:	23c0      	movs	r3, #192	; 0xc0
 8002364:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002366:	2302      	movs	r3, #2
 8002368:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236a:	2300      	movs	r3, #0
 800236c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800236e:	2303      	movs	r3, #3
 8002370:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002372:	2307      	movs	r3, #7
 8002374:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002376:	f107 0314 	add.w	r3, r7, #20
 800237a:	4619      	mov	r1, r3
 800237c:	4805      	ldr	r0, [pc, #20]	; (8002394 <HAL_UART_MspInit+0x8c>)
 800237e:	f000 fa23 	bl	80027c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002382:	bf00      	nop
 8002384:	3728      	adds	r7, #40	; 0x28
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	40011000 	.word	0x40011000
 8002390:	40023800 	.word	0x40023800
 8002394:	40020400 	.word	0x40020400

08002398 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800239c:	e7fe      	b.n	800239c <NMI_Handler+0x4>

0800239e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800239e:	b480      	push	{r7}
 80023a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023a2:	e7fe      	b.n	80023a2 <HardFault_Handler+0x4>

080023a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023a8:	e7fe      	b.n	80023a8 <MemManage_Handler+0x4>

080023aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023aa:	b480      	push	{r7}
 80023ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023ae:	e7fe      	b.n	80023ae <BusFault_Handler+0x4>

080023b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023b4:	e7fe      	b.n	80023b4 <UsageFault_Handler+0x4>

080023b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023b6:	b480      	push	{r7}
 80023b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023ba:	bf00      	nop
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023c8:	bf00      	nop
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr

080023d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023d2:	b480      	push	{r7}
 80023d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023d6:	bf00      	nop
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr

080023e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023e4:	f000 f8c6 	bl	8002574 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023e8:	bf00      	nop
 80023ea:	bd80      	pop	{r7, pc}

080023ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b086      	sub	sp, #24
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023f4:	4a14      	ldr	r2, [pc, #80]	; (8002448 <_sbrk+0x5c>)
 80023f6:	4b15      	ldr	r3, [pc, #84]	; (800244c <_sbrk+0x60>)
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002400:	4b13      	ldr	r3, [pc, #76]	; (8002450 <_sbrk+0x64>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d102      	bne.n	800240e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002408:	4b11      	ldr	r3, [pc, #68]	; (8002450 <_sbrk+0x64>)
 800240a:	4a12      	ldr	r2, [pc, #72]	; (8002454 <_sbrk+0x68>)
 800240c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800240e:	4b10      	ldr	r3, [pc, #64]	; (8002450 <_sbrk+0x64>)
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4413      	add	r3, r2
 8002416:	693a      	ldr	r2, [r7, #16]
 8002418:	429a      	cmp	r2, r3
 800241a:	d207      	bcs.n	800242c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800241c:	f002 fb5e 	bl	8004adc <__errno>
 8002420:	4603      	mov	r3, r0
 8002422:	220c      	movs	r2, #12
 8002424:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002426:	f04f 33ff 	mov.w	r3, #4294967295
 800242a:	e009      	b.n	8002440 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800242c:	4b08      	ldr	r3, [pc, #32]	; (8002450 <_sbrk+0x64>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002432:	4b07      	ldr	r3, [pc, #28]	; (8002450 <_sbrk+0x64>)
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4413      	add	r3, r2
 800243a:	4a05      	ldr	r2, [pc, #20]	; (8002450 <_sbrk+0x64>)
 800243c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800243e:	68fb      	ldr	r3, [r7, #12]
}
 8002440:	4618      	mov	r0, r3
 8002442:	3718      	adds	r7, #24
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	20050000 	.word	0x20050000
 800244c:	00000400 	.word	0x00000400
 8002450:	2000016c 	.word	0x2000016c
 8002454:	20000188 	.word	0x20000188

08002458 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800245c:	4b06      	ldr	r3, [pc, #24]	; (8002478 <SystemInit+0x20>)
 800245e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002462:	4a05      	ldr	r2, [pc, #20]	; (8002478 <SystemInit+0x20>)
 8002464:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002468:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800246c:	bf00      	nop
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop
 8002478:	e000ed00 	.word	0xe000ed00

0800247c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 800247c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024b4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002480:	480d      	ldr	r0, [pc, #52]	; (80024b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002482:	490e      	ldr	r1, [pc, #56]	; (80024bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002484:	4a0e      	ldr	r2, [pc, #56]	; (80024c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002486:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002488:	e002      	b.n	8002490 <LoopCopyDataInit>

0800248a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800248a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800248c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800248e:	3304      	adds	r3, #4

08002490 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002490:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002492:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002494:	d3f9      	bcc.n	800248a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002496:	4a0b      	ldr	r2, [pc, #44]	; (80024c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002498:	4c0b      	ldr	r4, [pc, #44]	; (80024c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800249a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800249c:	e001      	b.n	80024a2 <LoopFillZerobss>

0800249e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800249e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024a0:	3204      	adds	r2, #4

080024a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024a4:	d3fb      	bcc.n	800249e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80024a6:	f7ff ffd7 	bl	8002458 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024aa:	f002 fb1d 	bl	8004ae8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024ae:	f7ff fd6f 	bl	8001f90 <main>
  bx  lr    
 80024b2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80024b4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80024b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024bc:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80024c0:	08005538 	.word	0x08005538
  ldr r2, =_sbss
 80024c4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80024c8:	20000184 	.word	0x20000184

080024cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024cc:	e7fe      	b.n	80024cc <ADC_IRQHandler>
	...

080024d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80024d4:	4b0e      	ldr	r3, [pc, #56]	; (8002510 <HAL_Init+0x40>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a0d      	ldr	r2, [pc, #52]	; (8002510 <HAL_Init+0x40>)
 80024da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80024e0:	4b0b      	ldr	r3, [pc, #44]	; (8002510 <HAL_Init+0x40>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a0a      	ldr	r2, [pc, #40]	; (8002510 <HAL_Init+0x40>)
 80024e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024ec:	4b08      	ldr	r3, [pc, #32]	; (8002510 <HAL_Init+0x40>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a07      	ldr	r2, [pc, #28]	; (8002510 <HAL_Init+0x40>)
 80024f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024f8:	2003      	movs	r0, #3
 80024fa:	f000 f931 	bl	8002760 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024fe:	200f      	movs	r0, #15
 8002500:	f000 f808 	bl	8002514 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002504:	f7ff fe90 	bl	8002228 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	40023c00 	.word	0x40023c00

08002514 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800251c:	4b12      	ldr	r3, [pc, #72]	; (8002568 <HAL_InitTick+0x54>)
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	4b12      	ldr	r3, [pc, #72]	; (800256c <HAL_InitTick+0x58>)
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	4619      	mov	r1, r3
 8002526:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800252a:	fbb3 f3f1 	udiv	r3, r3, r1
 800252e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002532:	4618      	mov	r0, r3
 8002534:	f000 f93b 	bl	80027ae <HAL_SYSTICK_Config>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e00e      	b.n	8002560 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2b0f      	cmp	r3, #15
 8002546:	d80a      	bhi.n	800255e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002548:	2200      	movs	r2, #0
 800254a:	6879      	ldr	r1, [r7, #4]
 800254c:	f04f 30ff 	mov.w	r0, #4294967295
 8002550:	f000 f911 	bl	8002776 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002554:	4a06      	ldr	r2, [pc, #24]	; (8002570 <HAL_InitTick+0x5c>)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800255a:	2300      	movs	r3, #0
 800255c:	e000      	b.n	8002560 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
}
 8002560:	4618      	mov	r0, r3
 8002562:	3708      	adds	r7, #8
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	20000008 	.word	0x20000008
 800256c:	20000010 	.word	0x20000010
 8002570:	2000000c 	.word	0x2000000c

08002574 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002578:	4b06      	ldr	r3, [pc, #24]	; (8002594 <HAL_IncTick+0x20>)
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	461a      	mov	r2, r3
 800257e:	4b06      	ldr	r3, [pc, #24]	; (8002598 <HAL_IncTick+0x24>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4413      	add	r3, r2
 8002584:	4a04      	ldr	r2, [pc, #16]	; (8002598 <HAL_IncTick+0x24>)
 8002586:	6013      	str	r3, [r2, #0]
}
 8002588:	bf00      	nop
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	20000010 	.word	0x20000010
 8002598:	20000170 	.word	0x20000170

0800259c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
  return uwTick;
 80025a0:	4b03      	ldr	r3, [pc, #12]	; (80025b0 <HAL_GetTick+0x14>)
 80025a2:	681b      	ldr	r3, [r3, #0]
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	20000170 	.word	0x20000170

080025b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025bc:	f7ff ffee 	bl	800259c <HAL_GetTick>
 80025c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025cc:	d005      	beq.n	80025da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025ce:	4b0a      	ldr	r3, [pc, #40]	; (80025f8 <HAL_Delay+0x44>)
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	461a      	mov	r2, r3
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	4413      	add	r3, r2
 80025d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80025da:	bf00      	nop
 80025dc:	f7ff ffde 	bl	800259c <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	68fa      	ldr	r2, [r7, #12]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d8f7      	bhi.n	80025dc <HAL_Delay+0x28>
  {
  }
}
 80025ec:	bf00      	nop
 80025ee:	bf00      	nop
 80025f0:	3710      	adds	r7, #16
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	20000010 	.word	0x20000010

080025fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b085      	sub	sp, #20
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f003 0307 	and.w	r3, r3, #7
 800260a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800260c:	4b0c      	ldr	r3, [pc, #48]	; (8002640 <__NVIC_SetPriorityGrouping+0x44>)
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002612:	68ba      	ldr	r2, [r7, #8]
 8002614:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002618:	4013      	ands	r3, r2
 800261a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002624:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002628:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800262c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800262e:	4a04      	ldr	r2, [pc, #16]	; (8002640 <__NVIC_SetPriorityGrouping+0x44>)
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	60d3      	str	r3, [r2, #12]
}
 8002634:	bf00      	nop
 8002636:	3714      	adds	r7, #20
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr
 8002640:	e000ed00 	.word	0xe000ed00

08002644 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002648:	4b04      	ldr	r3, [pc, #16]	; (800265c <__NVIC_GetPriorityGrouping+0x18>)
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	0a1b      	lsrs	r3, r3, #8
 800264e:	f003 0307 	and.w	r3, r3, #7
}
 8002652:	4618      	mov	r0, r3
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr
 800265c:	e000ed00 	.word	0xe000ed00

08002660 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	4603      	mov	r3, r0
 8002668:	6039      	str	r1, [r7, #0]
 800266a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800266c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002670:	2b00      	cmp	r3, #0
 8002672:	db0a      	blt.n	800268a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	b2da      	uxtb	r2, r3
 8002678:	490c      	ldr	r1, [pc, #48]	; (80026ac <__NVIC_SetPriority+0x4c>)
 800267a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800267e:	0112      	lsls	r2, r2, #4
 8002680:	b2d2      	uxtb	r2, r2
 8002682:	440b      	add	r3, r1
 8002684:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002688:	e00a      	b.n	80026a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	b2da      	uxtb	r2, r3
 800268e:	4908      	ldr	r1, [pc, #32]	; (80026b0 <__NVIC_SetPriority+0x50>)
 8002690:	79fb      	ldrb	r3, [r7, #7]
 8002692:	f003 030f 	and.w	r3, r3, #15
 8002696:	3b04      	subs	r3, #4
 8002698:	0112      	lsls	r2, r2, #4
 800269a:	b2d2      	uxtb	r2, r2
 800269c:	440b      	add	r3, r1
 800269e:	761a      	strb	r2, [r3, #24]
}
 80026a0:	bf00      	nop
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr
 80026ac:	e000e100 	.word	0xe000e100
 80026b0:	e000ed00 	.word	0xe000ed00

080026b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b089      	sub	sp, #36	; 0x24
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	60f8      	str	r0, [r7, #12]
 80026bc:	60b9      	str	r1, [r7, #8]
 80026be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f003 0307 	and.w	r3, r3, #7
 80026c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	f1c3 0307 	rsb	r3, r3, #7
 80026ce:	2b04      	cmp	r3, #4
 80026d0:	bf28      	it	cs
 80026d2:	2304      	movcs	r3, #4
 80026d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	3304      	adds	r3, #4
 80026da:	2b06      	cmp	r3, #6
 80026dc:	d902      	bls.n	80026e4 <NVIC_EncodePriority+0x30>
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	3b03      	subs	r3, #3
 80026e2:	e000      	b.n	80026e6 <NVIC_EncodePriority+0x32>
 80026e4:	2300      	movs	r3, #0
 80026e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026e8:	f04f 32ff 	mov.w	r2, #4294967295
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	fa02 f303 	lsl.w	r3, r2, r3
 80026f2:	43da      	mvns	r2, r3
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	401a      	ands	r2, r3
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	fa01 f303 	lsl.w	r3, r1, r3
 8002706:	43d9      	mvns	r1, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800270c:	4313      	orrs	r3, r2
         );
}
 800270e:	4618      	mov	r0, r3
 8002710:	3724      	adds	r7, #36	; 0x24
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
	...

0800271c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	3b01      	subs	r3, #1
 8002728:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800272c:	d301      	bcc.n	8002732 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800272e:	2301      	movs	r3, #1
 8002730:	e00f      	b.n	8002752 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002732:	4a0a      	ldr	r2, [pc, #40]	; (800275c <SysTick_Config+0x40>)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	3b01      	subs	r3, #1
 8002738:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800273a:	210f      	movs	r1, #15
 800273c:	f04f 30ff 	mov.w	r0, #4294967295
 8002740:	f7ff ff8e 	bl	8002660 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002744:	4b05      	ldr	r3, [pc, #20]	; (800275c <SysTick_Config+0x40>)
 8002746:	2200      	movs	r2, #0
 8002748:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800274a:	4b04      	ldr	r3, [pc, #16]	; (800275c <SysTick_Config+0x40>)
 800274c:	2207      	movs	r2, #7
 800274e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002750:	2300      	movs	r3, #0
}
 8002752:	4618      	mov	r0, r3
 8002754:	3708      	adds	r7, #8
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	e000e010 	.word	0xe000e010

08002760 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f7ff ff47 	bl	80025fc <__NVIC_SetPriorityGrouping>
}
 800276e:	bf00      	nop
 8002770:	3708      	adds	r7, #8
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}

08002776 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002776:	b580      	push	{r7, lr}
 8002778:	b086      	sub	sp, #24
 800277a:	af00      	add	r7, sp, #0
 800277c:	4603      	mov	r3, r0
 800277e:	60b9      	str	r1, [r7, #8]
 8002780:	607a      	str	r2, [r7, #4]
 8002782:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002784:	2300      	movs	r3, #0
 8002786:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002788:	f7ff ff5c 	bl	8002644 <__NVIC_GetPriorityGrouping>
 800278c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	68b9      	ldr	r1, [r7, #8]
 8002792:	6978      	ldr	r0, [r7, #20]
 8002794:	f7ff ff8e 	bl	80026b4 <NVIC_EncodePriority>
 8002798:	4602      	mov	r2, r0
 800279a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800279e:	4611      	mov	r1, r2
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7ff ff5d 	bl	8002660 <__NVIC_SetPriority>
}
 80027a6:	bf00      	nop
 80027a8:	3718      	adds	r7, #24
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}

080027ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027ae:	b580      	push	{r7, lr}
 80027b0:	b082      	sub	sp, #8
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f7ff ffb0 	bl	800271c <SysTick_Config>
 80027bc:	4603      	mov	r3, r0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3708      	adds	r7, #8
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
	...

080027c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b089      	sub	sp, #36	; 0x24
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80027d2:	2300      	movs	r3, #0
 80027d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80027d6:	2300      	movs	r3, #0
 80027d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80027da:	2300      	movs	r3, #0
 80027dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027de:	2300      	movs	r3, #0
 80027e0:	61fb      	str	r3, [r7, #28]
 80027e2:	e165      	b.n	8002ab0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027e4:	2201      	movs	r2, #1
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	697a      	ldr	r2, [r7, #20]
 80027f4:	4013      	ands	r3, r2
 80027f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027f8:	693a      	ldr	r2, [r7, #16]
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	f040 8154 	bne.w	8002aaa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f003 0303 	and.w	r3, r3, #3
 800280a:	2b01      	cmp	r3, #1
 800280c:	d005      	beq.n	800281a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002816:	2b02      	cmp	r3, #2
 8002818:	d130      	bne.n	800287c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	005b      	lsls	r3, r3, #1
 8002824:	2203      	movs	r2, #3
 8002826:	fa02 f303 	lsl.w	r3, r2, r3
 800282a:	43db      	mvns	r3, r3
 800282c:	69ba      	ldr	r2, [r7, #24]
 800282e:	4013      	ands	r3, r2
 8002830:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	68da      	ldr	r2, [r3, #12]
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	005b      	lsls	r3, r3, #1
 800283a:	fa02 f303 	lsl.w	r3, r2, r3
 800283e:	69ba      	ldr	r2, [r7, #24]
 8002840:	4313      	orrs	r3, r2
 8002842:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	69ba      	ldr	r2, [r7, #24]
 8002848:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002850:	2201      	movs	r2, #1
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	fa02 f303 	lsl.w	r3, r2, r3
 8002858:	43db      	mvns	r3, r3
 800285a:	69ba      	ldr	r2, [r7, #24]
 800285c:	4013      	ands	r3, r2
 800285e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	091b      	lsrs	r3, r3, #4
 8002866:	f003 0201 	and.w	r2, r3, #1
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	fa02 f303 	lsl.w	r3, r2, r3
 8002870:	69ba      	ldr	r2, [r7, #24]
 8002872:	4313      	orrs	r3, r2
 8002874:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	69ba      	ldr	r2, [r7, #24]
 800287a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f003 0303 	and.w	r3, r3, #3
 8002884:	2b03      	cmp	r3, #3
 8002886:	d017      	beq.n	80028b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	005b      	lsls	r3, r3, #1
 8002892:	2203      	movs	r2, #3
 8002894:	fa02 f303 	lsl.w	r3, r2, r3
 8002898:	43db      	mvns	r3, r3
 800289a:	69ba      	ldr	r2, [r7, #24]
 800289c:	4013      	ands	r3, r2
 800289e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	689a      	ldr	r2, [r3, #8]
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	005b      	lsls	r3, r3, #1
 80028a8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f003 0303 	and.w	r3, r3, #3
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d123      	bne.n	800290c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	08da      	lsrs	r2, r3, #3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	3208      	adds	r2, #8
 80028cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	f003 0307 	and.w	r3, r3, #7
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	220f      	movs	r2, #15
 80028dc:	fa02 f303 	lsl.w	r3, r2, r3
 80028e0:	43db      	mvns	r3, r3
 80028e2:	69ba      	ldr	r2, [r7, #24]
 80028e4:	4013      	ands	r3, r2
 80028e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	691a      	ldr	r2, [r3, #16]
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	f003 0307 	and.w	r3, r3, #7
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	fa02 f303 	lsl.w	r3, r2, r3
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	08da      	lsrs	r2, r3, #3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	3208      	adds	r2, #8
 8002906:	69b9      	ldr	r1, [r7, #24]
 8002908:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	005b      	lsls	r3, r3, #1
 8002916:	2203      	movs	r2, #3
 8002918:	fa02 f303 	lsl.w	r3, r2, r3
 800291c:	43db      	mvns	r3, r3
 800291e:	69ba      	ldr	r2, [r7, #24]
 8002920:	4013      	ands	r3, r2
 8002922:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f003 0203 	and.w	r2, r3, #3
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	005b      	lsls	r3, r3, #1
 8002930:	fa02 f303 	lsl.w	r3, r2, r3
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	4313      	orrs	r3, r2
 8002938:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002948:	2b00      	cmp	r3, #0
 800294a:	f000 80ae 	beq.w	8002aaa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800294e:	2300      	movs	r3, #0
 8002950:	60fb      	str	r3, [r7, #12]
 8002952:	4b5d      	ldr	r3, [pc, #372]	; (8002ac8 <HAL_GPIO_Init+0x300>)
 8002954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002956:	4a5c      	ldr	r2, [pc, #368]	; (8002ac8 <HAL_GPIO_Init+0x300>)
 8002958:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800295c:	6453      	str	r3, [r2, #68]	; 0x44
 800295e:	4b5a      	ldr	r3, [pc, #360]	; (8002ac8 <HAL_GPIO_Init+0x300>)
 8002960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002962:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002966:	60fb      	str	r3, [r7, #12]
 8002968:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800296a:	4a58      	ldr	r2, [pc, #352]	; (8002acc <HAL_GPIO_Init+0x304>)
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	089b      	lsrs	r3, r3, #2
 8002970:	3302      	adds	r3, #2
 8002972:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002976:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	f003 0303 	and.w	r3, r3, #3
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	220f      	movs	r2, #15
 8002982:	fa02 f303 	lsl.w	r3, r2, r3
 8002986:	43db      	mvns	r3, r3
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	4013      	ands	r3, r2
 800298c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a4f      	ldr	r2, [pc, #316]	; (8002ad0 <HAL_GPIO_Init+0x308>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d025      	beq.n	80029e2 <HAL_GPIO_Init+0x21a>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a4e      	ldr	r2, [pc, #312]	; (8002ad4 <HAL_GPIO_Init+0x30c>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d01f      	beq.n	80029de <HAL_GPIO_Init+0x216>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a4d      	ldr	r2, [pc, #308]	; (8002ad8 <HAL_GPIO_Init+0x310>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d019      	beq.n	80029da <HAL_GPIO_Init+0x212>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a4c      	ldr	r2, [pc, #304]	; (8002adc <HAL_GPIO_Init+0x314>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d013      	beq.n	80029d6 <HAL_GPIO_Init+0x20e>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a4b      	ldr	r2, [pc, #300]	; (8002ae0 <HAL_GPIO_Init+0x318>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d00d      	beq.n	80029d2 <HAL_GPIO_Init+0x20a>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a4a      	ldr	r2, [pc, #296]	; (8002ae4 <HAL_GPIO_Init+0x31c>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d007      	beq.n	80029ce <HAL_GPIO_Init+0x206>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a49      	ldr	r2, [pc, #292]	; (8002ae8 <HAL_GPIO_Init+0x320>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d101      	bne.n	80029ca <HAL_GPIO_Init+0x202>
 80029c6:	2306      	movs	r3, #6
 80029c8:	e00c      	b.n	80029e4 <HAL_GPIO_Init+0x21c>
 80029ca:	2307      	movs	r3, #7
 80029cc:	e00a      	b.n	80029e4 <HAL_GPIO_Init+0x21c>
 80029ce:	2305      	movs	r3, #5
 80029d0:	e008      	b.n	80029e4 <HAL_GPIO_Init+0x21c>
 80029d2:	2304      	movs	r3, #4
 80029d4:	e006      	b.n	80029e4 <HAL_GPIO_Init+0x21c>
 80029d6:	2303      	movs	r3, #3
 80029d8:	e004      	b.n	80029e4 <HAL_GPIO_Init+0x21c>
 80029da:	2302      	movs	r3, #2
 80029dc:	e002      	b.n	80029e4 <HAL_GPIO_Init+0x21c>
 80029de:	2301      	movs	r3, #1
 80029e0:	e000      	b.n	80029e4 <HAL_GPIO_Init+0x21c>
 80029e2:	2300      	movs	r3, #0
 80029e4:	69fa      	ldr	r2, [r7, #28]
 80029e6:	f002 0203 	and.w	r2, r2, #3
 80029ea:	0092      	lsls	r2, r2, #2
 80029ec:	4093      	lsls	r3, r2
 80029ee:	69ba      	ldr	r2, [r7, #24]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029f4:	4935      	ldr	r1, [pc, #212]	; (8002acc <HAL_GPIO_Init+0x304>)
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	089b      	lsrs	r3, r3, #2
 80029fa:	3302      	adds	r3, #2
 80029fc:	69ba      	ldr	r2, [r7, #24]
 80029fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a02:	4b3a      	ldr	r3, [pc, #232]	; (8002aec <HAL_GPIO_Init+0x324>)
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	43db      	mvns	r3, r3
 8002a0c:	69ba      	ldr	r2, [r7, #24]
 8002a0e:	4013      	ands	r3, r2
 8002a10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d003      	beq.n	8002a26 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002a1e:	69ba      	ldr	r2, [r7, #24]
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a26:	4a31      	ldr	r2, [pc, #196]	; (8002aec <HAL_GPIO_Init+0x324>)
 8002a28:	69bb      	ldr	r3, [r7, #24]
 8002a2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a2c:	4b2f      	ldr	r3, [pc, #188]	; (8002aec <HAL_GPIO_Init+0x324>)
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	43db      	mvns	r3, r3
 8002a36:	69ba      	ldr	r2, [r7, #24]
 8002a38:	4013      	ands	r3, r2
 8002a3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d003      	beq.n	8002a50 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a50:	4a26      	ldr	r2, [pc, #152]	; (8002aec <HAL_GPIO_Init+0x324>)
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a56:	4b25      	ldr	r3, [pc, #148]	; (8002aec <HAL_GPIO_Init+0x324>)
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	43db      	mvns	r3, r3
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	4013      	ands	r3, r2
 8002a64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d003      	beq.n	8002a7a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002a72:	69ba      	ldr	r2, [r7, #24]
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a7a:	4a1c      	ldr	r2, [pc, #112]	; (8002aec <HAL_GPIO_Init+0x324>)
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a80:	4b1a      	ldr	r3, [pc, #104]	; (8002aec <HAL_GPIO_Init+0x324>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	43db      	mvns	r3, r3
 8002a8a:	69ba      	ldr	r2, [r7, #24]
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d003      	beq.n	8002aa4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002a9c:	69ba      	ldr	r2, [r7, #24]
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002aa4:	4a11      	ldr	r2, [pc, #68]	; (8002aec <HAL_GPIO_Init+0x324>)
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	3301      	adds	r3, #1
 8002aae:	61fb      	str	r3, [r7, #28]
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	2b0f      	cmp	r3, #15
 8002ab4:	f67f ae96 	bls.w	80027e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ab8:	bf00      	nop
 8002aba:	bf00      	nop
 8002abc:	3724      	adds	r7, #36	; 0x24
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	40023800 	.word	0x40023800
 8002acc:	40013800 	.word	0x40013800
 8002ad0:	40020000 	.word	0x40020000
 8002ad4:	40020400 	.word	0x40020400
 8002ad8:	40020800 	.word	0x40020800
 8002adc:	40020c00 	.word	0x40020c00
 8002ae0:	40021000 	.word	0x40021000
 8002ae4:	40021400 	.word	0x40021400
 8002ae8:	40021800 	.word	0x40021800
 8002aec:	40013c00 	.word	0x40013c00

08002af0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d101      	bne.n	8002b02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e12b      	b.n	8002d5a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d106      	bne.n	8002b1c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f7ff fbae 	bl	8002278 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2224      	movs	r2, #36	; 0x24
 8002b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f022 0201 	bic.w	r2, r2, #1
 8002b32:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b42:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b52:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002b54:	f001 f944 	bl	8003de0 <HAL_RCC_GetPCLK1Freq>
 8002b58:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	4a81      	ldr	r2, [pc, #516]	; (8002d64 <HAL_I2C_Init+0x274>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d807      	bhi.n	8002b74 <HAL_I2C_Init+0x84>
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	4a80      	ldr	r2, [pc, #512]	; (8002d68 <HAL_I2C_Init+0x278>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	bf94      	ite	ls
 8002b6c:	2301      	movls	r3, #1
 8002b6e:	2300      	movhi	r3, #0
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	e006      	b.n	8002b82 <HAL_I2C_Init+0x92>
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	4a7d      	ldr	r2, [pc, #500]	; (8002d6c <HAL_I2C_Init+0x27c>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	bf94      	ite	ls
 8002b7c:	2301      	movls	r3, #1
 8002b7e:	2300      	movhi	r3, #0
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d001      	beq.n	8002b8a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e0e7      	b.n	8002d5a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	4a78      	ldr	r2, [pc, #480]	; (8002d70 <HAL_I2C_Init+0x280>)
 8002b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b92:	0c9b      	lsrs	r3, r3, #18
 8002b94:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	68ba      	ldr	r2, [r7, #8]
 8002ba6:	430a      	orrs	r2, r1
 8002ba8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	6a1b      	ldr	r3, [r3, #32]
 8002bb0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	4a6a      	ldr	r2, [pc, #424]	; (8002d64 <HAL_I2C_Init+0x274>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d802      	bhi.n	8002bc4 <HAL_I2C_Init+0xd4>
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	e009      	b.n	8002bd8 <HAL_I2C_Init+0xe8>
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002bca:	fb02 f303 	mul.w	r3, r2, r3
 8002bce:	4a69      	ldr	r2, [pc, #420]	; (8002d74 <HAL_I2C_Init+0x284>)
 8002bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd4:	099b      	lsrs	r3, r3, #6
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	6812      	ldr	r2, [r2, #0]
 8002bdc:	430b      	orrs	r3, r1
 8002bde:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	69db      	ldr	r3, [r3, #28]
 8002be6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002bea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	495c      	ldr	r1, [pc, #368]	; (8002d64 <HAL_I2C_Init+0x274>)
 8002bf4:	428b      	cmp	r3, r1
 8002bf6:	d819      	bhi.n	8002c2c <HAL_I2C_Init+0x13c>
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	1e59      	subs	r1, r3, #1
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	005b      	lsls	r3, r3, #1
 8002c02:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c06:	1c59      	adds	r1, r3, #1
 8002c08:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002c0c:	400b      	ands	r3, r1
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d00a      	beq.n	8002c28 <HAL_I2C_Init+0x138>
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	1e59      	subs	r1, r3, #1
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	005b      	lsls	r3, r3, #1
 8002c1c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c20:	3301      	adds	r3, #1
 8002c22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c26:	e051      	b.n	8002ccc <HAL_I2C_Init+0x1dc>
 8002c28:	2304      	movs	r3, #4
 8002c2a:	e04f      	b.n	8002ccc <HAL_I2C_Init+0x1dc>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d111      	bne.n	8002c58 <HAL_I2C_Init+0x168>
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	1e58      	subs	r0, r3, #1
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6859      	ldr	r1, [r3, #4]
 8002c3c:	460b      	mov	r3, r1
 8002c3e:	005b      	lsls	r3, r3, #1
 8002c40:	440b      	add	r3, r1
 8002c42:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c46:	3301      	adds	r3, #1
 8002c48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	bf0c      	ite	eq
 8002c50:	2301      	moveq	r3, #1
 8002c52:	2300      	movne	r3, #0
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	e012      	b.n	8002c7e <HAL_I2C_Init+0x18e>
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	1e58      	subs	r0, r3, #1
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6859      	ldr	r1, [r3, #4]
 8002c60:	460b      	mov	r3, r1
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	440b      	add	r3, r1
 8002c66:	0099      	lsls	r1, r3, #2
 8002c68:	440b      	add	r3, r1
 8002c6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c6e:	3301      	adds	r3, #1
 8002c70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	bf0c      	ite	eq
 8002c78:	2301      	moveq	r3, #1
 8002c7a:	2300      	movne	r3, #0
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d001      	beq.n	8002c86 <HAL_I2C_Init+0x196>
 8002c82:	2301      	movs	r3, #1
 8002c84:	e022      	b.n	8002ccc <HAL_I2C_Init+0x1dc>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d10e      	bne.n	8002cac <HAL_I2C_Init+0x1bc>
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	1e58      	subs	r0, r3, #1
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6859      	ldr	r1, [r3, #4]
 8002c96:	460b      	mov	r3, r1
 8002c98:	005b      	lsls	r3, r3, #1
 8002c9a:	440b      	add	r3, r1
 8002c9c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ca6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002caa:	e00f      	b.n	8002ccc <HAL_I2C_Init+0x1dc>
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	1e58      	subs	r0, r3, #1
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6859      	ldr	r1, [r3, #4]
 8002cb4:	460b      	mov	r3, r1
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	440b      	add	r3, r1
 8002cba:	0099      	lsls	r1, r3, #2
 8002cbc:	440b      	add	r3, r1
 8002cbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cc8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ccc:	6879      	ldr	r1, [r7, #4]
 8002cce:	6809      	ldr	r1, [r1, #0]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	69da      	ldr	r2, [r3, #28]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a1b      	ldr	r3, [r3, #32]
 8002ce6:	431a      	orrs	r2, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	430a      	orrs	r2, r1
 8002cee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002cfa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	6911      	ldr	r1, [r2, #16]
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	68d2      	ldr	r2, [r2, #12]
 8002d06:	4311      	orrs	r1, r2
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	6812      	ldr	r2, [r2, #0]
 8002d0c:	430b      	orrs	r3, r1
 8002d0e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	695a      	ldr	r2, [r3, #20]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	699b      	ldr	r3, [r3, #24]
 8002d22:	431a      	orrs	r2, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	430a      	orrs	r2, r1
 8002d2a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f042 0201 	orr.w	r2, r2, #1
 8002d3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2220      	movs	r2, #32
 8002d46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d58:	2300      	movs	r3, #0
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3710      	adds	r7, #16
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	000186a0 	.word	0x000186a0
 8002d68:	001e847f 	.word	0x001e847f
 8002d6c:	003d08ff 	.word	0x003d08ff
 8002d70:	431bde83 	.word	0x431bde83
 8002d74:	10624dd3 	.word	0x10624dd3

08002d78 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b088      	sub	sp, #32
 8002d7c:	af02      	add	r7, sp, #8
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	4608      	mov	r0, r1
 8002d82:	4611      	mov	r1, r2
 8002d84:	461a      	mov	r2, r3
 8002d86:	4603      	mov	r3, r0
 8002d88:	817b      	strh	r3, [r7, #10]
 8002d8a:	460b      	mov	r3, r1
 8002d8c:	813b      	strh	r3, [r7, #8]
 8002d8e:	4613      	mov	r3, r2
 8002d90:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d92:	f7ff fc03 	bl	800259c <HAL_GetTick>
 8002d96:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	2b20      	cmp	r3, #32
 8002da2:	f040 80d9 	bne.w	8002f58 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	9300      	str	r3, [sp, #0]
 8002daa:	2319      	movs	r3, #25
 8002dac:	2201      	movs	r2, #1
 8002dae:	496d      	ldr	r1, [pc, #436]	; (8002f64 <HAL_I2C_Mem_Write+0x1ec>)
 8002db0:	68f8      	ldr	r0, [r7, #12]
 8002db2:	f000 fc7f 	bl	80036b4 <I2C_WaitOnFlagUntilTimeout>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d001      	beq.n	8002dc0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002dbc:	2302      	movs	r3, #2
 8002dbe:	e0cc      	b.n	8002f5a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d101      	bne.n	8002dce <HAL_I2C_Mem_Write+0x56>
 8002dca:	2302      	movs	r3, #2
 8002dcc:	e0c5      	b.n	8002f5a <HAL_I2C_Mem_Write+0x1e2>
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0301 	and.w	r3, r3, #1
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d007      	beq.n	8002df4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f042 0201 	orr.w	r2, r2, #1
 8002df2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e02:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2221      	movs	r2, #33	; 0x21
 8002e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2240      	movs	r2, #64	; 0x40
 8002e10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2200      	movs	r2, #0
 8002e18:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	6a3a      	ldr	r2, [r7, #32]
 8002e1e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002e24:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e2a:	b29a      	uxth	r2, r3
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	4a4d      	ldr	r2, [pc, #308]	; (8002f68 <HAL_I2C_Mem_Write+0x1f0>)
 8002e34:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e36:	88f8      	ldrh	r0, [r7, #6]
 8002e38:	893a      	ldrh	r2, [r7, #8]
 8002e3a:	8979      	ldrh	r1, [r7, #10]
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	9301      	str	r3, [sp, #4]
 8002e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e42:	9300      	str	r3, [sp, #0]
 8002e44:	4603      	mov	r3, r0
 8002e46:	68f8      	ldr	r0, [r7, #12]
 8002e48:	f000 fab6 	bl	80033b8 <I2C_RequestMemoryWrite>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d052      	beq.n	8002ef8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e081      	b.n	8002f5a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e56:	697a      	ldr	r2, [r7, #20]
 8002e58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e5a:	68f8      	ldr	r0, [r7, #12]
 8002e5c:	f000 fd00 	bl	8003860 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d00d      	beq.n	8002e82 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6a:	2b04      	cmp	r3, #4
 8002e6c:	d107      	bne.n	8002e7e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e7c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e06b      	b.n	8002f5a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e86:	781a      	ldrb	r2, [r3, #0]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e92:	1c5a      	adds	r2, r3, #1
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e9c:	3b01      	subs	r3, #1
 8002e9e:	b29a      	uxth	r2, r3
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	3b01      	subs	r3, #1
 8002eac:	b29a      	uxth	r2, r3
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	695b      	ldr	r3, [r3, #20]
 8002eb8:	f003 0304 	and.w	r3, r3, #4
 8002ebc:	2b04      	cmp	r3, #4
 8002ebe:	d11b      	bne.n	8002ef8 <HAL_I2C_Mem_Write+0x180>
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d017      	beq.n	8002ef8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ecc:	781a      	ldrb	r2, [r3, #0]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed8:	1c5a      	adds	r2, r3, #1
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ee2:	3b01      	subs	r3, #1
 8002ee4:	b29a      	uxth	r2, r3
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	3b01      	subs	r3, #1
 8002ef2:	b29a      	uxth	r2, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d1aa      	bne.n	8002e56 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f00:	697a      	ldr	r2, [r7, #20]
 8002f02:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f04:	68f8      	ldr	r0, [r7, #12]
 8002f06:	f000 fcec 	bl	80038e2 <I2C_WaitOnBTFFlagUntilTimeout>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d00d      	beq.n	8002f2c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f14:	2b04      	cmp	r3, #4
 8002f16:	d107      	bne.n	8002f28 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f26:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e016      	b.n	8002f5a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2220      	movs	r2, #32
 8002f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002f54:	2300      	movs	r3, #0
 8002f56:	e000      	b.n	8002f5a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002f58:	2302      	movs	r3, #2
  }
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3718      	adds	r7, #24
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	00100002 	.word	0x00100002
 8002f68:	ffff0000 	.word	0xffff0000

08002f6c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b08c      	sub	sp, #48	; 0x30
 8002f70:	af02      	add	r7, sp, #8
 8002f72:	60f8      	str	r0, [r7, #12]
 8002f74:	4608      	mov	r0, r1
 8002f76:	4611      	mov	r1, r2
 8002f78:	461a      	mov	r2, r3
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	817b      	strh	r3, [r7, #10]
 8002f7e:	460b      	mov	r3, r1
 8002f80:	813b      	strh	r3, [r7, #8]
 8002f82:	4613      	mov	r3, r2
 8002f84:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f86:	f7ff fb09 	bl	800259c <HAL_GetTick>
 8002f8a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	2b20      	cmp	r3, #32
 8002f96:	f040 8208 	bne.w	80033aa <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9c:	9300      	str	r3, [sp, #0]
 8002f9e:	2319      	movs	r3, #25
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	497b      	ldr	r1, [pc, #492]	; (8003190 <HAL_I2C_Mem_Read+0x224>)
 8002fa4:	68f8      	ldr	r0, [r7, #12]
 8002fa6:	f000 fb85 	bl	80036b4 <I2C_WaitOnFlagUntilTimeout>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d001      	beq.n	8002fb4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002fb0:	2302      	movs	r3, #2
 8002fb2:	e1fb      	b.n	80033ac <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d101      	bne.n	8002fc2 <HAL_I2C_Mem_Read+0x56>
 8002fbe:	2302      	movs	r3, #2
 8002fc0:	e1f4      	b.n	80033ac <HAL_I2C_Mem_Read+0x440>
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0301 	and.w	r3, r3, #1
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d007      	beq.n	8002fe8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f042 0201 	orr.w	r2, r2, #1
 8002fe6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ff6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2222      	movs	r2, #34	; 0x22
 8002ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2240      	movs	r2, #64	; 0x40
 8003004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2200      	movs	r2, #0
 800300c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003012:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003018:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800301e:	b29a      	uxth	r2, r3
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	4a5b      	ldr	r2, [pc, #364]	; (8003194 <HAL_I2C_Mem_Read+0x228>)
 8003028:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800302a:	88f8      	ldrh	r0, [r7, #6]
 800302c:	893a      	ldrh	r2, [r7, #8]
 800302e:	8979      	ldrh	r1, [r7, #10]
 8003030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003032:	9301      	str	r3, [sp, #4]
 8003034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003036:	9300      	str	r3, [sp, #0]
 8003038:	4603      	mov	r3, r0
 800303a:	68f8      	ldr	r0, [r7, #12]
 800303c:	f000 fa52 	bl	80034e4 <I2C_RequestMemoryRead>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d001      	beq.n	800304a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e1b0      	b.n	80033ac <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800304e:	2b00      	cmp	r3, #0
 8003050:	d113      	bne.n	800307a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003052:	2300      	movs	r3, #0
 8003054:	623b      	str	r3, [r7, #32]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	695b      	ldr	r3, [r3, #20]
 800305c:	623b      	str	r3, [r7, #32]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	699b      	ldr	r3, [r3, #24]
 8003064:	623b      	str	r3, [r7, #32]
 8003066:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003076:	601a      	str	r2, [r3, #0]
 8003078:	e184      	b.n	8003384 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800307e:	2b01      	cmp	r3, #1
 8003080:	d11b      	bne.n	80030ba <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003090:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003092:	2300      	movs	r3, #0
 8003094:	61fb      	str	r3, [r7, #28]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	695b      	ldr	r3, [r3, #20]
 800309c:	61fb      	str	r3, [r7, #28]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	699b      	ldr	r3, [r3, #24]
 80030a4:	61fb      	str	r3, [r7, #28]
 80030a6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030b6:	601a      	str	r2, [r3, #0]
 80030b8:	e164      	b.n	8003384 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d11b      	bne.n	80030fa <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030d0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030e0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030e2:	2300      	movs	r3, #0
 80030e4:	61bb      	str	r3, [r7, #24]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	695b      	ldr	r3, [r3, #20]
 80030ec:	61bb      	str	r3, [r7, #24]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	699b      	ldr	r3, [r3, #24]
 80030f4:	61bb      	str	r3, [r7, #24]
 80030f6:	69bb      	ldr	r3, [r7, #24]
 80030f8:	e144      	b.n	8003384 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030fa:	2300      	movs	r3, #0
 80030fc:	617b      	str	r3, [r7, #20]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	695b      	ldr	r3, [r3, #20]
 8003104:	617b      	str	r3, [r7, #20]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	699b      	ldr	r3, [r3, #24]
 800310c:	617b      	str	r3, [r7, #20]
 800310e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003110:	e138      	b.n	8003384 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003116:	2b03      	cmp	r3, #3
 8003118:	f200 80f1 	bhi.w	80032fe <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003120:	2b01      	cmp	r3, #1
 8003122:	d123      	bne.n	800316c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003124:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003126:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003128:	68f8      	ldr	r0, [r7, #12]
 800312a:	f000 fc1b 	bl	8003964 <I2C_WaitOnRXNEFlagUntilTimeout>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d001      	beq.n	8003138 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e139      	b.n	80033ac <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	691a      	ldr	r2, [r3, #16]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003142:	b2d2      	uxtb	r2, r2
 8003144:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314a:	1c5a      	adds	r2, r3, #1
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003154:	3b01      	subs	r3, #1
 8003156:	b29a      	uxth	r2, r3
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003160:	b29b      	uxth	r3, r3
 8003162:	3b01      	subs	r3, #1
 8003164:	b29a      	uxth	r2, r3
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	855a      	strh	r2, [r3, #42]	; 0x2a
 800316a:	e10b      	b.n	8003384 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003170:	2b02      	cmp	r3, #2
 8003172:	d14e      	bne.n	8003212 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003176:	9300      	str	r3, [sp, #0]
 8003178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800317a:	2200      	movs	r2, #0
 800317c:	4906      	ldr	r1, [pc, #24]	; (8003198 <HAL_I2C_Mem_Read+0x22c>)
 800317e:	68f8      	ldr	r0, [r7, #12]
 8003180:	f000 fa98 	bl	80036b4 <I2C_WaitOnFlagUntilTimeout>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d008      	beq.n	800319c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e10e      	b.n	80033ac <HAL_I2C_Mem_Read+0x440>
 800318e:	bf00      	nop
 8003190:	00100002 	.word	0x00100002
 8003194:	ffff0000 	.word	0xffff0000
 8003198:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	691a      	ldr	r2, [r3, #16]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b6:	b2d2      	uxtb	r2, r2
 80031b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031be:	1c5a      	adds	r2, r3, #1
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031c8:	3b01      	subs	r3, #1
 80031ca:	b29a      	uxth	r2, r3
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	3b01      	subs	r3, #1
 80031d8:	b29a      	uxth	r2, r3
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	691a      	ldr	r2, [r3, #16]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e8:	b2d2      	uxtb	r2, r2
 80031ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f0:	1c5a      	adds	r2, r3, #1
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031fa:	3b01      	subs	r3, #1
 80031fc:	b29a      	uxth	r2, r3
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003206:	b29b      	uxth	r3, r3
 8003208:	3b01      	subs	r3, #1
 800320a:	b29a      	uxth	r2, r3
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003210:	e0b8      	b.n	8003384 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003214:	9300      	str	r3, [sp, #0]
 8003216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003218:	2200      	movs	r2, #0
 800321a:	4966      	ldr	r1, [pc, #408]	; (80033b4 <HAL_I2C_Mem_Read+0x448>)
 800321c:	68f8      	ldr	r0, [r7, #12]
 800321e:	f000 fa49 	bl	80036b4 <I2C_WaitOnFlagUntilTimeout>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d001      	beq.n	800322c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e0bf      	b.n	80033ac <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800323a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	691a      	ldr	r2, [r3, #16]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003246:	b2d2      	uxtb	r2, r2
 8003248:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324e:	1c5a      	adds	r2, r3, #1
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003258:	3b01      	subs	r3, #1
 800325a:	b29a      	uxth	r2, r3
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003264:	b29b      	uxth	r3, r3
 8003266:	3b01      	subs	r3, #1
 8003268:	b29a      	uxth	r2, r3
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800326e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003270:	9300      	str	r3, [sp, #0]
 8003272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003274:	2200      	movs	r2, #0
 8003276:	494f      	ldr	r1, [pc, #316]	; (80033b4 <HAL_I2C_Mem_Read+0x448>)
 8003278:	68f8      	ldr	r0, [r7, #12]
 800327a:	f000 fa1b 	bl	80036b4 <I2C_WaitOnFlagUntilTimeout>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d001      	beq.n	8003288 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e091      	b.n	80033ac <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003296:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	691a      	ldr	r2, [r3, #16]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a2:	b2d2      	uxtb	r2, r2
 80032a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032aa:	1c5a      	adds	r2, r3, #1
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032b4:	3b01      	subs	r3, #1
 80032b6:	b29a      	uxth	r2, r3
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	3b01      	subs	r3, #1
 80032c4:	b29a      	uxth	r2, r3
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	691a      	ldr	r2, [r3, #16]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d4:	b2d2      	uxtb	r2, r2
 80032d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032dc:	1c5a      	adds	r2, r3, #1
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032e6:	3b01      	subs	r3, #1
 80032e8:	b29a      	uxth	r2, r3
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	3b01      	subs	r3, #1
 80032f6:	b29a      	uxth	r2, r3
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80032fc:	e042      	b.n	8003384 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003300:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003302:	68f8      	ldr	r0, [r7, #12]
 8003304:	f000 fb2e 	bl	8003964 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d001      	beq.n	8003312 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e04c      	b.n	80033ac <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	691a      	ldr	r2, [r3, #16]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331c:	b2d2      	uxtb	r2, r2
 800331e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003324:	1c5a      	adds	r2, r3, #1
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800332e:	3b01      	subs	r3, #1
 8003330:	b29a      	uxth	r2, r3
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800333a:	b29b      	uxth	r3, r3
 800333c:	3b01      	subs	r3, #1
 800333e:	b29a      	uxth	r2, r3
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	695b      	ldr	r3, [r3, #20]
 800334a:	f003 0304 	and.w	r3, r3, #4
 800334e:	2b04      	cmp	r3, #4
 8003350:	d118      	bne.n	8003384 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	691a      	ldr	r2, [r3, #16]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335c:	b2d2      	uxtb	r2, r2
 800335e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003364:	1c5a      	adds	r2, r3, #1
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800336e:	3b01      	subs	r3, #1
 8003370:	b29a      	uxth	r2, r3
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800337a:	b29b      	uxth	r3, r3
 800337c:	3b01      	subs	r3, #1
 800337e:	b29a      	uxth	r2, r3
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003388:	2b00      	cmp	r3, #0
 800338a:	f47f aec2 	bne.w	8003112 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2220      	movs	r2, #32
 8003392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2200      	movs	r2, #0
 800339a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80033a6:	2300      	movs	r3, #0
 80033a8:	e000      	b.n	80033ac <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80033aa:	2302      	movs	r3, #2
  }
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3728      	adds	r7, #40	; 0x28
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	00010004 	.word	0x00010004

080033b8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b088      	sub	sp, #32
 80033bc:	af02      	add	r7, sp, #8
 80033be:	60f8      	str	r0, [r7, #12]
 80033c0:	4608      	mov	r0, r1
 80033c2:	4611      	mov	r1, r2
 80033c4:	461a      	mov	r2, r3
 80033c6:	4603      	mov	r3, r0
 80033c8:	817b      	strh	r3, [r7, #10]
 80033ca:	460b      	mov	r3, r1
 80033cc:	813b      	strh	r3, [r7, #8]
 80033ce:	4613      	mov	r3, r2
 80033d0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033e0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e4:	9300      	str	r3, [sp, #0]
 80033e6:	6a3b      	ldr	r3, [r7, #32]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80033ee:	68f8      	ldr	r0, [r7, #12]
 80033f0:	f000 f960 	bl	80036b4 <I2C_WaitOnFlagUntilTimeout>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d00d      	beq.n	8003416 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003404:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003408:	d103      	bne.n	8003412 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003410:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e05f      	b.n	80034d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003416:	897b      	ldrh	r3, [r7, #10]
 8003418:	b2db      	uxtb	r3, r3
 800341a:	461a      	mov	r2, r3
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003424:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003428:	6a3a      	ldr	r2, [r7, #32]
 800342a:	492d      	ldr	r1, [pc, #180]	; (80034e0 <I2C_RequestMemoryWrite+0x128>)
 800342c:	68f8      	ldr	r0, [r7, #12]
 800342e:	f000 f998 	bl	8003762 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003432:	4603      	mov	r3, r0
 8003434:	2b00      	cmp	r3, #0
 8003436:	d001      	beq.n	800343c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e04c      	b.n	80034d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800343c:	2300      	movs	r3, #0
 800343e:	617b      	str	r3, [r7, #20]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	695b      	ldr	r3, [r3, #20]
 8003446:	617b      	str	r3, [r7, #20]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	699b      	ldr	r3, [r3, #24]
 800344e:	617b      	str	r3, [r7, #20]
 8003450:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003452:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003454:	6a39      	ldr	r1, [r7, #32]
 8003456:	68f8      	ldr	r0, [r7, #12]
 8003458:	f000 fa02 	bl	8003860 <I2C_WaitOnTXEFlagUntilTimeout>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d00d      	beq.n	800347e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003466:	2b04      	cmp	r3, #4
 8003468:	d107      	bne.n	800347a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003478:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e02b      	b.n	80034d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800347e:	88fb      	ldrh	r3, [r7, #6]
 8003480:	2b01      	cmp	r3, #1
 8003482:	d105      	bne.n	8003490 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003484:	893b      	ldrh	r3, [r7, #8]
 8003486:	b2da      	uxtb	r2, r3
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	611a      	str	r2, [r3, #16]
 800348e:	e021      	b.n	80034d4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003490:	893b      	ldrh	r3, [r7, #8]
 8003492:	0a1b      	lsrs	r3, r3, #8
 8003494:	b29b      	uxth	r3, r3
 8003496:	b2da      	uxtb	r2, r3
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800349e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034a0:	6a39      	ldr	r1, [r7, #32]
 80034a2:	68f8      	ldr	r0, [r7, #12]
 80034a4:	f000 f9dc 	bl	8003860 <I2C_WaitOnTXEFlagUntilTimeout>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d00d      	beq.n	80034ca <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b2:	2b04      	cmp	r3, #4
 80034b4:	d107      	bne.n	80034c6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034c4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e005      	b.n	80034d6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80034ca:	893b      	ldrh	r3, [r7, #8]
 80034cc:	b2da      	uxtb	r2, r3
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3718      	adds	r7, #24
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	00010002 	.word	0x00010002

080034e4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b088      	sub	sp, #32
 80034e8:	af02      	add	r7, sp, #8
 80034ea:	60f8      	str	r0, [r7, #12]
 80034ec:	4608      	mov	r0, r1
 80034ee:	4611      	mov	r1, r2
 80034f0:	461a      	mov	r2, r3
 80034f2:	4603      	mov	r3, r0
 80034f4:	817b      	strh	r3, [r7, #10]
 80034f6:	460b      	mov	r3, r1
 80034f8:	813b      	strh	r3, [r7, #8]
 80034fa:	4613      	mov	r3, r2
 80034fc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800350c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800351c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800351e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003520:	9300      	str	r3, [sp, #0]
 8003522:	6a3b      	ldr	r3, [r7, #32]
 8003524:	2200      	movs	r2, #0
 8003526:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800352a:	68f8      	ldr	r0, [r7, #12]
 800352c:	f000 f8c2 	bl	80036b4 <I2C_WaitOnFlagUntilTimeout>
 8003530:	4603      	mov	r3, r0
 8003532:	2b00      	cmp	r3, #0
 8003534:	d00d      	beq.n	8003552 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003540:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003544:	d103      	bne.n	800354e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	f44f 7200 	mov.w	r2, #512	; 0x200
 800354c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e0aa      	b.n	80036a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003552:	897b      	ldrh	r3, [r7, #10]
 8003554:	b2db      	uxtb	r3, r3
 8003556:	461a      	mov	r2, r3
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003560:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003564:	6a3a      	ldr	r2, [r7, #32]
 8003566:	4952      	ldr	r1, [pc, #328]	; (80036b0 <I2C_RequestMemoryRead+0x1cc>)
 8003568:	68f8      	ldr	r0, [r7, #12]
 800356a:	f000 f8fa 	bl	8003762 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d001      	beq.n	8003578 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e097      	b.n	80036a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003578:	2300      	movs	r3, #0
 800357a:	617b      	str	r3, [r7, #20]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	695b      	ldr	r3, [r3, #20]
 8003582:	617b      	str	r3, [r7, #20]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	699b      	ldr	r3, [r3, #24]
 800358a:	617b      	str	r3, [r7, #20]
 800358c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800358e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003590:	6a39      	ldr	r1, [r7, #32]
 8003592:	68f8      	ldr	r0, [r7, #12]
 8003594:	f000 f964 	bl	8003860 <I2C_WaitOnTXEFlagUntilTimeout>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d00d      	beq.n	80035ba <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a2:	2b04      	cmp	r3, #4
 80035a4:	d107      	bne.n	80035b6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035b4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e076      	b.n	80036a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80035ba:	88fb      	ldrh	r3, [r7, #6]
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d105      	bne.n	80035cc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80035c0:	893b      	ldrh	r3, [r7, #8]
 80035c2:	b2da      	uxtb	r2, r3
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	611a      	str	r2, [r3, #16]
 80035ca:	e021      	b.n	8003610 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80035cc:	893b      	ldrh	r3, [r7, #8]
 80035ce:	0a1b      	lsrs	r3, r3, #8
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	b2da      	uxtb	r2, r3
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035dc:	6a39      	ldr	r1, [r7, #32]
 80035de:	68f8      	ldr	r0, [r7, #12]
 80035e0:	f000 f93e 	bl	8003860 <I2C_WaitOnTXEFlagUntilTimeout>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d00d      	beq.n	8003606 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ee:	2b04      	cmp	r3, #4
 80035f0:	d107      	bne.n	8003602 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003600:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e050      	b.n	80036a8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003606:	893b      	ldrh	r3, [r7, #8]
 8003608:	b2da      	uxtb	r2, r3
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003610:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003612:	6a39      	ldr	r1, [r7, #32]
 8003614:	68f8      	ldr	r0, [r7, #12]
 8003616:	f000 f923 	bl	8003860 <I2C_WaitOnTXEFlagUntilTimeout>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d00d      	beq.n	800363c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003624:	2b04      	cmp	r3, #4
 8003626:	d107      	bne.n	8003638 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003636:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e035      	b.n	80036a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800364a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800364c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364e:	9300      	str	r3, [sp, #0]
 8003650:	6a3b      	ldr	r3, [r7, #32]
 8003652:	2200      	movs	r2, #0
 8003654:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003658:	68f8      	ldr	r0, [r7, #12]
 800365a:	f000 f82b 	bl	80036b4 <I2C_WaitOnFlagUntilTimeout>
 800365e:	4603      	mov	r3, r0
 8003660:	2b00      	cmp	r3, #0
 8003662:	d00d      	beq.n	8003680 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800366e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003672:	d103      	bne.n	800367c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f44f 7200 	mov.w	r2, #512	; 0x200
 800367a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800367c:	2303      	movs	r3, #3
 800367e:	e013      	b.n	80036a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003680:	897b      	ldrh	r3, [r7, #10]
 8003682:	b2db      	uxtb	r3, r3
 8003684:	f043 0301 	orr.w	r3, r3, #1
 8003688:	b2da      	uxtb	r2, r3
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003692:	6a3a      	ldr	r2, [r7, #32]
 8003694:	4906      	ldr	r1, [pc, #24]	; (80036b0 <I2C_RequestMemoryRead+0x1cc>)
 8003696:	68f8      	ldr	r0, [r7, #12]
 8003698:	f000 f863 	bl	8003762 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800369c:	4603      	mov	r3, r0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d001      	beq.n	80036a6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e000      	b.n	80036a8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80036a6:	2300      	movs	r3, #0
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3718      	adds	r7, #24
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	00010002 	.word	0x00010002

080036b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	60f8      	str	r0, [r7, #12]
 80036bc:	60b9      	str	r1, [r7, #8]
 80036be:	603b      	str	r3, [r7, #0]
 80036c0:	4613      	mov	r3, r2
 80036c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036c4:	e025      	b.n	8003712 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036cc:	d021      	beq.n	8003712 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036ce:	f7fe ff65 	bl	800259c <HAL_GetTick>
 80036d2:	4602      	mov	r2, r0
 80036d4:	69bb      	ldr	r3, [r7, #24]
 80036d6:	1ad3      	subs	r3, r2, r3
 80036d8:	683a      	ldr	r2, [r7, #0]
 80036da:	429a      	cmp	r2, r3
 80036dc:	d302      	bcc.n	80036e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d116      	bne.n	8003712 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2200      	movs	r2, #0
 80036e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2220      	movs	r2, #32
 80036ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2200      	movs	r2, #0
 80036f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fe:	f043 0220 	orr.w	r2, r3, #32
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2200      	movs	r2, #0
 800370a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e023      	b.n	800375a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	0c1b      	lsrs	r3, r3, #16
 8003716:	b2db      	uxtb	r3, r3
 8003718:	2b01      	cmp	r3, #1
 800371a:	d10d      	bne.n	8003738 <I2C_WaitOnFlagUntilTimeout+0x84>
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	695b      	ldr	r3, [r3, #20]
 8003722:	43da      	mvns	r2, r3
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	4013      	ands	r3, r2
 8003728:	b29b      	uxth	r3, r3
 800372a:	2b00      	cmp	r3, #0
 800372c:	bf0c      	ite	eq
 800372e:	2301      	moveq	r3, #1
 8003730:	2300      	movne	r3, #0
 8003732:	b2db      	uxtb	r3, r3
 8003734:	461a      	mov	r2, r3
 8003736:	e00c      	b.n	8003752 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	699b      	ldr	r3, [r3, #24]
 800373e:	43da      	mvns	r2, r3
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	4013      	ands	r3, r2
 8003744:	b29b      	uxth	r3, r3
 8003746:	2b00      	cmp	r3, #0
 8003748:	bf0c      	ite	eq
 800374a:	2301      	moveq	r3, #1
 800374c:	2300      	movne	r3, #0
 800374e:	b2db      	uxtb	r3, r3
 8003750:	461a      	mov	r2, r3
 8003752:	79fb      	ldrb	r3, [r7, #7]
 8003754:	429a      	cmp	r2, r3
 8003756:	d0b6      	beq.n	80036c6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003758:	2300      	movs	r3, #0
}
 800375a:	4618      	mov	r0, r3
 800375c:	3710      	adds	r7, #16
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}

08003762 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003762:	b580      	push	{r7, lr}
 8003764:	b084      	sub	sp, #16
 8003766:	af00      	add	r7, sp, #0
 8003768:	60f8      	str	r0, [r7, #12]
 800376a:	60b9      	str	r1, [r7, #8]
 800376c:	607a      	str	r2, [r7, #4]
 800376e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003770:	e051      	b.n	8003816 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	695b      	ldr	r3, [r3, #20]
 8003778:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800377c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003780:	d123      	bne.n	80037ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003790:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800379a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2200      	movs	r2, #0
 80037a0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2220      	movs	r2, #32
 80037a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2200      	movs	r2, #0
 80037ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b6:	f043 0204 	orr.w	r2, r3, #4
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2200      	movs	r2, #0
 80037c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e046      	b.n	8003858 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037d0:	d021      	beq.n	8003816 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037d2:	f7fe fee3 	bl	800259c <HAL_GetTick>
 80037d6:	4602      	mov	r2, r0
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	429a      	cmp	r2, r3
 80037e0:	d302      	bcc.n	80037e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d116      	bne.n	8003816 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2200      	movs	r2, #0
 80037ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2220      	movs	r2, #32
 80037f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003802:	f043 0220 	orr.w	r2, r3, #32
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2200      	movs	r2, #0
 800380e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e020      	b.n	8003858 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	0c1b      	lsrs	r3, r3, #16
 800381a:	b2db      	uxtb	r3, r3
 800381c:	2b01      	cmp	r3, #1
 800381e:	d10c      	bne.n	800383a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	695b      	ldr	r3, [r3, #20]
 8003826:	43da      	mvns	r2, r3
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	4013      	ands	r3, r2
 800382c:	b29b      	uxth	r3, r3
 800382e:	2b00      	cmp	r3, #0
 8003830:	bf14      	ite	ne
 8003832:	2301      	movne	r3, #1
 8003834:	2300      	moveq	r3, #0
 8003836:	b2db      	uxtb	r3, r3
 8003838:	e00b      	b.n	8003852 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	699b      	ldr	r3, [r3, #24]
 8003840:	43da      	mvns	r2, r3
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	4013      	ands	r3, r2
 8003846:	b29b      	uxth	r3, r3
 8003848:	2b00      	cmp	r3, #0
 800384a:	bf14      	ite	ne
 800384c:	2301      	movne	r3, #1
 800384e:	2300      	moveq	r3, #0
 8003850:	b2db      	uxtb	r3, r3
 8003852:	2b00      	cmp	r3, #0
 8003854:	d18d      	bne.n	8003772 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003856:	2300      	movs	r3, #0
}
 8003858:	4618      	mov	r0, r3
 800385a:	3710      	adds	r7, #16
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800386c:	e02d      	b.n	80038ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800386e:	68f8      	ldr	r0, [r7, #12]
 8003870:	f000 f8ce 	bl	8003a10 <I2C_IsAcknowledgeFailed>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d001      	beq.n	800387e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e02d      	b.n	80038da <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003884:	d021      	beq.n	80038ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003886:	f7fe fe89 	bl	800259c <HAL_GetTick>
 800388a:	4602      	mov	r2, r0
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	1ad3      	subs	r3, r2, r3
 8003890:	68ba      	ldr	r2, [r7, #8]
 8003892:	429a      	cmp	r2, r3
 8003894:	d302      	bcc.n	800389c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d116      	bne.n	80038ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2200      	movs	r2, #0
 80038a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2220      	movs	r2, #32
 80038a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2200      	movs	r2, #0
 80038ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b6:	f043 0220 	orr.w	r2, r3, #32
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2200      	movs	r2, #0
 80038c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e007      	b.n	80038da <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	695b      	ldr	r3, [r3, #20]
 80038d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038d4:	2b80      	cmp	r3, #128	; 0x80
 80038d6:	d1ca      	bne.n	800386e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3710      	adds	r7, #16
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}

080038e2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038e2:	b580      	push	{r7, lr}
 80038e4:	b084      	sub	sp, #16
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	60f8      	str	r0, [r7, #12]
 80038ea:	60b9      	str	r1, [r7, #8]
 80038ec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80038ee:	e02d      	b.n	800394c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80038f0:	68f8      	ldr	r0, [r7, #12]
 80038f2:	f000 f88d 	bl	8003a10 <I2C_IsAcknowledgeFailed>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d001      	beq.n	8003900 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e02d      	b.n	800395c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003906:	d021      	beq.n	800394c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003908:	f7fe fe48 	bl	800259c <HAL_GetTick>
 800390c:	4602      	mov	r2, r0
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	68ba      	ldr	r2, [r7, #8]
 8003914:	429a      	cmp	r2, r3
 8003916:	d302      	bcc.n	800391e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d116      	bne.n	800394c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2200      	movs	r2, #0
 8003922:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2220      	movs	r2, #32
 8003928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2200      	movs	r2, #0
 8003930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003938:	f043 0220 	orr.w	r2, r3, #32
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2200      	movs	r2, #0
 8003944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e007      	b.n	800395c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	695b      	ldr	r3, [r3, #20]
 8003952:	f003 0304 	and.w	r3, r3, #4
 8003956:	2b04      	cmp	r3, #4
 8003958:	d1ca      	bne.n	80038f0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800395a:	2300      	movs	r3, #0
}
 800395c:	4618      	mov	r0, r3
 800395e:	3710      	adds	r7, #16
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}

08003964 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b084      	sub	sp, #16
 8003968:	af00      	add	r7, sp, #0
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	60b9      	str	r1, [r7, #8]
 800396e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003970:	e042      	b.n	80039f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	695b      	ldr	r3, [r3, #20]
 8003978:	f003 0310 	and.w	r3, r3, #16
 800397c:	2b10      	cmp	r3, #16
 800397e:	d119      	bne.n	80039b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f06f 0210 	mvn.w	r2, #16
 8003988:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2200      	movs	r2, #0
 800398e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2220      	movs	r2, #32
 8003994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2200      	movs	r2, #0
 800399c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2200      	movs	r2, #0
 80039ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e029      	b.n	8003a08 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039b4:	f7fe fdf2 	bl	800259c <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	68ba      	ldr	r2, [r7, #8]
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d302      	bcc.n	80039ca <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d116      	bne.n	80039f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2200      	movs	r2, #0
 80039ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2220      	movs	r2, #32
 80039d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2200      	movs	r2, #0
 80039dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e4:	f043 0220 	orr.w	r2, r3, #32
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e007      	b.n	8003a08 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	695b      	ldr	r3, [r3, #20]
 80039fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a02:	2b40      	cmp	r3, #64	; 0x40
 8003a04:	d1b5      	bne.n	8003972 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003a06:	2300      	movs	r3, #0
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3710      	adds	r7, #16
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b083      	sub	sp, #12
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	695b      	ldr	r3, [r3, #20]
 8003a1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a26:	d11b      	bne.n	8003a60 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a30:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2220      	movs	r2, #32
 8003a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4c:	f043 0204 	orr.w	r2, r3, #4
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e000      	b.n	8003a62 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	370c      	adds	r7, #12
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr
	...

08003a70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d101      	bne.n	8003a84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e0cc      	b.n	8003c1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a84:	4b68      	ldr	r3, [pc, #416]	; (8003c28 <HAL_RCC_ClockConfig+0x1b8>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 0307 	and.w	r3, r3, #7
 8003a8c:	683a      	ldr	r2, [r7, #0]
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d90c      	bls.n	8003aac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a92:	4b65      	ldr	r3, [pc, #404]	; (8003c28 <HAL_RCC_ClockConfig+0x1b8>)
 8003a94:	683a      	ldr	r2, [r7, #0]
 8003a96:	b2d2      	uxtb	r2, r2
 8003a98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a9a:	4b63      	ldr	r3, [pc, #396]	; (8003c28 <HAL_RCC_ClockConfig+0x1b8>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0307 	and.w	r3, r3, #7
 8003aa2:	683a      	ldr	r2, [r7, #0]
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d001      	beq.n	8003aac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e0b8      	b.n	8003c1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0302 	and.w	r3, r3, #2
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d020      	beq.n	8003afa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0304 	and.w	r3, r3, #4
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d005      	beq.n	8003ad0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ac4:	4b59      	ldr	r3, [pc, #356]	; (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	4a58      	ldr	r2, [pc, #352]	; (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003aca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ace:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0308 	and.w	r3, r3, #8
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d005      	beq.n	8003ae8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003adc:	4b53      	ldr	r3, [pc, #332]	; (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	4a52      	ldr	r2, [pc, #328]	; (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003ae2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ae6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ae8:	4b50      	ldr	r3, [pc, #320]	; (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	494d      	ldr	r1, [pc, #308]	; (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0301 	and.w	r3, r3, #1
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d044      	beq.n	8003b90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d107      	bne.n	8003b1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b0e:	4b47      	ldr	r3, [pc, #284]	; (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d119      	bne.n	8003b4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e07f      	b.n	8003c1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d003      	beq.n	8003b2e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b2a:	2b03      	cmp	r3, #3
 8003b2c:	d107      	bne.n	8003b3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b2e:	4b3f      	ldr	r3, [pc, #252]	; (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d109      	bne.n	8003b4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e06f      	b.n	8003c1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b3e:	4b3b      	ldr	r3, [pc, #236]	; (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 0302 	and.w	r3, r3, #2
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d101      	bne.n	8003b4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e067      	b.n	8003c1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b4e:	4b37      	ldr	r3, [pc, #220]	; (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	f023 0203 	bic.w	r2, r3, #3
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	4934      	ldr	r1, [pc, #208]	; (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b60:	f7fe fd1c 	bl	800259c <HAL_GetTick>
 8003b64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b66:	e00a      	b.n	8003b7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b68:	f7fe fd18 	bl	800259c <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d901      	bls.n	8003b7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e04f      	b.n	8003c1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b7e:	4b2b      	ldr	r3, [pc, #172]	; (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	f003 020c 	and.w	r2, r3, #12
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d1eb      	bne.n	8003b68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b90:	4b25      	ldr	r3, [pc, #148]	; (8003c28 <HAL_RCC_ClockConfig+0x1b8>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0307 	and.w	r3, r3, #7
 8003b98:	683a      	ldr	r2, [r7, #0]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d20c      	bcs.n	8003bb8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b9e:	4b22      	ldr	r3, [pc, #136]	; (8003c28 <HAL_RCC_ClockConfig+0x1b8>)
 8003ba0:	683a      	ldr	r2, [r7, #0]
 8003ba2:	b2d2      	uxtb	r2, r2
 8003ba4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ba6:	4b20      	ldr	r3, [pc, #128]	; (8003c28 <HAL_RCC_ClockConfig+0x1b8>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0307 	and.w	r3, r3, #7
 8003bae:	683a      	ldr	r2, [r7, #0]
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d001      	beq.n	8003bb8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e032      	b.n	8003c1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0304 	and.w	r3, r3, #4
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d008      	beq.n	8003bd6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bc4:	4b19      	ldr	r3, [pc, #100]	; (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	4916      	ldr	r1, [pc, #88]	; (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0308 	and.w	r3, r3, #8
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d009      	beq.n	8003bf6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003be2:	4b12      	ldr	r3, [pc, #72]	; (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	691b      	ldr	r3, [r3, #16]
 8003bee:	00db      	lsls	r3, r3, #3
 8003bf0:	490e      	ldr	r1, [pc, #56]	; (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003bf6:	f000 f821 	bl	8003c3c <HAL_RCC_GetSysClockFreq>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	4b0b      	ldr	r3, [pc, #44]	; (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	091b      	lsrs	r3, r3, #4
 8003c02:	f003 030f 	and.w	r3, r3, #15
 8003c06:	490a      	ldr	r1, [pc, #40]	; (8003c30 <HAL_RCC_ClockConfig+0x1c0>)
 8003c08:	5ccb      	ldrb	r3, [r1, r3]
 8003c0a:	fa22 f303 	lsr.w	r3, r2, r3
 8003c0e:	4a09      	ldr	r2, [pc, #36]	; (8003c34 <HAL_RCC_ClockConfig+0x1c4>)
 8003c10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003c12:	4b09      	ldr	r3, [pc, #36]	; (8003c38 <HAL_RCC_ClockConfig+0x1c8>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4618      	mov	r0, r3
 8003c18:	f7fe fc7c 	bl	8002514 <HAL_InitTick>

  return HAL_OK;
 8003c1c:	2300      	movs	r3, #0
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3710      	adds	r7, #16
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	40023c00 	.word	0x40023c00
 8003c2c:	40023800 	.word	0x40023800
 8003c30:	080054dc 	.word	0x080054dc
 8003c34:	20000008 	.word	0x20000008
 8003c38:	2000000c 	.word	0x2000000c

08003c3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c40:	b090      	sub	sp, #64	; 0x40
 8003c42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003c44:	2300      	movs	r3, #0
 8003c46:	637b      	str	r3, [r7, #52]	; 0x34
 8003c48:	2300      	movs	r3, #0
 8003c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003c50:	2300      	movs	r3, #0
 8003c52:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c54:	4b59      	ldr	r3, [pc, #356]	; (8003dbc <HAL_RCC_GetSysClockFreq+0x180>)
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	f003 030c 	and.w	r3, r3, #12
 8003c5c:	2b08      	cmp	r3, #8
 8003c5e:	d00d      	beq.n	8003c7c <HAL_RCC_GetSysClockFreq+0x40>
 8003c60:	2b08      	cmp	r3, #8
 8003c62:	f200 80a1 	bhi.w	8003da8 <HAL_RCC_GetSysClockFreq+0x16c>
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d002      	beq.n	8003c70 <HAL_RCC_GetSysClockFreq+0x34>
 8003c6a:	2b04      	cmp	r3, #4
 8003c6c:	d003      	beq.n	8003c76 <HAL_RCC_GetSysClockFreq+0x3a>
 8003c6e:	e09b      	b.n	8003da8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c70:	4b53      	ldr	r3, [pc, #332]	; (8003dc0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003c72:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003c74:	e09b      	b.n	8003dae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c76:	4b53      	ldr	r3, [pc, #332]	; (8003dc4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c78:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003c7a:	e098      	b.n	8003dae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c7c:	4b4f      	ldr	r3, [pc, #316]	; (8003dbc <HAL_RCC_GetSysClockFreq+0x180>)
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c84:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c86:	4b4d      	ldr	r3, [pc, #308]	; (8003dbc <HAL_RCC_GetSysClockFreq+0x180>)
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d028      	beq.n	8003ce4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c92:	4b4a      	ldr	r3, [pc, #296]	; (8003dbc <HAL_RCC_GetSysClockFreq+0x180>)
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	099b      	lsrs	r3, r3, #6
 8003c98:	2200      	movs	r2, #0
 8003c9a:	623b      	str	r3, [r7, #32]
 8003c9c:	627a      	str	r2, [r7, #36]	; 0x24
 8003c9e:	6a3b      	ldr	r3, [r7, #32]
 8003ca0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003ca4:	2100      	movs	r1, #0
 8003ca6:	4b47      	ldr	r3, [pc, #284]	; (8003dc4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003ca8:	fb03 f201 	mul.w	r2, r3, r1
 8003cac:	2300      	movs	r3, #0
 8003cae:	fb00 f303 	mul.w	r3, r0, r3
 8003cb2:	4413      	add	r3, r2
 8003cb4:	4a43      	ldr	r2, [pc, #268]	; (8003dc4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003cb6:	fba0 1202 	umull	r1, r2, r0, r2
 8003cba:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003cbc:	460a      	mov	r2, r1
 8003cbe:	62ba      	str	r2, [r7, #40]	; 0x28
 8003cc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cc2:	4413      	add	r3, r2
 8003cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cc8:	2200      	movs	r2, #0
 8003cca:	61bb      	str	r3, [r7, #24]
 8003ccc:	61fa      	str	r2, [r7, #28]
 8003cce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003cd2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003cd6:	f7fc fd3f 	bl	8000758 <__aeabi_uldivmod>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	460b      	mov	r3, r1
 8003cde:	4613      	mov	r3, r2
 8003ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ce2:	e053      	b.n	8003d8c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ce4:	4b35      	ldr	r3, [pc, #212]	; (8003dbc <HAL_RCC_GetSysClockFreq+0x180>)
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	099b      	lsrs	r3, r3, #6
 8003cea:	2200      	movs	r2, #0
 8003cec:	613b      	str	r3, [r7, #16]
 8003cee:	617a      	str	r2, [r7, #20]
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003cf6:	f04f 0b00 	mov.w	fp, #0
 8003cfa:	4652      	mov	r2, sl
 8003cfc:	465b      	mov	r3, fp
 8003cfe:	f04f 0000 	mov.w	r0, #0
 8003d02:	f04f 0100 	mov.w	r1, #0
 8003d06:	0159      	lsls	r1, r3, #5
 8003d08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d0c:	0150      	lsls	r0, r2, #5
 8003d0e:	4602      	mov	r2, r0
 8003d10:	460b      	mov	r3, r1
 8003d12:	ebb2 080a 	subs.w	r8, r2, sl
 8003d16:	eb63 090b 	sbc.w	r9, r3, fp
 8003d1a:	f04f 0200 	mov.w	r2, #0
 8003d1e:	f04f 0300 	mov.w	r3, #0
 8003d22:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003d26:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003d2a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003d2e:	ebb2 0408 	subs.w	r4, r2, r8
 8003d32:	eb63 0509 	sbc.w	r5, r3, r9
 8003d36:	f04f 0200 	mov.w	r2, #0
 8003d3a:	f04f 0300 	mov.w	r3, #0
 8003d3e:	00eb      	lsls	r3, r5, #3
 8003d40:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d44:	00e2      	lsls	r2, r4, #3
 8003d46:	4614      	mov	r4, r2
 8003d48:	461d      	mov	r5, r3
 8003d4a:	eb14 030a 	adds.w	r3, r4, sl
 8003d4e:	603b      	str	r3, [r7, #0]
 8003d50:	eb45 030b 	adc.w	r3, r5, fp
 8003d54:	607b      	str	r3, [r7, #4]
 8003d56:	f04f 0200 	mov.w	r2, #0
 8003d5a:	f04f 0300 	mov.w	r3, #0
 8003d5e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d62:	4629      	mov	r1, r5
 8003d64:	028b      	lsls	r3, r1, #10
 8003d66:	4621      	mov	r1, r4
 8003d68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d6c:	4621      	mov	r1, r4
 8003d6e:	028a      	lsls	r2, r1, #10
 8003d70:	4610      	mov	r0, r2
 8003d72:	4619      	mov	r1, r3
 8003d74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d76:	2200      	movs	r2, #0
 8003d78:	60bb      	str	r3, [r7, #8]
 8003d7a:	60fa      	str	r2, [r7, #12]
 8003d7c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d80:	f7fc fcea 	bl	8000758 <__aeabi_uldivmod>
 8003d84:	4602      	mov	r2, r0
 8003d86:	460b      	mov	r3, r1
 8003d88:	4613      	mov	r3, r2
 8003d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d8c:	4b0b      	ldr	r3, [pc, #44]	; (8003dbc <HAL_RCC_GetSysClockFreq+0x180>)
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	0c1b      	lsrs	r3, r3, #16
 8003d92:	f003 0303 	and.w	r3, r3, #3
 8003d96:	3301      	adds	r3, #1
 8003d98:	005b      	lsls	r3, r3, #1
 8003d9a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003d9c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003da0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003da4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003da6:	e002      	b.n	8003dae <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003da8:	4b05      	ldr	r3, [pc, #20]	; (8003dc0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003daa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003dac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3740      	adds	r7, #64	; 0x40
 8003db4:	46bd      	mov	sp, r7
 8003db6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003dba:	bf00      	nop
 8003dbc:	40023800 	.word	0x40023800
 8003dc0:	00f42400 	.word	0x00f42400
 8003dc4:	017d7840 	.word	0x017d7840

08003dc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003dcc:	4b03      	ldr	r3, [pc, #12]	; (8003ddc <HAL_RCC_GetHCLKFreq+0x14>)
 8003dce:	681b      	ldr	r3, [r3, #0]
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr
 8003dda:	bf00      	nop
 8003ddc:	20000008 	.word	0x20000008

08003de0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003de4:	f7ff fff0 	bl	8003dc8 <HAL_RCC_GetHCLKFreq>
 8003de8:	4602      	mov	r2, r0
 8003dea:	4b05      	ldr	r3, [pc, #20]	; (8003e00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	0a9b      	lsrs	r3, r3, #10
 8003df0:	f003 0307 	and.w	r3, r3, #7
 8003df4:	4903      	ldr	r1, [pc, #12]	; (8003e04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003df6:	5ccb      	ldrb	r3, [r1, r3]
 8003df8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	40023800 	.word	0x40023800
 8003e04:	080054ec 	.word	0x080054ec

08003e08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003e0c:	f7ff ffdc 	bl	8003dc8 <HAL_RCC_GetHCLKFreq>
 8003e10:	4602      	mov	r2, r0
 8003e12:	4b05      	ldr	r3, [pc, #20]	; (8003e28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	0b5b      	lsrs	r3, r3, #13
 8003e18:	f003 0307 	and.w	r3, r3, #7
 8003e1c:	4903      	ldr	r1, [pc, #12]	; (8003e2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e1e:	5ccb      	ldrb	r3, [r1, r3]
 8003e20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	40023800 	.word	0x40023800
 8003e2c:	080054ec 	.word	0x080054ec

08003e30 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b086      	sub	sp, #24
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d101      	bne.n	8003e42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e273      	b.n	800432a <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 0301 	and.w	r3, r3, #1
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d075      	beq.n	8003f3a <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003e4e:	4b88      	ldr	r3, [pc, #544]	; (8004070 <HAL_RCC_OscConfig+0x240>)
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	f003 030c 	and.w	r3, r3, #12
 8003e56:	2b04      	cmp	r3, #4
 8003e58:	d00c      	beq.n	8003e74 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e5a:	4b85      	ldr	r3, [pc, #532]	; (8004070 <HAL_RCC_OscConfig+0x240>)
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003e62:	2b08      	cmp	r3, #8
 8003e64:	d112      	bne.n	8003e8c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e66:	4b82      	ldr	r3, [pc, #520]	; (8004070 <HAL_RCC_OscConfig+0x240>)
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e72:	d10b      	bne.n	8003e8c <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e74:	4b7e      	ldr	r3, [pc, #504]	; (8004070 <HAL_RCC_OscConfig+0x240>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d05b      	beq.n	8003f38 <HAL_RCC_OscConfig+0x108>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d157      	bne.n	8003f38 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e24e      	b.n	800432a <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e94:	d106      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x74>
 8003e96:	4b76      	ldr	r3, [pc, #472]	; (8004070 <HAL_RCC_OscConfig+0x240>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a75      	ldr	r2, [pc, #468]	; (8004070 <HAL_RCC_OscConfig+0x240>)
 8003e9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ea0:	6013      	str	r3, [r2, #0]
 8003ea2:	e01d      	b.n	8003ee0 <HAL_RCC_OscConfig+0xb0>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003eac:	d10c      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x98>
 8003eae:	4b70      	ldr	r3, [pc, #448]	; (8004070 <HAL_RCC_OscConfig+0x240>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a6f      	ldr	r2, [pc, #444]	; (8004070 <HAL_RCC_OscConfig+0x240>)
 8003eb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003eb8:	6013      	str	r3, [r2, #0]
 8003eba:	4b6d      	ldr	r3, [pc, #436]	; (8004070 <HAL_RCC_OscConfig+0x240>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a6c      	ldr	r2, [pc, #432]	; (8004070 <HAL_RCC_OscConfig+0x240>)
 8003ec0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ec4:	6013      	str	r3, [r2, #0]
 8003ec6:	e00b      	b.n	8003ee0 <HAL_RCC_OscConfig+0xb0>
 8003ec8:	4b69      	ldr	r3, [pc, #420]	; (8004070 <HAL_RCC_OscConfig+0x240>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a68      	ldr	r2, [pc, #416]	; (8004070 <HAL_RCC_OscConfig+0x240>)
 8003ece:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ed2:	6013      	str	r3, [r2, #0]
 8003ed4:	4b66      	ldr	r3, [pc, #408]	; (8004070 <HAL_RCC_OscConfig+0x240>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a65      	ldr	r2, [pc, #404]	; (8004070 <HAL_RCC_OscConfig+0x240>)
 8003eda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ede:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d013      	beq.n	8003f10 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ee8:	f7fe fb58 	bl	800259c <HAL_GetTick>
 8003eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eee:	e008      	b.n	8003f02 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ef0:	f7fe fb54 	bl	800259c <HAL_GetTick>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	2b64      	cmp	r3, #100	; 0x64
 8003efc:	d901      	bls.n	8003f02 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e213      	b.n	800432a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f02:	4b5b      	ldr	r3, [pc, #364]	; (8004070 <HAL_RCC_OscConfig+0x240>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d0f0      	beq.n	8003ef0 <HAL_RCC_OscConfig+0xc0>
 8003f0e:	e014      	b.n	8003f3a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f10:	f7fe fb44 	bl	800259c <HAL_GetTick>
 8003f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f16:	e008      	b.n	8003f2a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f18:	f7fe fb40 	bl	800259c <HAL_GetTick>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	2b64      	cmp	r3, #100	; 0x64
 8003f24:	d901      	bls.n	8003f2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f26:	2303      	movs	r3, #3
 8003f28:	e1ff      	b.n	800432a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f2a:	4b51      	ldr	r3, [pc, #324]	; (8004070 <HAL_RCC_OscConfig+0x240>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d1f0      	bne.n	8003f18 <HAL_RCC_OscConfig+0xe8>
 8003f36:	e000      	b.n	8003f3a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 0302 	and.w	r3, r3, #2
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d063      	beq.n	800400e <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003f46:	4b4a      	ldr	r3, [pc, #296]	; (8004070 <HAL_RCC_OscConfig+0x240>)
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	f003 030c 	and.w	r3, r3, #12
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d00b      	beq.n	8003f6a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f52:	4b47      	ldr	r3, [pc, #284]	; (8004070 <HAL_RCC_OscConfig+0x240>)
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003f5a:	2b08      	cmp	r3, #8
 8003f5c:	d11c      	bne.n	8003f98 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f5e:	4b44      	ldr	r3, [pc, #272]	; (8004070 <HAL_RCC_OscConfig+0x240>)
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d116      	bne.n	8003f98 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f6a:	4b41      	ldr	r3, [pc, #260]	; (8004070 <HAL_RCC_OscConfig+0x240>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0302 	and.w	r3, r3, #2
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d005      	beq.n	8003f82 <HAL_RCC_OscConfig+0x152>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d001      	beq.n	8003f82 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e1d3      	b.n	800432a <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f82:	4b3b      	ldr	r3, [pc, #236]	; (8004070 <HAL_RCC_OscConfig+0x240>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	691b      	ldr	r3, [r3, #16]
 8003f8e:	00db      	lsls	r3, r3, #3
 8003f90:	4937      	ldr	r1, [pc, #220]	; (8004070 <HAL_RCC_OscConfig+0x240>)
 8003f92:	4313      	orrs	r3, r2
 8003f94:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f96:	e03a      	b.n	800400e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d020      	beq.n	8003fe2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fa0:	4b34      	ldr	r3, [pc, #208]	; (8004074 <HAL_RCC_OscConfig+0x244>)
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fa6:	f7fe faf9 	bl	800259c <HAL_GetTick>
 8003faa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fac:	e008      	b.n	8003fc0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fae:	f7fe faf5 	bl	800259c <HAL_GetTick>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	1ad3      	subs	r3, r2, r3
 8003fb8:	2b02      	cmp	r3, #2
 8003fba:	d901      	bls.n	8003fc0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003fbc:	2303      	movs	r3, #3
 8003fbe:	e1b4      	b.n	800432a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fc0:	4b2b      	ldr	r3, [pc, #172]	; (8004070 <HAL_RCC_OscConfig+0x240>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 0302 	and.w	r3, r3, #2
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d0f0      	beq.n	8003fae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fcc:	4b28      	ldr	r3, [pc, #160]	; (8004070 <HAL_RCC_OscConfig+0x240>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	691b      	ldr	r3, [r3, #16]
 8003fd8:	00db      	lsls	r3, r3, #3
 8003fda:	4925      	ldr	r1, [pc, #148]	; (8004070 <HAL_RCC_OscConfig+0x240>)
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	600b      	str	r3, [r1, #0]
 8003fe0:	e015      	b.n	800400e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fe2:	4b24      	ldr	r3, [pc, #144]	; (8004074 <HAL_RCC_OscConfig+0x244>)
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fe8:	f7fe fad8 	bl	800259c <HAL_GetTick>
 8003fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fee:	e008      	b.n	8004002 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ff0:	f7fe fad4 	bl	800259c <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	2b02      	cmp	r3, #2
 8003ffc:	d901      	bls.n	8004002 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e193      	b.n	800432a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004002:	4b1b      	ldr	r3, [pc, #108]	; (8004070 <HAL_RCC_OscConfig+0x240>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0302 	and.w	r3, r3, #2
 800400a:	2b00      	cmp	r3, #0
 800400c:	d1f0      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 0308 	and.w	r3, r3, #8
 8004016:	2b00      	cmp	r3, #0
 8004018:	d036      	beq.n	8004088 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	695b      	ldr	r3, [r3, #20]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d016      	beq.n	8004050 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004022:	4b15      	ldr	r3, [pc, #84]	; (8004078 <HAL_RCC_OscConfig+0x248>)
 8004024:	2201      	movs	r2, #1
 8004026:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004028:	f7fe fab8 	bl	800259c <HAL_GetTick>
 800402c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800402e:	e008      	b.n	8004042 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004030:	f7fe fab4 	bl	800259c <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	2b02      	cmp	r3, #2
 800403c:	d901      	bls.n	8004042 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	e173      	b.n	800432a <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004042:	4b0b      	ldr	r3, [pc, #44]	; (8004070 <HAL_RCC_OscConfig+0x240>)
 8004044:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004046:	f003 0302 	and.w	r3, r3, #2
 800404a:	2b00      	cmp	r3, #0
 800404c:	d0f0      	beq.n	8004030 <HAL_RCC_OscConfig+0x200>
 800404e:	e01b      	b.n	8004088 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004050:	4b09      	ldr	r3, [pc, #36]	; (8004078 <HAL_RCC_OscConfig+0x248>)
 8004052:	2200      	movs	r2, #0
 8004054:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004056:	f7fe faa1 	bl	800259c <HAL_GetTick>
 800405a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800405c:	e00e      	b.n	800407c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800405e:	f7fe fa9d 	bl	800259c <HAL_GetTick>
 8004062:	4602      	mov	r2, r0
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	2b02      	cmp	r3, #2
 800406a:	d907      	bls.n	800407c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800406c:	2303      	movs	r3, #3
 800406e:	e15c      	b.n	800432a <HAL_RCC_OscConfig+0x4fa>
 8004070:	40023800 	.word	0x40023800
 8004074:	42470000 	.word	0x42470000
 8004078:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800407c:	4b8a      	ldr	r3, [pc, #552]	; (80042a8 <HAL_RCC_OscConfig+0x478>)
 800407e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004080:	f003 0302 	and.w	r3, r3, #2
 8004084:	2b00      	cmp	r3, #0
 8004086:	d1ea      	bne.n	800405e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 0304 	and.w	r3, r3, #4
 8004090:	2b00      	cmp	r3, #0
 8004092:	f000 8097 	beq.w	80041c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004096:	2300      	movs	r3, #0
 8004098:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800409a:	4b83      	ldr	r3, [pc, #524]	; (80042a8 <HAL_RCC_OscConfig+0x478>)
 800409c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d10f      	bne.n	80040c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040a6:	2300      	movs	r3, #0
 80040a8:	60bb      	str	r3, [r7, #8]
 80040aa:	4b7f      	ldr	r3, [pc, #508]	; (80042a8 <HAL_RCC_OscConfig+0x478>)
 80040ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ae:	4a7e      	ldr	r2, [pc, #504]	; (80042a8 <HAL_RCC_OscConfig+0x478>)
 80040b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040b4:	6413      	str	r3, [r2, #64]	; 0x40
 80040b6:	4b7c      	ldr	r3, [pc, #496]	; (80042a8 <HAL_RCC_OscConfig+0x478>)
 80040b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040be:	60bb      	str	r3, [r7, #8]
 80040c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040c2:	2301      	movs	r3, #1
 80040c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040c6:	4b79      	ldr	r3, [pc, #484]	; (80042ac <HAL_RCC_OscConfig+0x47c>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d118      	bne.n	8004104 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040d2:	4b76      	ldr	r3, [pc, #472]	; (80042ac <HAL_RCC_OscConfig+0x47c>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a75      	ldr	r2, [pc, #468]	; (80042ac <HAL_RCC_OscConfig+0x47c>)
 80040d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040de:	f7fe fa5d 	bl	800259c <HAL_GetTick>
 80040e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040e4:	e008      	b.n	80040f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040e6:	f7fe fa59 	bl	800259c <HAL_GetTick>
 80040ea:	4602      	mov	r2, r0
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	1ad3      	subs	r3, r2, r3
 80040f0:	2b02      	cmp	r3, #2
 80040f2:	d901      	bls.n	80040f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80040f4:	2303      	movs	r3, #3
 80040f6:	e118      	b.n	800432a <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040f8:	4b6c      	ldr	r3, [pc, #432]	; (80042ac <HAL_RCC_OscConfig+0x47c>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004100:	2b00      	cmp	r3, #0
 8004102:	d0f0      	beq.n	80040e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	2b01      	cmp	r3, #1
 800410a:	d106      	bne.n	800411a <HAL_RCC_OscConfig+0x2ea>
 800410c:	4b66      	ldr	r3, [pc, #408]	; (80042a8 <HAL_RCC_OscConfig+0x478>)
 800410e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004110:	4a65      	ldr	r2, [pc, #404]	; (80042a8 <HAL_RCC_OscConfig+0x478>)
 8004112:	f043 0301 	orr.w	r3, r3, #1
 8004116:	6713      	str	r3, [r2, #112]	; 0x70
 8004118:	e01c      	b.n	8004154 <HAL_RCC_OscConfig+0x324>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	2b05      	cmp	r3, #5
 8004120:	d10c      	bne.n	800413c <HAL_RCC_OscConfig+0x30c>
 8004122:	4b61      	ldr	r3, [pc, #388]	; (80042a8 <HAL_RCC_OscConfig+0x478>)
 8004124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004126:	4a60      	ldr	r2, [pc, #384]	; (80042a8 <HAL_RCC_OscConfig+0x478>)
 8004128:	f043 0304 	orr.w	r3, r3, #4
 800412c:	6713      	str	r3, [r2, #112]	; 0x70
 800412e:	4b5e      	ldr	r3, [pc, #376]	; (80042a8 <HAL_RCC_OscConfig+0x478>)
 8004130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004132:	4a5d      	ldr	r2, [pc, #372]	; (80042a8 <HAL_RCC_OscConfig+0x478>)
 8004134:	f043 0301 	orr.w	r3, r3, #1
 8004138:	6713      	str	r3, [r2, #112]	; 0x70
 800413a:	e00b      	b.n	8004154 <HAL_RCC_OscConfig+0x324>
 800413c:	4b5a      	ldr	r3, [pc, #360]	; (80042a8 <HAL_RCC_OscConfig+0x478>)
 800413e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004140:	4a59      	ldr	r2, [pc, #356]	; (80042a8 <HAL_RCC_OscConfig+0x478>)
 8004142:	f023 0301 	bic.w	r3, r3, #1
 8004146:	6713      	str	r3, [r2, #112]	; 0x70
 8004148:	4b57      	ldr	r3, [pc, #348]	; (80042a8 <HAL_RCC_OscConfig+0x478>)
 800414a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800414c:	4a56      	ldr	r2, [pc, #344]	; (80042a8 <HAL_RCC_OscConfig+0x478>)
 800414e:	f023 0304 	bic.w	r3, r3, #4
 8004152:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d015      	beq.n	8004188 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800415c:	f7fe fa1e 	bl	800259c <HAL_GetTick>
 8004160:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004162:	e00a      	b.n	800417a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004164:	f7fe fa1a 	bl	800259c <HAL_GetTick>
 8004168:	4602      	mov	r2, r0
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004172:	4293      	cmp	r3, r2
 8004174:	d901      	bls.n	800417a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	e0d7      	b.n	800432a <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800417a:	4b4b      	ldr	r3, [pc, #300]	; (80042a8 <HAL_RCC_OscConfig+0x478>)
 800417c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800417e:	f003 0302 	and.w	r3, r3, #2
 8004182:	2b00      	cmp	r3, #0
 8004184:	d0ee      	beq.n	8004164 <HAL_RCC_OscConfig+0x334>
 8004186:	e014      	b.n	80041b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004188:	f7fe fa08 	bl	800259c <HAL_GetTick>
 800418c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800418e:	e00a      	b.n	80041a6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004190:	f7fe fa04 	bl	800259c <HAL_GetTick>
 8004194:	4602      	mov	r2, r0
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	f241 3288 	movw	r2, #5000	; 0x1388
 800419e:	4293      	cmp	r3, r2
 80041a0:	d901      	bls.n	80041a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	e0c1      	b.n	800432a <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041a6:	4b40      	ldr	r3, [pc, #256]	; (80042a8 <HAL_RCC_OscConfig+0x478>)
 80041a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041aa:	f003 0302 	and.w	r3, r3, #2
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d1ee      	bne.n	8004190 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80041b2:	7dfb      	ldrb	r3, [r7, #23]
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d105      	bne.n	80041c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041b8:	4b3b      	ldr	r3, [pc, #236]	; (80042a8 <HAL_RCC_OscConfig+0x478>)
 80041ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041bc:	4a3a      	ldr	r2, [pc, #232]	; (80042a8 <HAL_RCC_OscConfig+0x478>)
 80041be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041c2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	699b      	ldr	r3, [r3, #24]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	f000 80ad 	beq.w	8004328 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80041ce:	4b36      	ldr	r3, [pc, #216]	; (80042a8 <HAL_RCC_OscConfig+0x478>)
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	f003 030c 	and.w	r3, r3, #12
 80041d6:	2b08      	cmp	r3, #8
 80041d8:	d060      	beq.n	800429c <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	699b      	ldr	r3, [r3, #24]
 80041de:	2b02      	cmp	r3, #2
 80041e0:	d145      	bne.n	800426e <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041e2:	4b33      	ldr	r3, [pc, #204]	; (80042b0 <HAL_RCC_OscConfig+0x480>)
 80041e4:	2200      	movs	r2, #0
 80041e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041e8:	f7fe f9d8 	bl	800259c <HAL_GetTick>
 80041ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041ee:	e008      	b.n	8004202 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041f0:	f7fe f9d4 	bl	800259c <HAL_GetTick>
 80041f4:	4602      	mov	r2, r0
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	2b02      	cmp	r3, #2
 80041fc:	d901      	bls.n	8004202 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	e093      	b.n	800432a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004202:	4b29      	ldr	r3, [pc, #164]	; (80042a8 <HAL_RCC_OscConfig+0x478>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800420a:	2b00      	cmp	r3, #0
 800420c:	d1f0      	bne.n	80041f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	69da      	ldr	r2, [r3, #28]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6a1b      	ldr	r3, [r3, #32]
 8004216:	431a      	orrs	r2, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421c:	019b      	lsls	r3, r3, #6
 800421e:	431a      	orrs	r2, r3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004224:	085b      	lsrs	r3, r3, #1
 8004226:	3b01      	subs	r3, #1
 8004228:	041b      	lsls	r3, r3, #16
 800422a:	431a      	orrs	r2, r3
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004230:	061b      	lsls	r3, r3, #24
 8004232:	431a      	orrs	r2, r3
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004238:	071b      	lsls	r3, r3, #28
 800423a:	491b      	ldr	r1, [pc, #108]	; (80042a8 <HAL_RCC_OscConfig+0x478>)
 800423c:	4313      	orrs	r3, r2
 800423e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004240:	4b1b      	ldr	r3, [pc, #108]	; (80042b0 <HAL_RCC_OscConfig+0x480>)
 8004242:	2201      	movs	r2, #1
 8004244:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004246:	f7fe f9a9 	bl	800259c <HAL_GetTick>
 800424a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800424c:	e008      	b.n	8004260 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800424e:	f7fe f9a5 	bl	800259c <HAL_GetTick>
 8004252:	4602      	mov	r2, r0
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	2b02      	cmp	r3, #2
 800425a:	d901      	bls.n	8004260 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 800425c:	2303      	movs	r3, #3
 800425e:	e064      	b.n	800432a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004260:	4b11      	ldr	r3, [pc, #68]	; (80042a8 <HAL_RCC_OscConfig+0x478>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004268:	2b00      	cmp	r3, #0
 800426a:	d0f0      	beq.n	800424e <HAL_RCC_OscConfig+0x41e>
 800426c:	e05c      	b.n	8004328 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800426e:	4b10      	ldr	r3, [pc, #64]	; (80042b0 <HAL_RCC_OscConfig+0x480>)
 8004270:	2200      	movs	r2, #0
 8004272:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004274:	f7fe f992 	bl	800259c <HAL_GetTick>
 8004278:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800427a:	e008      	b.n	800428e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800427c:	f7fe f98e 	bl	800259c <HAL_GetTick>
 8004280:	4602      	mov	r2, r0
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	2b02      	cmp	r3, #2
 8004288:	d901      	bls.n	800428e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	e04d      	b.n	800432a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800428e:	4b06      	ldr	r3, [pc, #24]	; (80042a8 <HAL_RCC_OscConfig+0x478>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004296:	2b00      	cmp	r3, #0
 8004298:	d1f0      	bne.n	800427c <HAL_RCC_OscConfig+0x44c>
 800429a:	e045      	b.n	8004328 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	699b      	ldr	r3, [r3, #24]
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d107      	bne.n	80042b4 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	e040      	b.n	800432a <HAL_RCC_OscConfig+0x4fa>
 80042a8:	40023800 	.word	0x40023800
 80042ac:	40007000 	.word	0x40007000
 80042b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80042b4:	4b1f      	ldr	r3, [pc, #124]	; (8004334 <HAL_RCC_OscConfig+0x504>)
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	699b      	ldr	r3, [r3, #24]
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d030      	beq.n	8004324 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d129      	bne.n	8004324 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042da:	429a      	cmp	r2, r3
 80042dc:	d122      	bne.n	8004324 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042de:	68fa      	ldr	r2, [r7, #12]
 80042e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80042e4:	4013      	ands	r3, r2
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80042ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d119      	bne.n	8004324 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042fa:	085b      	lsrs	r3, r3, #1
 80042fc:	3b01      	subs	r3, #1
 80042fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004300:	429a      	cmp	r2, r3
 8004302:	d10f      	bne.n	8004324 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800430e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004310:	429a      	cmp	r2, r3
 8004312:	d107      	bne.n	8004324 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800431e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004320:	429a      	cmp	r2, r3
 8004322:	d001      	beq.n	8004328 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	e000      	b.n	800432a <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8004328:	2300      	movs	r3, #0
}
 800432a:	4618      	mov	r0, r3
 800432c:	3718      	adds	r7, #24
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
 8004332:	bf00      	nop
 8004334:	40023800 	.word	0x40023800

08004338 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b082      	sub	sp, #8
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d101      	bne.n	800434a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e03f      	b.n	80043ca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004350:	b2db      	uxtb	r3, r3
 8004352:	2b00      	cmp	r3, #0
 8004354:	d106      	bne.n	8004364 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f7fd ffd2 	bl	8002308 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2224      	movs	r2, #36	; 0x24
 8004368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	68da      	ldr	r2, [r3, #12]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800437a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f000 f929 	bl	80045d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	691a      	ldr	r2, [r3, #16]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004390:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	695a      	ldr	r2, [r3, #20]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	68da      	ldr	r2, [r3, #12]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2200      	movs	r2, #0
 80043b6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2220      	movs	r2, #32
 80043bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2220      	movs	r2, #32
 80043c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80043c8:	2300      	movs	r3, #0
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3708      	adds	r7, #8
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}

080043d2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043d2:	b580      	push	{r7, lr}
 80043d4:	b08a      	sub	sp, #40	; 0x28
 80043d6:	af02      	add	r7, sp, #8
 80043d8:	60f8      	str	r0, [r7, #12]
 80043da:	60b9      	str	r1, [r7, #8]
 80043dc:	603b      	str	r3, [r7, #0]
 80043de:	4613      	mov	r3, r2
 80043e0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80043e2:	2300      	movs	r3, #0
 80043e4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	2b20      	cmp	r3, #32
 80043f0:	d17c      	bne.n	80044ec <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d002      	beq.n	80043fe <HAL_UART_Transmit+0x2c>
 80043f8:	88fb      	ldrh	r3, [r7, #6]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d101      	bne.n	8004402 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e075      	b.n	80044ee <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004408:	2b01      	cmp	r3, #1
 800440a:	d101      	bne.n	8004410 <HAL_UART_Transmit+0x3e>
 800440c:	2302      	movs	r3, #2
 800440e:	e06e      	b.n	80044ee <HAL_UART_Transmit+0x11c>
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2201      	movs	r2, #1
 8004414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2200      	movs	r2, #0
 800441c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2221      	movs	r2, #33	; 0x21
 8004422:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004426:	f7fe f8b9 	bl	800259c <HAL_GetTick>
 800442a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	88fa      	ldrh	r2, [r7, #6]
 8004430:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	88fa      	ldrh	r2, [r7, #6]
 8004436:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004440:	d108      	bne.n	8004454 <HAL_UART_Transmit+0x82>
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d104      	bne.n	8004454 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800444a:	2300      	movs	r3, #0
 800444c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	61bb      	str	r3, [r7, #24]
 8004452:	e003      	b.n	800445c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004458:	2300      	movs	r3, #0
 800445a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2200      	movs	r2, #0
 8004460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004464:	e02a      	b.n	80044bc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	9300      	str	r3, [sp, #0]
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	2200      	movs	r2, #0
 800446e:	2180      	movs	r1, #128	; 0x80
 8004470:	68f8      	ldr	r0, [r7, #12]
 8004472:	f000 f840 	bl	80044f6 <UART_WaitOnFlagUntilTimeout>
 8004476:	4603      	mov	r3, r0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d001      	beq.n	8004480 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800447c:	2303      	movs	r3, #3
 800447e:	e036      	b.n	80044ee <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004480:	69fb      	ldr	r3, [r7, #28]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d10b      	bne.n	800449e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004486:	69bb      	ldr	r3, [r7, #24]
 8004488:	881b      	ldrh	r3, [r3, #0]
 800448a:	461a      	mov	r2, r3
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004494:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004496:	69bb      	ldr	r3, [r7, #24]
 8004498:	3302      	adds	r3, #2
 800449a:	61bb      	str	r3, [r7, #24]
 800449c:	e007      	b.n	80044ae <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800449e:	69fb      	ldr	r3, [r7, #28]
 80044a0:	781a      	ldrb	r2, [r3, #0]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80044a8:	69fb      	ldr	r3, [r7, #28]
 80044aa:	3301      	adds	r3, #1
 80044ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	3b01      	subs	r3, #1
 80044b6:	b29a      	uxth	r2, r3
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d1cf      	bne.n	8004466 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	9300      	str	r3, [sp, #0]
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	2200      	movs	r2, #0
 80044ce:	2140      	movs	r1, #64	; 0x40
 80044d0:	68f8      	ldr	r0, [r7, #12]
 80044d2:	f000 f810 	bl	80044f6 <UART_WaitOnFlagUntilTimeout>
 80044d6:	4603      	mov	r3, r0
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d001      	beq.n	80044e0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80044dc:	2303      	movs	r3, #3
 80044de:	e006      	b.n	80044ee <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2220      	movs	r2, #32
 80044e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80044e8:	2300      	movs	r3, #0
 80044ea:	e000      	b.n	80044ee <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80044ec:	2302      	movs	r3, #2
  }
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3720      	adds	r7, #32
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}

080044f6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80044f6:	b580      	push	{r7, lr}
 80044f8:	b090      	sub	sp, #64	; 0x40
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	60f8      	str	r0, [r7, #12]
 80044fe:	60b9      	str	r1, [r7, #8]
 8004500:	603b      	str	r3, [r7, #0]
 8004502:	4613      	mov	r3, r2
 8004504:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004506:	e050      	b.n	80045aa <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004508:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800450a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800450e:	d04c      	beq.n	80045aa <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004510:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004512:	2b00      	cmp	r3, #0
 8004514:	d007      	beq.n	8004526 <UART_WaitOnFlagUntilTimeout+0x30>
 8004516:	f7fe f841 	bl	800259c <HAL_GetTick>
 800451a:	4602      	mov	r2, r0
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	1ad3      	subs	r3, r2, r3
 8004520:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004522:	429a      	cmp	r2, r3
 8004524:	d241      	bcs.n	80045aa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	330c      	adds	r3, #12
 800452c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800452e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004530:	e853 3f00 	ldrex	r3, [r3]
 8004534:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004538:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800453c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	330c      	adds	r3, #12
 8004544:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004546:	637a      	str	r2, [r7, #52]	; 0x34
 8004548:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800454a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800454c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800454e:	e841 2300 	strex	r3, r2, [r1]
 8004552:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004556:	2b00      	cmp	r3, #0
 8004558:	d1e5      	bne.n	8004526 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	3314      	adds	r3, #20
 8004560:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	e853 3f00 	ldrex	r3, [r3]
 8004568:	613b      	str	r3, [r7, #16]
   return(result);
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	f023 0301 	bic.w	r3, r3, #1
 8004570:	63bb      	str	r3, [r7, #56]	; 0x38
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	3314      	adds	r3, #20
 8004578:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800457a:	623a      	str	r2, [r7, #32]
 800457c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800457e:	69f9      	ldr	r1, [r7, #28]
 8004580:	6a3a      	ldr	r2, [r7, #32]
 8004582:	e841 2300 	strex	r3, r2, [r1]
 8004586:	61bb      	str	r3, [r7, #24]
   return(result);
 8004588:	69bb      	ldr	r3, [r7, #24]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d1e5      	bne.n	800455a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2220      	movs	r2, #32
 8004592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2220      	movs	r2, #32
 800459a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2200      	movs	r2, #0
 80045a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80045a6:	2303      	movs	r3, #3
 80045a8:	e00f      	b.n	80045ca <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	4013      	ands	r3, r2
 80045b4:	68ba      	ldr	r2, [r7, #8]
 80045b6:	429a      	cmp	r2, r3
 80045b8:	bf0c      	ite	eq
 80045ba:	2301      	moveq	r3, #1
 80045bc:	2300      	movne	r3, #0
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	461a      	mov	r2, r3
 80045c2:	79fb      	ldrb	r3, [r7, #7]
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d09f      	beq.n	8004508 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80045c8:	2300      	movs	r3, #0
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3740      	adds	r7, #64	; 0x40
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
	...

080045d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045d8:	b0c0      	sub	sp, #256	; 0x100
 80045da:	af00      	add	r7, sp, #0
 80045dc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	691b      	ldr	r3, [r3, #16]
 80045e8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80045ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045f0:	68d9      	ldr	r1, [r3, #12]
 80045f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	ea40 0301 	orr.w	r3, r0, r1
 80045fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80045fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004602:	689a      	ldr	r2, [r3, #8]
 8004604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004608:	691b      	ldr	r3, [r3, #16]
 800460a:	431a      	orrs	r2, r3
 800460c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004610:	695b      	ldr	r3, [r3, #20]
 8004612:	431a      	orrs	r2, r3
 8004614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004618:	69db      	ldr	r3, [r3, #28]
 800461a:	4313      	orrs	r3, r2
 800461c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800462c:	f021 010c 	bic.w	r1, r1, #12
 8004630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800463a:	430b      	orrs	r3, r1
 800463c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800463e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	695b      	ldr	r3, [r3, #20]
 8004646:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800464a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800464e:	6999      	ldr	r1, [r3, #24]
 8004650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	ea40 0301 	orr.w	r3, r0, r1
 800465a:	6153      	str	r3, [r2, #20]


#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 800465c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	4b95      	ldr	r3, [pc, #596]	; (80048b8 <UART_SetConfig+0x2e4>)
 8004664:	429a      	cmp	r2, r3
 8004666:	d011      	beq.n	800468c <UART_SetConfig+0xb8>
 8004668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	4b93      	ldr	r3, [pc, #588]	; (80048bc <UART_SetConfig+0x2e8>)
 8004670:	429a      	cmp	r2, r3
 8004672:	d00b      	beq.n	800468c <UART_SetConfig+0xb8>
 8004674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	4b91      	ldr	r3, [pc, #580]	; (80048c0 <UART_SetConfig+0x2ec>)
 800467c:	429a      	cmp	r2, r3
 800467e:	d005      	beq.n	800468c <UART_SetConfig+0xb8>
 8004680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	4b8f      	ldr	r3, [pc, #572]	; (80048c4 <UART_SetConfig+0x2f0>)
 8004688:	429a      	cmp	r2, r3
 800468a:	d104      	bne.n	8004696 <UART_SetConfig+0xc2>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800468c:	f7ff fbbc 	bl	8003e08 <HAL_RCC_GetPCLK2Freq>
 8004690:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004694:	e003      	b.n	800469e <UART_SetConfig+0xca>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004696:	f7ff fba3 	bl	8003de0 <HAL_RCC_GetPCLK1Freq>
 800469a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800469e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046a2:	69db      	ldr	r3, [r3, #28]
 80046a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046a8:	f040 8110 	bne.w	80048cc <UART_SetConfig+0x2f8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80046ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046b0:	2200      	movs	r2, #0
 80046b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80046b6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80046ba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80046be:	4622      	mov	r2, r4
 80046c0:	462b      	mov	r3, r5
 80046c2:	1891      	adds	r1, r2, r2
 80046c4:	65b9      	str	r1, [r7, #88]	; 0x58
 80046c6:	415b      	adcs	r3, r3
 80046c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80046ca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80046ce:	4621      	mov	r1, r4
 80046d0:	eb12 0801 	adds.w	r8, r2, r1
 80046d4:	4629      	mov	r1, r5
 80046d6:	eb43 0901 	adc.w	r9, r3, r1
 80046da:	f04f 0200 	mov.w	r2, #0
 80046de:	f04f 0300 	mov.w	r3, #0
 80046e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80046e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80046ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80046ee:	4690      	mov	r8, r2
 80046f0:	4699      	mov	r9, r3
 80046f2:	4623      	mov	r3, r4
 80046f4:	eb18 0303 	adds.w	r3, r8, r3
 80046f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80046fc:	462b      	mov	r3, r5
 80046fe:	eb49 0303 	adc.w	r3, r9, r3
 8004702:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004706:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004712:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004716:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800471a:	460b      	mov	r3, r1
 800471c:	18db      	adds	r3, r3, r3
 800471e:	653b      	str	r3, [r7, #80]	; 0x50
 8004720:	4613      	mov	r3, r2
 8004722:	eb42 0303 	adc.w	r3, r2, r3
 8004726:	657b      	str	r3, [r7, #84]	; 0x54
 8004728:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800472c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004730:	f7fc f812 	bl	8000758 <__aeabi_uldivmod>
 8004734:	4602      	mov	r2, r0
 8004736:	460b      	mov	r3, r1
 8004738:	4b63      	ldr	r3, [pc, #396]	; (80048c8 <UART_SetConfig+0x2f4>)
 800473a:	fba3 2302 	umull	r2, r3, r3, r2
 800473e:	095b      	lsrs	r3, r3, #5
 8004740:	011c      	lsls	r4, r3, #4
 8004742:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004746:	2200      	movs	r2, #0
 8004748:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800474c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004750:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004754:	4642      	mov	r2, r8
 8004756:	464b      	mov	r3, r9
 8004758:	1891      	adds	r1, r2, r2
 800475a:	64b9      	str	r1, [r7, #72]	; 0x48
 800475c:	415b      	adcs	r3, r3
 800475e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004760:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004764:	4641      	mov	r1, r8
 8004766:	eb12 0a01 	adds.w	sl, r2, r1
 800476a:	4649      	mov	r1, r9
 800476c:	eb43 0b01 	adc.w	fp, r3, r1
 8004770:	f04f 0200 	mov.w	r2, #0
 8004774:	f04f 0300 	mov.w	r3, #0
 8004778:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800477c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004780:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004784:	4692      	mov	sl, r2
 8004786:	469b      	mov	fp, r3
 8004788:	4643      	mov	r3, r8
 800478a:	eb1a 0303 	adds.w	r3, sl, r3
 800478e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004792:	464b      	mov	r3, r9
 8004794:	eb4b 0303 	adc.w	r3, fp, r3
 8004798:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800479c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	2200      	movs	r2, #0
 80047a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80047a8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80047ac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80047b0:	460b      	mov	r3, r1
 80047b2:	18db      	adds	r3, r3, r3
 80047b4:	643b      	str	r3, [r7, #64]	; 0x40
 80047b6:	4613      	mov	r3, r2
 80047b8:	eb42 0303 	adc.w	r3, r2, r3
 80047bc:	647b      	str	r3, [r7, #68]	; 0x44
 80047be:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80047c2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80047c6:	f7fb ffc7 	bl	8000758 <__aeabi_uldivmod>
 80047ca:	4602      	mov	r2, r0
 80047cc:	460b      	mov	r3, r1
 80047ce:	4611      	mov	r1, r2
 80047d0:	4b3d      	ldr	r3, [pc, #244]	; (80048c8 <UART_SetConfig+0x2f4>)
 80047d2:	fba3 2301 	umull	r2, r3, r3, r1
 80047d6:	095b      	lsrs	r3, r3, #5
 80047d8:	2264      	movs	r2, #100	; 0x64
 80047da:	fb02 f303 	mul.w	r3, r2, r3
 80047de:	1acb      	subs	r3, r1, r3
 80047e0:	00db      	lsls	r3, r3, #3
 80047e2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80047e6:	4b38      	ldr	r3, [pc, #224]	; (80048c8 <UART_SetConfig+0x2f4>)
 80047e8:	fba3 2302 	umull	r2, r3, r3, r2
 80047ec:	095b      	lsrs	r3, r3, #5
 80047ee:	005b      	lsls	r3, r3, #1
 80047f0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80047f4:	441c      	add	r4, r3
 80047f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047fa:	2200      	movs	r2, #0
 80047fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004800:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004804:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004808:	4642      	mov	r2, r8
 800480a:	464b      	mov	r3, r9
 800480c:	1891      	adds	r1, r2, r2
 800480e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004810:	415b      	adcs	r3, r3
 8004812:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004814:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004818:	4641      	mov	r1, r8
 800481a:	1851      	adds	r1, r2, r1
 800481c:	6339      	str	r1, [r7, #48]	; 0x30
 800481e:	4649      	mov	r1, r9
 8004820:	414b      	adcs	r3, r1
 8004822:	637b      	str	r3, [r7, #52]	; 0x34
 8004824:	f04f 0200 	mov.w	r2, #0
 8004828:	f04f 0300 	mov.w	r3, #0
 800482c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004830:	4659      	mov	r1, fp
 8004832:	00cb      	lsls	r3, r1, #3
 8004834:	4651      	mov	r1, sl
 8004836:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800483a:	4651      	mov	r1, sl
 800483c:	00ca      	lsls	r2, r1, #3
 800483e:	4610      	mov	r0, r2
 8004840:	4619      	mov	r1, r3
 8004842:	4603      	mov	r3, r0
 8004844:	4642      	mov	r2, r8
 8004846:	189b      	adds	r3, r3, r2
 8004848:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800484c:	464b      	mov	r3, r9
 800484e:	460a      	mov	r2, r1
 8004850:	eb42 0303 	adc.w	r3, r2, r3
 8004854:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	2200      	movs	r2, #0
 8004860:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004864:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004868:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800486c:	460b      	mov	r3, r1
 800486e:	18db      	adds	r3, r3, r3
 8004870:	62bb      	str	r3, [r7, #40]	; 0x28
 8004872:	4613      	mov	r3, r2
 8004874:	eb42 0303 	adc.w	r3, r2, r3
 8004878:	62fb      	str	r3, [r7, #44]	; 0x2c
 800487a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800487e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004882:	f7fb ff69 	bl	8000758 <__aeabi_uldivmod>
 8004886:	4602      	mov	r2, r0
 8004888:	460b      	mov	r3, r1
 800488a:	4b0f      	ldr	r3, [pc, #60]	; (80048c8 <UART_SetConfig+0x2f4>)
 800488c:	fba3 1302 	umull	r1, r3, r3, r2
 8004890:	095b      	lsrs	r3, r3, #5
 8004892:	2164      	movs	r1, #100	; 0x64
 8004894:	fb01 f303 	mul.w	r3, r1, r3
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	00db      	lsls	r3, r3, #3
 800489c:	3332      	adds	r3, #50	; 0x32
 800489e:	4a0a      	ldr	r2, [pc, #40]	; (80048c8 <UART_SetConfig+0x2f4>)
 80048a0:	fba2 2303 	umull	r2, r3, r2, r3
 80048a4:	095b      	lsrs	r3, r3, #5
 80048a6:	f003 0207 	and.w	r2, r3, #7
 80048aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4422      	add	r2, r4
 80048b2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80048b4:	e109      	b.n	8004aca <UART_SetConfig+0x4f6>
 80048b6:	bf00      	nop
 80048b8:	40011000 	.word	0x40011000
 80048bc:	40011400 	.word	0x40011400
 80048c0:	40011800 	.word	0x40011800
 80048c4:	40011c00 	.word	0x40011c00
 80048c8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80048cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048d0:	2200      	movs	r2, #0
 80048d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80048d6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80048da:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80048de:	4642      	mov	r2, r8
 80048e0:	464b      	mov	r3, r9
 80048e2:	1891      	adds	r1, r2, r2
 80048e4:	6239      	str	r1, [r7, #32]
 80048e6:	415b      	adcs	r3, r3
 80048e8:	627b      	str	r3, [r7, #36]	; 0x24
 80048ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80048ee:	4641      	mov	r1, r8
 80048f0:	1854      	adds	r4, r2, r1
 80048f2:	4649      	mov	r1, r9
 80048f4:	eb43 0501 	adc.w	r5, r3, r1
 80048f8:	f04f 0200 	mov.w	r2, #0
 80048fc:	f04f 0300 	mov.w	r3, #0
 8004900:	00eb      	lsls	r3, r5, #3
 8004902:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004906:	00e2      	lsls	r2, r4, #3
 8004908:	4614      	mov	r4, r2
 800490a:	461d      	mov	r5, r3
 800490c:	4643      	mov	r3, r8
 800490e:	18e3      	adds	r3, r4, r3
 8004910:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004914:	464b      	mov	r3, r9
 8004916:	eb45 0303 	adc.w	r3, r5, r3
 800491a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800491e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800492a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800492e:	f04f 0200 	mov.w	r2, #0
 8004932:	f04f 0300 	mov.w	r3, #0
 8004936:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800493a:	4629      	mov	r1, r5
 800493c:	008b      	lsls	r3, r1, #2
 800493e:	4621      	mov	r1, r4
 8004940:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004944:	4621      	mov	r1, r4
 8004946:	008a      	lsls	r2, r1, #2
 8004948:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800494c:	f7fb ff04 	bl	8000758 <__aeabi_uldivmod>
 8004950:	4602      	mov	r2, r0
 8004952:	460b      	mov	r3, r1
 8004954:	4b60      	ldr	r3, [pc, #384]	; (8004ad8 <UART_SetConfig+0x504>)
 8004956:	fba3 2302 	umull	r2, r3, r3, r2
 800495a:	095b      	lsrs	r3, r3, #5
 800495c:	011c      	lsls	r4, r3, #4
 800495e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004962:	2200      	movs	r2, #0
 8004964:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004968:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800496c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004970:	4642      	mov	r2, r8
 8004972:	464b      	mov	r3, r9
 8004974:	1891      	adds	r1, r2, r2
 8004976:	61b9      	str	r1, [r7, #24]
 8004978:	415b      	adcs	r3, r3
 800497a:	61fb      	str	r3, [r7, #28]
 800497c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004980:	4641      	mov	r1, r8
 8004982:	1851      	adds	r1, r2, r1
 8004984:	6139      	str	r1, [r7, #16]
 8004986:	4649      	mov	r1, r9
 8004988:	414b      	adcs	r3, r1
 800498a:	617b      	str	r3, [r7, #20]
 800498c:	f04f 0200 	mov.w	r2, #0
 8004990:	f04f 0300 	mov.w	r3, #0
 8004994:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004998:	4659      	mov	r1, fp
 800499a:	00cb      	lsls	r3, r1, #3
 800499c:	4651      	mov	r1, sl
 800499e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049a2:	4651      	mov	r1, sl
 80049a4:	00ca      	lsls	r2, r1, #3
 80049a6:	4610      	mov	r0, r2
 80049a8:	4619      	mov	r1, r3
 80049aa:	4603      	mov	r3, r0
 80049ac:	4642      	mov	r2, r8
 80049ae:	189b      	adds	r3, r3, r2
 80049b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80049b4:	464b      	mov	r3, r9
 80049b6:	460a      	mov	r2, r1
 80049b8:	eb42 0303 	adc.w	r3, r2, r3
 80049bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80049c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	2200      	movs	r2, #0
 80049c8:	67bb      	str	r3, [r7, #120]	; 0x78
 80049ca:	67fa      	str	r2, [r7, #124]	; 0x7c
 80049cc:	f04f 0200 	mov.w	r2, #0
 80049d0:	f04f 0300 	mov.w	r3, #0
 80049d4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80049d8:	4649      	mov	r1, r9
 80049da:	008b      	lsls	r3, r1, #2
 80049dc:	4641      	mov	r1, r8
 80049de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049e2:	4641      	mov	r1, r8
 80049e4:	008a      	lsls	r2, r1, #2
 80049e6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80049ea:	f7fb feb5 	bl	8000758 <__aeabi_uldivmod>
 80049ee:	4602      	mov	r2, r0
 80049f0:	460b      	mov	r3, r1
 80049f2:	4b39      	ldr	r3, [pc, #228]	; (8004ad8 <UART_SetConfig+0x504>)
 80049f4:	fba3 1302 	umull	r1, r3, r3, r2
 80049f8:	095b      	lsrs	r3, r3, #5
 80049fa:	2164      	movs	r1, #100	; 0x64
 80049fc:	fb01 f303 	mul.w	r3, r1, r3
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	011b      	lsls	r3, r3, #4
 8004a04:	3332      	adds	r3, #50	; 0x32
 8004a06:	4a34      	ldr	r2, [pc, #208]	; (8004ad8 <UART_SetConfig+0x504>)
 8004a08:	fba2 2303 	umull	r2, r3, r2, r3
 8004a0c:	095b      	lsrs	r3, r3, #5
 8004a0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a12:	441c      	add	r4, r3
 8004a14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a18:	2200      	movs	r2, #0
 8004a1a:	673b      	str	r3, [r7, #112]	; 0x70
 8004a1c:	677a      	str	r2, [r7, #116]	; 0x74
 8004a1e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004a22:	4642      	mov	r2, r8
 8004a24:	464b      	mov	r3, r9
 8004a26:	1891      	adds	r1, r2, r2
 8004a28:	60b9      	str	r1, [r7, #8]
 8004a2a:	415b      	adcs	r3, r3
 8004a2c:	60fb      	str	r3, [r7, #12]
 8004a2e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a32:	4641      	mov	r1, r8
 8004a34:	1851      	adds	r1, r2, r1
 8004a36:	6039      	str	r1, [r7, #0]
 8004a38:	4649      	mov	r1, r9
 8004a3a:	414b      	adcs	r3, r1
 8004a3c:	607b      	str	r3, [r7, #4]
 8004a3e:	f04f 0200 	mov.w	r2, #0
 8004a42:	f04f 0300 	mov.w	r3, #0
 8004a46:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004a4a:	4659      	mov	r1, fp
 8004a4c:	00cb      	lsls	r3, r1, #3
 8004a4e:	4651      	mov	r1, sl
 8004a50:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a54:	4651      	mov	r1, sl
 8004a56:	00ca      	lsls	r2, r1, #3
 8004a58:	4610      	mov	r0, r2
 8004a5a:	4619      	mov	r1, r3
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	4642      	mov	r2, r8
 8004a60:	189b      	adds	r3, r3, r2
 8004a62:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a64:	464b      	mov	r3, r9
 8004a66:	460a      	mov	r2, r1
 8004a68:	eb42 0303 	adc.w	r3, r2, r3
 8004a6c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004a6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	663b      	str	r3, [r7, #96]	; 0x60
 8004a78:	667a      	str	r2, [r7, #100]	; 0x64
 8004a7a:	f04f 0200 	mov.w	r2, #0
 8004a7e:	f04f 0300 	mov.w	r3, #0
 8004a82:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004a86:	4649      	mov	r1, r9
 8004a88:	008b      	lsls	r3, r1, #2
 8004a8a:	4641      	mov	r1, r8
 8004a8c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a90:	4641      	mov	r1, r8
 8004a92:	008a      	lsls	r2, r1, #2
 8004a94:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004a98:	f7fb fe5e 	bl	8000758 <__aeabi_uldivmod>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	460b      	mov	r3, r1
 8004aa0:	4b0d      	ldr	r3, [pc, #52]	; (8004ad8 <UART_SetConfig+0x504>)
 8004aa2:	fba3 1302 	umull	r1, r3, r3, r2
 8004aa6:	095b      	lsrs	r3, r3, #5
 8004aa8:	2164      	movs	r1, #100	; 0x64
 8004aaa:	fb01 f303 	mul.w	r3, r1, r3
 8004aae:	1ad3      	subs	r3, r2, r3
 8004ab0:	011b      	lsls	r3, r3, #4
 8004ab2:	3332      	adds	r3, #50	; 0x32
 8004ab4:	4a08      	ldr	r2, [pc, #32]	; (8004ad8 <UART_SetConfig+0x504>)
 8004ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8004aba:	095b      	lsrs	r3, r3, #5
 8004abc:	f003 020f 	and.w	r2, r3, #15
 8004ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4422      	add	r2, r4
 8004ac8:	609a      	str	r2, [r3, #8]
}
 8004aca:	bf00      	nop
 8004acc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ad6:	bf00      	nop
 8004ad8:	51eb851f 	.word	0x51eb851f

08004adc <__errno>:
 8004adc:	4b01      	ldr	r3, [pc, #4]	; (8004ae4 <__errno+0x8>)
 8004ade:	6818      	ldr	r0, [r3, #0]
 8004ae0:	4770      	bx	lr
 8004ae2:	bf00      	nop
 8004ae4:	20000014 	.word	0x20000014

08004ae8 <__libc_init_array>:
 8004ae8:	b570      	push	{r4, r5, r6, lr}
 8004aea:	4d0d      	ldr	r5, [pc, #52]	; (8004b20 <__libc_init_array+0x38>)
 8004aec:	4c0d      	ldr	r4, [pc, #52]	; (8004b24 <__libc_init_array+0x3c>)
 8004aee:	1b64      	subs	r4, r4, r5
 8004af0:	10a4      	asrs	r4, r4, #2
 8004af2:	2600      	movs	r6, #0
 8004af4:	42a6      	cmp	r6, r4
 8004af6:	d109      	bne.n	8004b0c <__libc_init_array+0x24>
 8004af8:	4d0b      	ldr	r5, [pc, #44]	; (8004b28 <__libc_init_array+0x40>)
 8004afa:	4c0c      	ldr	r4, [pc, #48]	; (8004b2c <__libc_init_array+0x44>)
 8004afc:	f000 fcc2 	bl	8005484 <_init>
 8004b00:	1b64      	subs	r4, r4, r5
 8004b02:	10a4      	asrs	r4, r4, #2
 8004b04:	2600      	movs	r6, #0
 8004b06:	42a6      	cmp	r6, r4
 8004b08:	d105      	bne.n	8004b16 <__libc_init_array+0x2e>
 8004b0a:	bd70      	pop	{r4, r5, r6, pc}
 8004b0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b10:	4798      	blx	r3
 8004b12:	3601      	adds	r6, #1
 8004b14:	e7ee      	b.n	8004af4 <__libc_init_array+0xc>
 8004b16:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b1a:	4798      	blx	r3
 8004b1c:	3601      	adds	r6, #1
 8004b1e:	e7f2      	b.n	8004b06 <__libc_init_array+0x1e>
 8004b20:	08005530 	.word	0x08005530
 8004b24:	08005530 	.word	0x08005530
 8004b28:	08005530 	.word	0x08005530
 8004b2c:	08005534 	.word	0x08005534

08004b30 <memset>:
 8004b30:	4402      	add	r2, r0
 8004b32:	4603      	mov	r3, r0
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d100      	bne.n	8004b3a <memset+0xa>
 8004b38:	4770      	bx	lr
 8004b3a:	f803 1b01 	strb.w	r1, [r3], #1
 8004b3e:	e7f9      	b.n	8004b34 <memset+0x4>

08004b40 <sniprintf>:
 8004b40:	b40c      	push	{r2, r3}
 8004b42:	b530      	push	{r4, r5, lr}
 8004b44:	4b17      	ldr	r3, [pc, #92]	; (8004ba4 <sniprintf+0x64>)
 8004b46:	1e0c      	subs	r4, r1, #0
 8004b48:	681d      	ldr	r5, [r3, #0]
 8004b4a:	b09d      	sub	sp, #116	; 0x74
 8004b4c:	da08      	bge.n	8004b60 <sniprintf+0x20>
 8004b4e:	238b      	movs	r3, #139	; 0x8b
 8004b50:	602b      	str	r3, [r5, #0]
 8004b52:	f04f 30ff 	mov.w	r0, #4294967295
 8004b56:	b01d      	add	sp, #116	; 0x74
 8004b58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004b5c:	b002      	add	sp, #8
 8004b5e:	4770      	bx	lr
 8004b60:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004b64:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004b68:	bf14      	ite	ne
 8004b6a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004b6e:	4623      	moveq	r3, r4
 8004b70:	9304      	str	r3, [sp, #16]
 8004b72:	9307      	str	r3, [sp, #28]
 8004b74:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004b78:	9002      	str	r0, [sp, #8]
 8004b7a:	9006      	str	r0, [sp, #24]
 8004b7c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004b80:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004b82:	ab21      	add	r3, sp, #132	; 0x84
 8004b84:	a902      	add	r1, sp, #8
 8004b86:	4628      	mov	r0, r5
 8004b88:	9301      	str	r3, [sp, #4]
 8004b8a:	f000 f889 	bl	8004ca0 <_svfiprintf_r>
 8004b8e:	1c43      	adds	r3, r0, #1
 8004b90:	bfbc      	itt	lt
 8004b92:	238b      	movlt	r3, #139	; 0x8b
 8004b94:	602b      	strlt	r3, [r5, #0]
 8004b96:	2c00      	cmp	r4, #0
 8004b98:	d0dd      	beq.n	8004b56 <sniprintf+0x16>
 8004b9a:	9b02      	ldr	r3, [sp, #8]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	701a      	strb	r2, [r3, #0]
 8004ba0:	e7d9      	b.n	8004b56 <sniprintf+0x16>
 8004ba2:	bf00      	nop
 8004ba4:	20000014 	.word	0x20000014

08004ba8 <siprintf>:
 8004ba8:	b40e      	push	{r1, r2, r3}
 8004baa:	b500      	push	{lr}
 8004bac:	b09c      	sub	sp, #112	; 0x70
 8004bae:	ab1d      	add	r3, sp, #116	; 0x74
 8004bb0:	9002      	str	r0, [sp, #8]
 8004bb2:	9006      	str	r0, [sp, #24]
 8004bb4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004bb8:	4809      	ldr	r0, [pc, #36]	; (8004be0 <siprintf+0x38>)
 8004bba:	9107      	str	r1, [sp, #28]
 8004bbc:	9104      	str	r1, [sp, #16]
 8004bbe:	4909      	ldr	r1, [pc, #36]	; (8004be4 <siprintf+0x3c>)
 8004bc0:	f853 2b04 	ldr.w	r2, [r3], #4
 8004bc4:	9105      	str	r1, [sp, #20]
 8004bc6:	6800      	ldr	r0, [r0, #0]
 8004bc8:	9301      	str	r3, [sp, #4]
 8004bca:	a902      	add	r1, sp, #8
 8004bcc:	f000 f868 	bl	8004ca0 <_svfiprintf_r>
 8004bd0:	9b02      	ldr	r3, [sp, #8]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	701a      	strb	r2, [r3, #0]
 8004bd6:	b01c      	add	sp, #112	; 0x70
 8004bd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8004bdc:	b003      	add	sp, #12
 8004bde:	4770      	bx	lr
 8004be0:	20000014 	.word	0x20000014
 8004be4:	ffff0208 	.word	0xffff0208

08004be8 <__ssputs_r>:
 8004be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bec:	688e      	ldr	r6, [r1, #8]
 8004bee:	429e      	cmp	r6, r3
 8004bf0:	4682      	mov	sl, r0
 8004bf2:	460c      	mov	r4, r1
 8004bf4:	4690      	mov	r8, r2
 8004bf6:	461f      	mov	r7, r3
 8004bf8:	d838      	bhi.n	8004c6c <__ssputs_r+0x84>
 8004bfa:	898a      	ldrh	r2, [r1, #12]
 8004bfc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004c00:	d032      	beq.n	8004c68 <__ssputs_r+0x80>
 8004c02:	6825      	ldr	r5, [r4, #0]
 8004c04:	6909      	ldr	r1, [r1, #16]
 8004c06:	eba5 0901 	sub.w	r9, r5, r1
 8004c0a:	6965      	ldr	r5, [r4, #20]
 8004c0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004c10:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004c14:	3301      	adds	r3, #1
 8004c16:	444b      	add	r3, r9
 8004c18:	106d      	asrs	r5, r5, #1
 8004c1a:	429d      	cmp	r5, r3
 8004c1c:	bf38      	it	cc
 8004c1e:	461d      	movcc	r5, r3
 8004c20:	0553      	lsls	r3, r2, #21
 8004c22:	d531      	bpl.n	8004c88 <__ssputs_r+0xa0>
 8004c24:	4629      	mov	r1, r5
 8004c26:	f000 fb63 	bl	80052f0 <_malloc_r>
 8004c2a:	4606      	mov	r6, r0
 8004c2c:	b950      	cbnz	r0, 8004c44 <__ssputs_r+0x5c>
 8004c2e:	230c      	movs	r3, #12
 8004c30:	f8ca 3000 	str.w	r3, [sl]
 8004c34:	89a3      	ldrh	r3, [r4, #12]
 8004c36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c3a:	81a3      	strh	r3, [r4, #12]
 8004c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8004c40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c44:	6921      	ldr	r1, [r4, #16]
 8004c46:	464a      	mov	r2, r9
 8004c48:	f000 fabe 	bl	80051c8 <memcpy>
 8004c4c:	89a3      	ldrh	r3, [r4, #12]
 8004c4e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004c52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c56:	81a3      	strh	r3, [r4, #12]
 8004c58:	6126      	str	r6, [r4, #16]
 8004c5a:	6165      	str	r5, [r4, #20]
 8004c5c:	444e      	add	r6, r9
 8004c5e:	eba5 0509 	sub.w	r5, r5, r9
 8004c62:	6026      	str	r6, [r4, #0]
 8004c64:	60a5      	str	r5, [r4, #8]
 8004c66:	463e      	mov	r6, r7
 8004c68:	42be      	cmp	r6, r7
 8004c6a:	d900      	bls.n	8004c6e <__ssputs_r+0x86>
 8004c6c:	463e      	mov	r6, r7
 8004c6e:	6820      	ldr	r0, [r4, #0]
 8004c70:	4632      	mov	r2, r6
 8004c72:	4641      	mov	r1, r8
 8004c74:	f000 fab6 	bl	80051e4 <memmove>
 8004c78:	68a3      	ldr	r3, [r4, #8]
 8004c7a:	1b9b      	subs	r3, r3, r6
 8004c7c:	60a3      	str	r3, [r4, #8]
 8004c7e:	6823      	ldr	r3, [r4, #0]
 8004c80:	4433      	add	r3, r6
 8004c82:	6023      	str	r3, [r4, #0]
 8004c84:	2000      	movs	r0, #0
 8004c86:	e7db      	b.n	8004c40 <__ssputs_r+0x58>
 8004c88:	462a      	mov	r2, r5
 8004c8a:	f000 fba5 	bl	80053d8 <_realloc_r>
 8004c8e:	4606      	mov	r6, r0
 8004c90:	2800      	cmp	r0, #0
 8004c92:	d1e1      	bne.n	8004c58 <__ssputs_r+0x70>
 8004c94:	6921      	ldr	r1, [r4, #16]
 8004c96:	4650      	mov	r0, sl
 8004c98:	f000 fabe 	bl	8005218 <_free_r>
 8004c9c:	e7c7      	b.n	8004c2e <__ssputs_r+0x46>
	...

08004ca0 <_svfiprintf_r>:
 8004ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ca4:	4698      	mov	r8, r3
 8004ca6:	898b      	ldrh	r3, [r1, #12]
 8004ca8:	061b      	lsls	r3, r3, #24
 8004caa:	b09d      	sub	sp, #116	; 0x74
 8004cac:	4607      	mov	r7, r0
 8004cae:	460d      	mov	r5, r1
 8004cb0:	4614      	mov	r4, r2
 8004cb2:	d50e      	bpl.n	8004cd2 <_svfiprintf_r+0x32>
 8004cb4:	690b      	ldr	r3, [r1, #16]
 8004cb6:	b963      	cbnz	r3, 8004cd2 <_svfiprintf_r+0x32>
 8004cb8:	2140      	movs	r1, #64	; 0x40
 8004cba:	f000 fb19 	bl	80052f0 <_malloc_r>
 8004cbe:	6028      	str	r0, [r5, #0]
 8004cc0:	6128      	str	r0, [r5, #16]
 8004cc2:	b920      	cbnz	r0, 8004cce <_svfiprintf_r+0x2e>
 8004cc4:	230c      	movs	r3, #12
 8004cc6:	603b      	str	r3, [r7, #0]
 8004cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8004ccc:	e0d1      	b.n	8004e72 <_svfiprintf_r+0x1d2>
 8004cce:	2340      	movs	r3, #64	; 0x40
 8004cd0:	616b      	str	r3, [r5, #20]
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	9309      	str	r3, [sp, #36]	; 0x24
 8004cd6:	2320      	movs	r3, #32
 8004cd8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004cdc:	f8cd 800c 	str.w	r8, [sp, #12]
 8004ce0:	2330      	movs	r3, #48	; 0x30
 8004ce2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004e8c <_svfiprintf_r+0x1ec>
 8004ce6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004cea:	f04f 0901 	mov.w	r9, #1
 8004cee:	4623      	mov	r3, r4
 8004cf0:	469a      	mov	sl, r3
 8004cf2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004cf6:	b10a      	cbz	r2, 8004cfc <_svfiprintf_r+0x5c>
 8004cf8:	2a25      	cmp	r2, #37	; 0x25
 8004cfa:	d1f9      	bne.n	8004cf0 <_svfiprintf_r+0x50>
 8004cfc:	ebba 0b04 	subs.w	fp, sl, r4
 8004d00:	d00b      	beq.n	8004d1a <_svfiprintf_r+0x7a>
 8004d02:	465b      	mov	r3, fp
 8004d04:	4622      	mov	r2, r4
 8004d06:	4629      	mov	r1, r5
 8004d08:	4638      	mov	r0, r7
 8004d0a:	f7ff ff6d 	bl	8004be8 <__ssputs_r>
 8004d0e:	3001      	adds	r0, #1
 8004d10:	f000 80aa 	beq.w	8004e68 <_svfiprintf_r+0x1c8>
 8004d14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004d16:	445a      	add	r2, fp
 8004d18:	9209      	str	r2, [sp, #36]	; 0x24
 8004d1a:	f89a 3000 	ldrb.w	r3, [sl]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	f000 80a2 	beq.w	8004e68 <_svfiprintf_r+0x1c8>
 8004d24:	2300      	movs	r3, #0
 8004d26:	f04f 32ff 	mov.w	r2, #4294967295
 8004d2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d2e:	f10a 0a01 	add.w	sl, sl, #1
 8004d32:	9304      	str	r3, [sp, #16]
 8004d34:	9307      	str	r3, [sp, #28]
 8004d36:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004d3a:	931a      	str	r3, [sp, #104]	; 0x68
 8004d3c:	4654      	mov	r4, sl
 8004d3e:	2205      	movs	r2, #5
 8004d40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d44:	4851      	ldr	r0, [pc, #324]	; (8004e8c <_svfiprintf_r+0x1ec>)
 8004d46:	f7fb fa73 	bl	8000230 <memchr>
 8004d4a:	9a04      	ldr	r2, [sp, #16]
 8004d4c:	b9d8      	cbnz	r0, 8004d86 <_svfiprintf_r+0xe6>
 8004d4e:	06d0      	lsls	r0, r2, #27
 8004d50:	bf44      	itt	mi
 8004d52:	2320      	movmi	r3, #32
 8004d54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d58:	0711      	lsls	r1, r2, #28
 8004d5a:	bf44      	itt	mi
 8004d5c:	232b      	movmi	r3, #43	; 0x2b
 8004d5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d62:	f89a 3000 	ldrb.w	r3, [sl]
 8004d66:	2b2a      	cmp	r3, #42	; 0x2a
 8004d68:	d015      	beq.n	8004d96 <_svfiprintf_r+0xf6>
 8004d6a:	9a07      	ldr	r2, [sp, #28]
 8004d6c:	4654      	mov	r4, sl
 8004d6e:	2000      	movs	r0, #0
 8004d70:	f04f 0c0a 	mov.w	ip, #10
 8004d74:	4621      	mov	r1, r4
 8004d76:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d7a:	3b30      	subs	r3, #48	; 0x30
 8004d7c:	2b09      	cmp	r3, #9
 8004d7e:	d94e      	bls.n	8004e1e <_svfiprintf_r+0x17e>
 8004d80:	b1b0      	cbz	r0, 8004db0 <_svfiprintf_r+0x110>
 8004d82:	9207      	str	r2, [sp, #28]
 8004d84:	e014      	b.n	8004db0 <_svfiprintf_r+0x110>
 8004d86:	eba0 0308 	sub.w	r3, r0, r8
 8004d8a:	fa09 f303 	lsl.w	r3, r9, r3
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	9304      	str	r3, [sp, #16]
 8004d92:	46a2      	mov	sl, r4
 8004d94:	e7d2      	b.n	8004d3c <_svfiprintf_r+0x9c>
 8004d96:	9b03      	ldr	r3, [sp, #12]
 8004d98:	1d19      	adds	r1, r3, #4
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	9103      	str	r1, [sp, #12]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	bfbb      	ittet	lt
 8004da2:	425b      	neglt	r3, r3
 8004da4:	f042 0202 	orrlt.w	r2, r2, #2
 8004da8:	9307      	strge	r3, [sp, #28]
 8004daa:	9307      	strlt	r3, [sp, #28]
 8004dac:	bfb8      	it	lt
 8004dae:	9204      	strlt	r2, [sp, #16]
 8004db0:	7823      	ldrb	r3, [r4, #0]
 8004db2:	2b2e      	cmp	r3, #46	; 0x2e
 8004db4:	d10c      	bne.n	8004dd0 <_svfiprintf_r+0x130>
 8004db6:	7863      	ldrb	r3, [r4, #1]
 8004db8:	2b2a      	cmp	r3, #42	; 0x2a
 8004dba:	d135      	bne.n	8004e28 <_svfiprintf_r+0x188>
 8004dbc:	9b03      	ldr	r3, [sp, #12]
 8004dbe:	1d1a      	adds	r2, r3, #4
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	9203      	str	r2, [sp, #12]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	bfb8      	it	lt
 8004dc8:	f04f 33ff 	movlt.w	r3, #4294967295
 8004dcc:	3402      	adds	r4, #2
 8004dce:	9305      	str	r3, [sp, #20]
 8004dd0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004e9c <_svfiprintf_r+0x1fc>
 8004dd4:	7821      	ldrb	r1, [r4, #0]
 8004dd6:	2203      	movs	r2, #3
 8004dd8:	4650      	mov	r0, sl
 8004dda:	f7fb fa29 	bl	8000230 <memchr>
 8004dde:	b140      	cbz	r0, 8004df2 <_svfiprintf_r+0x152>
 8004de0:	2340      	movs	r3, #64	; 0x40
 8004de2:	eba0 000a 	sub.w	r0, r0, sl
 8004de6:	fa03 f000 	lsl.w	r0, r3, r0
 8004dea:	9b04      	ldr	r3, [sp, #16]
 8004dec:	4303      	orrs	r3, r0
 8004dee:	3401      	adds	r4, #1
 8004df0:	9304      	str	r3, [sp, #16]
 8004df2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004df6:	4826      	ldr	r0, [pc, #152]	; (8004e90 <_svfiprintf_r+0x1f0>)
 8004df8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004dfc:	2206      	movs	r2, #6
 8004dfe:	f7fb fa17 	bl	8000230 <memchr>
 8004e02:	2800      	cmp	r0, #0
 8004e04:	d038      	beq.n	8004e78 <_svfiprintf_r+0x1d8>
 8004e06:	4b23      	ldr	r3, [pc, #140]	; (8004e94 <_svfiprintf_r+0x1f4>)
 8004e08:	bb1b      	cbnz	r3, 8004e52 <_svfiprintf_r+0x1b2>
 8004e0a:	9b03      	ldr	r3, [sp, #12]
 8004e0c:	3307      	adds	r3, #7
 8004e0e:	f023 0307 	bic.w	r3, r3, #7
 8004e12:	3308      	adds	r3, #8
 8004e14:	9303      	str	r3, [sp, #12]
 8004e16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e18:	4433      	add	r3, r6
 8004e1a:	9309      	str	r3, [sp, #36]	; 0x24
 8004e1c:	e767      	b.n	8004cee <_svfiprintf_r+0x4e>
 8004e1e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e22:	460c      	mov	r4, r1
 8004e24:	2001      	movs	r0, #1
 8004e26:	e7a5      	b.n	8004d74 <_svfiprintf_r+0xd4>
 8004e28:	2300      	movs	r3, #0
 8004e2a:	3401      	adds	r4, #1
 8004e2c:	9305      	str	r3, [sp, #20]
 8004e2e:	4619      	mov	r1, r3
 8004e30:	f04f 0c0a 	mov.w	ip, #10
 8004e34:	4620      	mov	r0, r4
 8004e36:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e3a:	3a30      	subs	r2, #48	; 0x30
 8004e3c:	2a09      	cmp	r2, #9
 8004e3e:	d903      	bls.n	8004e48 <_svfiprintf_r+0x1a8>
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d0c5      	beq.n	8004dd0 <_svfiprintf_r+0x130>
 8004e44:	9105      	str	r1, [sp, #20]
 8004e46:	e7c3      	b.n	8004dd0 <_svfiprintf_r+0x130>
 8004e48:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e4c:	4604      	mov	r4, r0
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e7f0      	b.n	8004e34 <_svfiprintf_r+0x194>
 8004e52:	ab03      	add	r3, sp, #12
 8004e54:	9300      	str	r3, [sp, #0]
 8004e56:	462a      	mov	r2, r5
 8004e58:	4b0f      	ldr	r3, [pc, #60]	; (8004e98 <_svfiprintf_r+0x1f8>)
 8004e5a:	a904      	add	r1, sp, #16
 8004e5c:	4638      	mov	r0, r7
 8004e5e:	f3af 8000 	nop.w
 8004e62:	1c42      	adds	r2, r0, #1
 8004e64:	4606      	mov	r6, r0
 8004e66:	d1d6      	bne.n	8004e16 <_svfiprintf_r+0x176>
 8004e68:	89ab      	ldrh	r3, [r5, #12]
 8004e6a:	065b      	lsls	r3, r3, #25
 8004e6c:	f53f af2c 	bmi.w	8004cc8 <_svfiprintf_r+0x28>
 8004e70:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004e72:	b01d      	add	sp, #116	; 0x74
 8004e74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e78:	ab03      	add	r3, sp, #12
 8004e7a:	9300      	str	r3, [sp, #0]
 8004e7c:	462a      	mov	r2, r5
 8004e7e:	4b06      	ldr	r3, [pc, #24]	; (8004e98 <_svfiprintf_r+0x1f8>)
 8004e80:	a904      	add	r1, sp, #16
 8004e82:	4638      	mov	r0, r7
 8004e84:	f000 f87a 	bl	8004f7c <_printf_i>
 8004e88:	e7eb      	b.n	8004e62 <_svfiprintf_r+0x1c2>
 8004e8a:	bf00      	nop
 8004e8c:	080054f4 	.word	0x080054f4
 8004e90:	080054fe 	.word	0x080054fe
 8004e94:	00000000 	.word	0x00000000
 8004e98:	08004be9 	.word	0x08004be9
 8004e9c:	080054fa 	.word	0x080054fa

08004ea0 <_printf_common>:
 8004ea0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ea4:	4616      	mov	r6, r2
 8004ea6:	4699      	mov	r9, r3
 8004ea8:	688a      	ldr	r2, [r1, #8]
 8004eaa:	690b      	ldr	r3, [r1, #16]
 8004eac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	bfb8      	it	lt
 8004eb4:	4613      	movlt	r3, r2
 8004eb6:	6033      	str	r3, [r6, #0]
 8004eb8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004ebc:	4607      	mov	r7, r0
 8004ebe:	460c      	mov	r4, r1
 8004ec0:	b10a      	cbz	r2, 8004ec6 <_printf_common+0x26>
 8004ec2:	3301      	adds	r3, #1
 8004ec4:	6033      	str	r3, [r6, #0]
 8004ec6:	6823      	ldr	r3, [r4, #0]
 8004ec8:	0699      	lsls	r1, r3, #26
 8004eca:	bf42      	ittt	mi
 8004ecc:	6833      	ldrmi	r3, [r6, #0]
 8004ece:	3302      	addmi	r3, #2
 8004ed0:	6033      	strmi	r3, [r6, #0]
 8004ed2:	6825      	ldr	r5, [r4, #0]
 8004ed4:	f015 0506 	ands.w	r5, r5, #6
 8004ed8:	d106      	bne.n	8004ee8 <_printf_common+0x48>
 8004eda:	f104 0a19 	add.w	sl, r4, #25
 8004ede:	68e3      	ldr	r3, [r4, #12]
 8004ee0:	6832      	ldr	r2, [r6, #0]
 8004ee2:	1a9b      	subs	r3, r3, r2
 8004ee4:	42ab      	cmp	r3, r5
 8004ee6:	dc26      	bgt.n	8004f36 <_printf_common+0x96>
 8004ee8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004eec:	1e13      	subs	r3, r2, #0
 8004eee:	6822      	ldr	r2, [r4, #0]
 8004ef0:	bf18      	it	ne
 8004ef2:	2301      	movne	r3, #1
 8004ef4:	0692      	lsls	r2, r2, #26
 8004ef6:	d42b      	bmi.n	8004f50 <_printf_common+0xb0>
 8004ef8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004efc:	4649      	mov	r1, r9
 8004efe:	4638      	mov	r0, r7
 8004f00:	47c0      	blx	r8
 8004f02:	3001      	adds	r0, #1
 8004f04:	d01e      	beq.n	8004f44 <_printf_common+0xa4>
 8004f06:	6823      	ldr	r3, [r4, #0]
 8004f08:	68e5      	ldr	r5, [r4, #12]
 8004f0a:	6832      	ldr	r2, [r6, #0]
 8004f0c:	f003 0306 	and.w	r3, r3, #6
 8004f10:	2b04      	cmp	r3, #4
 8004f12:	bf08      	it	eq
 8004f14:	1aad      	subeq	r5, r5, r2
 8004f16:	68a3      	ldr	r3, [r4, #8]
 8004f18:	6922      	ldr	r2, [r4, #16]
 8004f1a:	bf0c      	ite	eq
 8004f1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f20:	2500      	movne	r5, #0
 8004f22:	4293      	cmp	r3, r2
 8004f24:	bfc4      	itt	gt
 8004f26:	1a9b      	subgt	r3, r3, r2
 8004f28:	18ed      	addgt	r5, r5, r3
 8004f2a:	2600      	movs	r6, #0
 8004f2c:	341a      	adds	r4, #26
 8004f2e:	42b5      	cmp	r5, r6
 8004f30:	d11a      	bne.n	8004f68 <_printf_common+0xc8>
 8004f32:	2000      	movs	r0, #0
 8004f34:	e008      	b.n	8004f48 <_printf_common+0xa8>
 8004f36:	2301      	movs	r3, #1
 8004f38:	4652      	mov	r2, sl
 8004f3a:	4649      	mov	r1, r9
 8004f3c:	4638      	mov	r0, r7
 8004f3e:	47c0      	blx	r8
 8004f40:	3001      	adds	r0, #1
 8004f42:	d103      	bne.n	8004f4c <_printf_common+0xac>
 8004f44:	f04f 30ff 	mov.w	r0, #4294967295
 8004f48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f4c:	3501      	adds	r5, #1
 8004f4e:	e7c6      	b.n	8004ede <_printf_common+0x3e>
 8004f50:	18e1      	adds	r1, r4, r3
 8004f52:	1c5a      	adds	r2, r3, #1
 8004f54:	2030      	movs	r0, #48	; 0x30
 8004f56:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f5a:	4422      	add	r2, r4
 8004f5c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f60:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f64:	3302      	adds	r3, #2
 8004f66:	e7c7      	b.n	8004ef8 <_printf_common+0x58>
 8004f68:	2301      	movs	r3, #1
 8004f6a:	4622      	mov	r2, r4
 8004f6c:	4649      	mov	r1, r9
 8004f6e:	4638      	mov	r0, r7
 8004f70:	47c0      	blx	r8
 8004f72:	3001      	adds	r0, #1
 8004f74:	d0e6      	beq.n	8004f44 <_printf_common+0xa4>
 8004f76:	3601      	adds	r6, #1
 8004f78:	e7d9      	b.n	8004f2e <_printf_common+0x8e>
	...

08004f7c <_printf_i>:
 8004f7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f80:	7e0f      	ldrb	r7, [r1, #24]
 8004f82:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004f84:	2f78      	cmp	r7, #120	; 0x78
 8004f86:	4691      	mov	r9, r2
 8004f88:	4680      	mov	r8, r0
 8004f8a:	460c      	mov	r4, r1
 8004f8c:	469a      	mov	sl, r3
 8004f8e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004f92:	d807      	bhi.n	8004fa4 <_printf_i+0x28>
 8004f94:	2f62      	cmp	r7, #98	; 0x62
 8004f96:	d80a      	bhi.n	8004fae <_printf_i+0x32>
 8004f98:	2f00      	cmp	r7, #0
 8004f9a:	f000 80d8 	beq.w	800514e <_printf_i+0x1d2>
 8004f9e:	2f58      	cmp	r7, #88	; 0x58
 8004fa0:	f000 80a3 	beq.w	80050ea <_printf_i+0x16e>
 8004fa4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004fa8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004fac:	e03a      	b.n	8005024 <_printf_i+0xa8>
 8004fae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004fb2:	2b15      	cmp	r3, #21
 8004fb4:	d8f6      	bhi.n	8004fa4 <_printf_i+0x28>
 8004fb6:	a101      	add	r1, pc, #4	; (adr r1, 8004fbc <_printf_i+0x40>)
 8004fb8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004fbc:	08005015 	.word	0x08005015
 8004fc0:	08005029 	.word	0x08005029
 8004fc4:	08004fa5 	.word	0x08004fa5
 8004fc8:	08004fa5 	.word	0x08004fa5
 8004fcc:	08004fa5 	.word	0x08004fa5
 8004fd0:	08004fa5 	.word	0x08004fa5
 8004fd4:	08005029 	.word	0x08005029
 8004fd8:	08004fa5 	.word	0x08004fa5
 8004fdc:	08004fa5 	.word	0x08004fa5
 8004fe0:	08004fa5 	.word	0x08004fa5
 8004fe4:	08004fa5 	.word	0x08004fa5
 8004fe8:	08005135 	.word	0x08005135
 8004fec:	08005059 	.word	0x08005059
 8004ff0:	08005117 	.word	0x08005117
 8004ff4:	08004fa5 	.word	0x08004fa5
 8004ff8:	08004fa5 	.word	0x08004fa5
 8004ffc:	08005157 	.word	0x08005157
 8005000:	08004fa5 	.word	0x08004fa5
 8005004:	08005059 	.word	0x08005059
 8005008:	08004fa5 	.word	0x08004fa5
 800500c:	08004fa5 	.word	0x08004fa5
 8005010:	0800511f 	.word	0x0800511f
 8005014:	682b      	ldr	r3, [r5, #0]
 8005016:	1d1a      	adds	r2, r3, #4
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	602a      	str	r2, [r5, #0]
 800501c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005020:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005024:	2301      	movs	r3, #1
 8005026:	e0a3      	b.n	8005170 <_printf_i+0x1f4>
 8005028:	6820      	ldr	r0, [r4, #0]
 800502a:	6829      	ldr	r1, [r5, #0]
 800502c:	0606      	lsls	r6, r0, #24
 800502e:	f101 0304 	add.w	r3, r1, #4
 8005032:	d50a      	bpl.n	800504a <_printf_i+0xce>
 8005034:	680e      	ldr	r6, [r1, #0]
 8005036:	602b      	str	r3, [r5, #0]
 8005038:	2e00      	cmp	r6, #0
 800503a:	da03      	bge.n	8005044 <_printf_i+0xc8>
 800503c:	232d      	movs	r3, #45	; 0x2d
 800503e:	4276      	negs	r6, r6
 8005040:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005044:	485e      	ldr	r0, [pc, #376]	; (80051c0 <_printf_i+0x244>)
 8005046:	230a      	movs	r3, #10
 8005048:	e019      	b.n	800507e <_printf_i+0x102>
 800504a:	680e      	ldr	r6, [r1, #0]
 800504c:	602b      	str	r3, [r5, #0]
 800504e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005052:	bf18      	it	ne
 8005054:	b236      	sxthne	r6, r6
 8005056:	e7ef      	b.n	8005038 <_printf_i+0xbc>
 8005058:	682b      	ldr	r3, [r5, #0]
 800505a:	6820      	ldr	r0, [r4, #0]
 800505c:	1d19      	adds	r1, r3, #4
 800505e:	6029      	str	r1, [r5, #0]
 8005060:	0601      	lsls	r1, r0, #24
 8005062:	d501      	bpl.n	8005068 <_printf_i+0xec>
 8005064:	681e      	ldr	r6, [r3, #0]
 8005066:	e002      	b.n	800506e <_printf_i+0xf2>
 8005068:	0646      	lsls	r6, r0, #25
 800506a:	d5fb      	bpl.n	8005064 <_printf_i+0xe8>
 800506c:	881e      	ldrh	r6, [r3, #0]
 800506e:	4854      	ldr	r0, [pc, #336]	; (80051c0 <_printf_i+0x244>)
 8005070:	2f6f      	cmp	r7, #111	; 0x6f
 8005072:	bf0c      	ite	eq
 8005074:	2308      	moveq	r3, #8
 8005076:	230a      	movne	r3, #10
 8005078:	2100      	movs	r1, #0
 800507a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800507e:	6865      	ldr	r5, [r4, #4]
 8005080:	60a5      	str	r5, [r4, #8]
 8005082:	2d00      	cmp	r5, #0
 8005084:	bfa2      	ittt	ge
 8005086:	6821      	ldrge	r1, [r4, #0]
 8005088:	f021 0104 	bicge.w	r1, r1, #4
 800508c:	6021      	strge	r1, [r4, #0]
 800508e:	b90e      	cbnz	r6, 8005094 <_printf_i+0x118>
 8005090:	2d00      	cmp	r5, #0
 8005092:	d04d      	beq.n	8005130 <_printf_i+0x1b4>
 8005094:	4615      	mov	r5, r2
 8005096:	fbb6 f1f3 	udiv	r1, r6, r3
 800509a:	fb03 6711 	mls	r7, r3, r1, r6
 800509e:	5dc7      	ldrb	r7, [r0, r7]
 80050a0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80050a4:	4637      	mov	r7, r6
 80050a6:	42bb      	cmp	r3, r7
 80050a8:	460e      	mov	r6, r1
 80050aa:	d9f4      	bls.n	8005096 <_printf_i+0x11a>
 80050ac:	2b08      	cmp	r3, #8
 80050ae:	d10b      	bne.n	80050c8 <_printf_i+0x14c>
 80050b0:	6823      	ldr	r3, [r4, #0]
 80050b2:	07de      	lsls	r6, r3, #31
 80050b4:	d508      	bpl.n	80050c8 <_printf_i+0x14c>
 80050b6:	6923      	ldr	r3, [r4, #16]
 80050b8:	6861      	ldr	r1, [r4, #4]
 80050ba:	4299      	cmp	r1, r3
 80050bc:	bfde      	ittt	le
 80050be:	2330      	movle	r3, #48	; 0x30
 80050c0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80050c4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80050c8:	1b52      	subs	r2, r2, r5
 80050ca:	6122      	str	r2, [r4, #16]
 80050cc:	f8cd a000 	str.w	sl, [sp]
 80050d0:	464b      	mov	r3, r9
 80050d2:	aa03      	add	r2, sp, #12
 80050d4:	4621      	mov	r1, r4
 80050d6:	4640      	mov	r0, r8
 80050d8:	f7ff fee2 	bl	8004ea0 <_printf_common>
 80050dc:	3001      	adds	r0, #1
 80050de:	d14c      	bne.n	800517a <_printf_i+0x1fe>
 80050e0:	f04f 30ff 	mov.w	r0, #4294967295
 80050e4:	b004      	add	sp, #16
 80050e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050ea:	4835      	ldr	r0, [pc, #212]	; (80051c0 <_printf_i+0x244>)
 80050ec:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80050f0:	6829      	ldr	r1, [r5, #0]
 80050f2:	6823      	ldr	r3, [r4, #0]
 80050f4:	f851 6b04 	ldr.w	r6, [r1], #4
 80050f8:	6029      	str	r1, [r5, #0]
 80050fa:	061d      	lsls	r5, r3, #24
 80050fc:	d514      	bpl.n	8005128 <_printf_i+0x1ac>
 80050fe:	07df      	lsls	r7, r3, #31
 8005100:	bf44      	itt	mi
 8005102:	f043 0320 	orrmi.w	r3, r3, #32
 8005106:	6023      	strmi	r3, [r4, #0]
 8005108:	b91e      	cbnz	r6, 8005112 <_printf_i+0x196>
 800510a:	6823      	ldr	r3, [r4, #0]
 800510c:	f023 0320 	bic.w	r3, r3, #32
 8005110:	6023      	str	r3, [r4, #0]
 8005112:	2310      	movs	r3, #16
 8005114:	e7b0      	b.n	8005078 <_printf_i+0xfc>
 8005116:	6823      	ldr	r3, [r4, #0]
 8005118:	f043 0320 	orr.w	r3, r3, #32
 800511c:	6023      	str	r3, [r4, #0]
 800511e:	2378      	movs	r3, #120	; 0x78
 8005120:	4828      	ldr	r0, [pc, #160]	; (80051c4 <_printf_i+0x248>)
 8005122:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005126:	e7e3      	b.n	80050f0 <_printf_i+0x174>
 8005128:	0659      	lsls	r1, r3, #25
 800512a:	bf48      	it	mi
 800512c:	b2b6      	uxthmi	r6, r6
 800512e:	e7e6      	b.n	80050fe <_printf_i+0x182>
 8005130:	4615      	mov	r5, r2
 8005132:	e7bb      	b.n	80050ac <_printf_i+0x130>
 8005134:	682b      	ldr	r3, [r5, #0]
 8005136:	6826      	ldr	r6, [r4, #0]
 8005138:	6961      	ldr	r1, [r4, #20]
 800513a:	1d18      	adds	r0, r3, #4
 800513c:	6028      	str	r0, [r5, #0]
 800513e:	0635      	lsls	r5, r6, #24
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	d501      	bpl.n	8005148 <_printf_i+0x1cc>
 8005144:	6019      	str	r1, [r3, #0]
 8005146:	e002      	b.n	800514e <_printf_i+0x1d2>
 8005148:	0670      	lsls	r0, r6, #25
 800514a:	d5fb      	bpl.n	8005144 <_printf_i+0x1c8>
 800514c:	8019      	strh	r1, [r3, #0]
 800514e:	2300      	movs	r3, #0
 8005150:	6123      	str	r3, [r4, #16]
 8005152:	4615      	mov	r5, r2
 8005154:	e7ba      	b.n	80050cc <_printf_i+0x150>
 8005156:	682b      	ldr	r3, [r5, #0]
 8005158:	1d1a      	adds	r2, r3, #4
 800515a:	602a      	str	r2, [r5, #0]
 800515c:	681d      	ldr	r5, [r3, #0]
 800515e:	6862      	ldr	r2, [r4, #4]
 8005160:	2100      	movs	r1, #0
 8005162:	4628      	mov	r0, r5
 8005164:	f7fb f864 	bl	8000230 <memchr>
 8005168:	b108      	cbz	r0, 800516e <_printf_i+0x1f2>
 800516a:	1b40      	subs	r0, r0, r5
 800516c:	6060      	str	r0, [r4, #4]
 800516e:	6863      	ldr	r3, [r4, #4]
 8005170:	6123      	str	r3, [r4, #16]
 8005172:	2300      	movs	r3, #0
 8005174:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005178:	e7a8      	b.n	80050cc <_printf_i+0x150>
 800517a:	6923      	ldr	r3, [r4, #16]
 800517c:	462a      	mov	r2, r5
 800517e:	4649      	mov	r1, r9
 8005180:	4640      	mov	r0, r8
 8005182:	47d0      	blx	sl
 8005184:	3001      	adds	r0, #1
 8005186:	d0ab      	beq.n	80050e0 <_printf_i+0x164>
 8005188:	6823      	ldr	r3, [r4, #0]
 800518a:	079b      	lsls	r3, r3, #30
 800518c:	d413      	bmi.n	80051b6 <_printf_i+0x23a>
 800518e:	68e0      	ldr	r0, [r4, #12]
 8005190:	9b03      	ldr	r3, [sp, #12]
 8005192:	4298      	cmp	r0, r3
 8005194:	bfb8      	it	lt
 8005196:	4618      	movlt	r0, r3
 8005198:	e7a4      	b.n	80050e4 <_printf_i+0x168>
 800519a:	2301      	movs	r3, #1
 800519c:	4632      	mov	r2, r6
 800519e:	4649      	mov	r1, r9
 80051a0:	4640      	mov	r0, r8
 80051a2:	47d0      	blx	sl
 80051a4:	3001      	adds	r0, #1
 80051a6:	d09b      	beq.n	80050e0 <_printf_i+0x164>
 80051a8:	3501      	adds	r5, #1
 80051aa:	68e3      	ldr	r3, [r4, #12]
 80051ac:	9903      	ldr	r1, [sp, #12]
 80051ae:	1a5b      	subs	r3, r3, r1
 80051b0:	42ab      	cmp	r3, r5
 80051b2:	dcf2      	bgt.n	800519a <_printf_i+0x21e>
 80051b4:	e7eb      	b.n	800518e <_printf_i+0x212>
 80051b6:	2500      	movs	r5, #0
 80051b8:	f104 0619 	add.w	r6, r4, #25
 80051bc:	e7f5      	b.n	80051aa <_printf_i+0x22e>
 80051be:	bf00      	nop
 80051c0:	08005505 	.word	0x08005505
 80051c4:	08005516 	.word	0x08005516

080051c8 <memcpy>:
 80051c8:	440a      	add	r2, r1
 80051ca:	4291      	cmp	r1, r2
 80051cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80051d0:	d100      	bne.n	80051d4 <memcpy+0xc>
 80051d2:	4770      	bx	lr
 80051d4:	b510      	push	{r4, lr}
 80051d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80051da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80051de:	4291      	cmp	r1, r2
 80051e0:	d1f9      	bne.n	80051d6 <memcpy+0xe>
 80051e2:	bd10      	pop	{r4, pc}

080051e4 <memmove>:
 80051e4:	4288      	cmp	r0, r1
 80051e6:	b510      	push	{r4, lr}
 80051e8:	eb01 0402 	add.w	r4, r1, r2
 80051ec:	d902      	bls.n	80051f4 <memmove+0x10>
 80051ee:	4284      	cmp	r4, r0
 80051f0:	4623      	mov	r3, r4
 80051f2:	d807      	bhi.n	8005204 <memmove+0x20>
 80051f4:	1e43      	subs	r3, r0, #1
 80051f6:	42a1      	cmp	r1, r4
 80051f8:	d008      	beq.n	800520c <memmove+0x28>
 80051fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80051fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005202:	e7f8      	b.n	80051f6 <memmove+0x12>
 8005204:	4402      	add	r2, r0
 8005206:	4601      	mov	r1, r0
 8005208:	428a      	cmp	r2, r1
 800520a:	d100      	bne.n	800520e <memmove+0x2a>
 800520c:	bd10      	pop	{r4, pc}
 800520e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005212:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005216:	e7f7      	b.n	8005208 <memmove+0x24>

08005218 <_free_r>:
 8005218:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800521a:	2900      	cmp	r1, #0
 800521c:	d044      	beq.n	80052a8 <_free_r+0x90>
 800521e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005222:	9001      	str	r0, [sp, #4]
 8005224:	2b00      	cmp	r3, #0
 8005226:	f1a1 0404 	sub.w	r4, r1, #4
 800522a:	bfb8      	it	lt
 800522c:	18e4      	addlt	r4, r4, r3
 800522e:	f000 f913 	bl	8005458 <__malloc_lock>
 8005232:	4a1e      	ldr	r2, [pc, #120]	; (80052ac <_free_r+0x94>)
 8005234:	9801      	ldr	r0, [sp, #4]
 8005236:	6813      	ldr	r3, [r2, #0]
 8005238:	b933      	cbnz	r3, 8005248 <_free_r+0x30>
 800523a:	6063      	str	r3, [r4, #4]
 800523c:	6014      	str	r4, [r2, #0]
 800523e:	b003      	add	sp, #12
 8005240:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005244:	f000 b90e 	b.w	8005464 <__malloc_unlock>
 8005248:	42a3      	cmp	r3, r4
 800524a:	d908      	bls.n	800525e <_free_r+0x46>
 800524c:	6825      	ldr	r5, [r4, #0]
 800524e:	1961      	adds	r1, r4, r5
 8005250:	428b      	cmp	r3, r1
 8005252:	bf01      	itttt	eq
 8005254:	6819      	ldreq	r1, [r3, #0]
 8005256:	685b      	ldreq	r3, [r3, #4]
 8005258:	1949      	addeq	r1, r1, r5
 800525a:	6021      	streq	r1, [r4, #0]
 800525c:	e7ed      	b.n	800523a <_free_r+0x22>
 800525e:	461a      	mov	r2, r3
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	b10b      	cbz	r3, 8005268 <_free_r+0x50>
 8005264:	42a3      	cmp	r3, r4
 8005266:	d9fa      	bls.n	800525e <_free_r+0x46>
 8005268:	6811      	ldr	r1, [r2, #0]
 800526a:	1855      	adds	r5, r2, r1
 800526c:	42a5      	cmp	r5, r4
 800526e:	d10b      	bne.n	8005288 <_free_r+0x70>
 8005270:	6824      	ldr	r4, [r4, #0]
 8005272:	4421      	add	r1, r4
 8005274:	1854      	adds	r4, r2, r1
 8005276:	42a3      	cmp	r3, r4
 8005278:	6011      	str	r1, [r2, #0]
 800527a:	d1e0      	bne.n	800523e <_free_r+0x26>
 800527c:	681c      	ldr	r4, [r3, #0]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	6053      	str	r3, [r2, #4]
 8005282:	4421      	add	r1, r4
 8005284:	6011      	str	r1, [r2, #0]
 8005286:	e7da      	b.n	800523e <_free_r+0x26>
 8005288:	d902      	bls.n	8005290 <_free_r+0x78>
 800528a:	230c      	movs	r3, #12
 800528c:	6003      	str	r3, [r0, #0]
 800528e:	e7d6      	b.n	800523e <_free_r+0x26>
 8005290:	6825      	ldr	r5, [r4, #0]
 8005292:	1961      	adds	r1, r4, r5
 8005294:	428b      	cmp	r3, r1
 8005296:	bf04      	itt	eq
 8005298:	6819      	ldreq	r1, [r3, #0]
 800529a:	685b      	ldreq	r3, [r3, #4]
 800529c:	6063      	str	r3, [r4, #4]
 800529e:	bf04      	itt	eq
 80052a0:	1949      	addeq	r1, r1, r5
 80052a2:	6021      	streq	r1, [r4, #0]
 80052a4:	6054      	str	r4, [r2, #4]
 80052a6:	e7ca      	b.n	800523e <_free_r+0x26>
 80052a8:	b003      	add	sp, #12
 80052aa:	bd30      	pop	{r4, r5, pc}
 80052ac:	20000174 	.word	0x20000174

080052b0 <sbrk_aligned>:
 80052b0:	b570      	push	{r4, r5, r6, lr}
 80052b2:	4e0e      	ldr	r6, [pc, #56]	; (80052ec <sbrk_aligned+0x3c>)
 80052b4:	460c      	mov	r4, r1
 80052b6:	6831      	ldr	r1, [r6, #0]
 80052b8:	4605      	mov	r5, r0
 80052ba:	b911      	cbnz	r1, 80052c2 <sbrk_aligned+0x12>
 80052bc:	f000 f8bc 	bl	8005438 <_sbrk_r>
 80052c0:	6030      	str	r0, [r6, #0]
 80052c2:	4621      	mov	r1, r4
 80052c4:	4628      	mov	r0, r5
 80052c6:	f000 f8b7 	bl	8005438 <_sbrk_r>
 80052ca:	1c43      	adds	r3, r0, #1
 80052cc:	d00a      	beq.n	80052e4 <sbrk_aligned+0x34>
 80052ce:	1cc4      	adds	r4, r0, #3
 80052d0:	f024 0403 	bic.w	r4, r4, #3
 80052d4:	42a0      	cmp	r0, r4
 80052d6:	d007      	beq.n	80052e8 <sbrk_aligned+0x38>
 80052d8:	1a21      	subs	r1, r4, r0
 80052da:	4628      	mov	r0, r5
 80052dc:	f000 f8ac 	bl	8005438 <_sbrk_r>
 80052e0:	3001      	adds	r0, #1
 80052e2:	d101      	bne.n	80052e8 <sbrk_aligned+0x38>
 80052e4:	f04f 34ff 	mov.w	r4, #4294967295
 80052e8:	4620      	mov	r0, r4
 80052ea:	bd70      	pop	{r4, r5, r6, pc}
 80052ec:	20000178 	.word	0x20000178

080052f0 <_malloc_r>:
 80052f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052f4:	1ccd      	adds	r5, r1, #3
 80052f6:	f025 0503 	bic.w	r5, r5, #3
 80052fa:	3508      	adds	r5, #8
 80052fc:	2d0c      	cmp	r5, #12
 80052fe:	bf38      	it	cc
 8005300:	250c      	movcc	r5, #12
 8005302:	2d00      	cmp	r5, #0
 8005304:	4607      	mov	r7, r0
 8005306:	db01      	blt.n	800530c <_malloc_r+0x1c>
 8005308:	42a9      	cmp	r1, r5
 800530a:	d905      	bls.n	8005318 <_malloc_r+0x28>
 800530c:	230c      	movs	r3, #12
 800530e:	603b      	str	r3, [r7, #0]
 8005310:	2600      	movs	r6, #0
 8005312:	4630      	mov	r0, r6
 8005314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005318:	4e2e      	ldr	r6, [pc, #184]	; (80053d4 <_malloc_r+0xe4>)
 800531a:	f000 f89d 	bl	8005458 <__malloc_lock>
 800531e:	6833      	ldr	r3, [r6, #0]
 8005320:	461c      	mov	r4, r3
 8005322:	bb34      	cbnz	r4, 8005372 <_malloc_r+0x82>
 8005324:	4629      	mov	r1, r5
 8005326:	4638      	mov	r0, r7
 8005328:	f7ff ffc2 	bl	80052b0 <sbrk_aligned>
 800532c:	1c43      	adds	r3, r0, #1
 800532e:	4604      	mov	r4, r0
 8005330:	d14d      	bne.n	80053ce <_malloc_r+0xde>
 8005332:	6834      	ldr	r4, [r6, #0]
 8005334:	4626      	mov	r6, r4
 8005336:	2e00      	cmp	r6, #0
 8005338:	d140      	bne.n	80053bc <_malloc_r+0xcc>
 800533a:	6823      	ldr	r3, [r4, #0]
 800533c:	4631      	mov	r1, r6
 800533e:	4638      	mov	r0, r7
 8005340:	eb04 0803 	add.w	r8, r4, r3
 8005344:	f000 f878 	bl	8005438 <_sbrk_r>
 8005348:	4580      	cmp	r8, r0
 800534a:	d13a      	bne.n	80053c2 <_malloc_r+0xd2>
 800534c:	6821      	ldr	r1, [r4, #0]
 800534e:	3503      	adds	r5, #3
 8005350:	1a6d      	subs	r5, r5, r1
 8005352:	f025 0503 	bic.w	r5, r5, #3
 8005356:	3508      	adds	r5, #8
 8005358:	2d0c      	cmp	r5, #12
 800535a:	bf38      	it	cc
 800535c:	250c      	movcc	r5, #12
 800535e:	4629      	mov	r1, r5
 8005360:	4638      	mov	r0, r7
 8005362:	f7ff ffa5 	bl	80052b0 <sbrk_aligned>
 8005366:	3001      	adds	r0, #1
 8005368:	d02b      	beq.n	80053c2 <_malloc_r+0xd2>
 800536a:	6823      	ldr	r3, [r4, #0]
 800536c:	442b      	add	r3, r5
 800536e:	6023      	str	r3, [r4, #0]
 8005370:	e00e      	b.n	8005390 <_malloc_r+0xa0>
 8005372:	6822      	ldr	r2, [r4, #0]
 8005374:	1b52      	subs	r2, r2, r5
 8005376:	d41e      	bmi.n	80053b6 <_malloc_r+0xc6>
 8005378:	2a0b      	cmp	r2, #11
 800537a:	d916      	bls.n	80053aa <_malloc_r+0xba>
 800537c:	1961      	adds	r1, r4, r5
 800537e:	42a3      	cmp	r3, r4
 8005380:	6025      	str	r5, [r4, #0]
 8005382:	bf18      	it	ne
 8005384:	6059      	strne	r1, [r3, #4]
 8005386:	6863      	ldr	r3, [r4, #4]
 8005388:	bf08      	it	eq
 800538a:	6031      	streq	r1, [r6, #0]
 800538c:	5162      	str	r2, [r4, r5]
 800538e:	604b      	str	r3, [r1, #4]
 8005390:	4638      	mov	r0, r7
 8005392:	f104 060b 	add.w	r6, r4, #11
 8005396:	f000 f865 	bl	8005464 <__malloc_unlock>
 800539a:	f026 0607 	bic.w	r6, r6, #7
 800539e:	1d23      	adds	r3, r4, #4
 80053a0:	1af2      	subs	r2, r6, r3
 80053a2:	d0b6      	beq.n	8005312 <_malloc_r+0x22>
 80053a4:	1b9b      	subs	r3, r3, r6
 80053a6:	50a3      	str	r3, [r4, r2]
 80053a8:	e7b3      	b.n	8005312 <_malloc_r+0x22>
 80053aa:	6862      	ldr	r2, [r4, #4]
 80053ac:	42a3      	cmp	r3, r4
 80053ae:	bf0c      	ite	eq
 80053b0:	6032      	streq	r2, [r6, #0]
 80053b2:	605a      	strne	r2, [r3, #4]
 80053b4:	e7ec      	b.n	8005390 <_malloc_r+0xa0>
 80053b6:	4623      	mov	r3, r4
 80053b8:	6864      	ldr	r4, [r4, #4]
 80053ba:	e7b2      	b.n	8005322 <_malloc_r+0x32>
 80053bc:	4634      	mov	r4, r6
 80053be:	6876      	ldr	r6, [r6, #4]
 80053c0:	e7b9      	b.n	8005336 <_malloc_r+0x46>
 80053c2:	230c      	movs	r3, #12
 80053c4:	603b      	str	r3, [r7, #0]
 80053c6:	4638      	mov	r0, r7
 80053c8:	f000 f84c 	bl	8005464 <__malloc_unlock>
 80053cc:	e7a1      	b.n	8005312 <_malloc_r+0x22>
 80053ce:	6025      	str	r5, [r4, #0]
 80053d0:	e7de      	b.n	8005390 <_malloc_r+0xa0>
 80053d2:	bf00      	nop
 80053d4:	20000174 	.word	0x20000174

080053d8 <_realloc_r>:
 80053d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053dc:	4680      	mov	r8, r0
 80053de:	4614      	mov	r4, r2
 80053e0:	460e      	mov	r6, r1
 80053e2:	b921      	cbnz	r1, 80053ee <_realloc_r+0x16>
 80053e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80053e8:	4611      	mov	r1, r2
 80053ea:	f7ff bf81 	b.w	80052f0 <_malloc_r>
 80053ee:	b92a      	cbnz	r2, 80053fc <_realloc_r+0x24>
 80053f0:	f7ff ff12 	bl	8005218 <_free_r>
 80053f4:	4625      	mov	r5, r4
 80053f6:	4628      	mov	r0, r5
 80053f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053fc:	f000 f838 	bl	8005470 <_malloc_usable_size_r>
 8005400:	4284      	cmp	r4, r0
 8005402:	4607      	mov	r7, r0
 8005404:	d802      	bhi.n	800540c <_realloc_r+0x34>
 8005406:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800540a:	d812      	bhi.n	8005432 <_realloc_r+0x5a>
 800540c:	4621      	mov	r1, r4
 800540e:	4640      	mov	r0, r8
 8005410:	f7ff ff6e 	bl	80052f0 <_malloc_r>
 8005414:	4605      	mov	r5, r0
 8005416:	2800      	cmp	r0, #0
 8005418:	d0ed      	beq.n	80053f6 <_realloc_r+0x1e>
 800541a:	42bc      	cmp	r4, r7
 800541c:	4622      	mov	r2, r4
 800541e:	4631      	mov	r1, r6
 8005420:	bf28      	it	cs
 8005422:	463a      	movcs	r2, r7
 8005424:	f7ff fed0 	bl	80051c8 <memcpy>
 8005428:	4631      	mov	r1, r6
 800542a:	4640      	mov	r0, r8
 800542c:	f7ff fef4 	bl	8005218 <_free_r>
 8005430:	e7e1      	b.n	80053f6 <_realloc_r+0x1e>
 8005432:	4635      	mov	r5, r6
 8005434:	e7df      	b.n	80053f6 <_realloc_r+0x1e>
	...

08005438 <_sbrk_r>:
 8005438:	b538      	push	{r3, r4, r5, lr}
 800543a:	4d06      	ldr	r5, [pc, #24]	; (8005454 <_sbrk_r+0x1c>)
 800543c:	2300      	movs	r3, #0
 800543e:	4604      	mov	r4, r0
 8005440:	4608      	mov	r0, r1
 8005442:	602b      	str	r3, [r5, #0]
 8005444:	f7fc ffd2 	bl	80023ec <_sbrk>
 8005448:	1c43      	adds	r3, r0, #1
 800544a:	d102      	bne.n	8005452 <_sbrk_r+0x1a>
 800544c:	682b      	ldr	r3, [r5, #0]
 800544e:	b103      	cbz	r3, 8005452 <_sbrk_r+0x1a>
 8005450:	6023      	str	r3, [r4, #0]
 8005452:	bd38      	pop	{r3, r4, r5, pc}
 8005454:	2000017c 	.word	0x2000017c

08005458 <__malloc_lock>:
 8005458:	4801      	ldr	r0, [pc, #4]	; (8005460 <__malloc_lock+0x8>)
 800545a:	f000 b811 	b.w	8005480 <__retarget_lock_acquire_recursive>
 800545e:	bf00      	nop
 8005460:	20000180 	.word	0x20000180

08005464 <__malloc_unlock>:
 8005464:	4801      	ldr	r0, [pc, #4]	; (800546c <__malloc_unlock+0x8>)
 8005466:	f000 b80c 	b.w	8005482 <__retarget_lock_release_recursive>
 800546a:	bf00      	nop
 800546c:	20000180 	.word	0x20000180

08005470 <_malloc_usable_size_r>:
 8005470:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005474:	1f18      	subs	r0, r3, #4
 8005476:	2b00      	cmp	r3, #0
 8005478:	bfbc      	itt	lt
 800547a:	580b      	ldrlt	r3, [r1, r0]
 800547c:	18c0      	addlt	r0, r0, r3
 800547e:	4770      	bx	lr

08005480 <__retarget_lock_acquire_recursive>:
 8005480:	4770      	bx	lr

08005482 <__retarget_lock_release_recursive>:
 8005482:	4770      	bx	lr

08005484 <_init>:
 8005484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005486:	bf00      	nop
 8005488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800548a:	bc08      	pop	{r3}
 800548c:	469e      	mov	lr, r3
 800548e:	4770      	bx	lr

08005490 <_fini>:
 8005490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005492:	bf00      	nop
 8005494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005496:	bc08      	pop	{r3}
 8005498:	469e      	mov	lr, r3
 800549a:	4770      	bx	lr
