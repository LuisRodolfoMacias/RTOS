
F413ZHT6_WaterReservoirLevelSystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a6c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  08007c4c  08007c4c  00017c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007dd0  08007dd0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007dd0  08007dd0  00017dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007dd8  08007dd8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007dd8  08007dd8  00017dd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ddc  08007ddc  00017ddc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007de0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000418c  20000074  08007e54  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004200  08007e54  00024200  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a515  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003583  00000000  00000000  0003a5b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001568  00000000  00000000  0003db40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001438  00000000  00000000  0003f0a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000245d6  00000000  00000000  000404e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018cc7  00000000  00000000  00064ab6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000db637  00000000  00000000  0007d77d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00158db4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006604  00000000  00000000  00158e04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000074 	.word	0x20000074
 80001fc:	00000000 	.word	0x00000000
 8000200:	08007c34 	.word	0x08007c34

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000078 	.word	0x20000078
 800021c:	08007c34 	.word	0x08007c34

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_uldivmod>:
 8000c28:	b953      	cbnz	r3, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2a:	b94a      	cbnz	r2, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2c:	2900      	cmp	r1, #0
 8000c2e:	bf08      	it	eq
 8000c30:	2800      	cmpeq	r0, #0
 8000c32:	bf1c      	itt	ne
 8000c34:	f04f 31ff 	movne.w	r1, #4294967295
 8000c38:	f04f 30ff 	movne.w	r0, #4294967295
 8000c3c:	f000 b974 	b.w	8000f28 <__aeabi_idiv0>
 8000c40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c48:	f000 f806 	bl	8000c58 <__udivmoddi4>
 8000c4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c54:	b004      	add	sp, #16
 8000c56:	4770      	bx	lr

08000c58 <__udivmoddi4>:
 8000c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c5c:	9d08      	ldr	r5, [sp, #32]
 8000c5e:	4604      	mov	r4, r0
 8000c60:	468e      	mov	lr, r1
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d14d      	bne.n	8000d02 <__udivmoddi4+0xaa>
 8000c66:	428a      	cmp	r2, r1
 8000c68:	4694      	mov	ip, r2
 8000c6a:	d969      	bls.n	8000d40 <__udivmoddi4+0xe8>
 8000c6c:	fab2 f282 	clz	r2, r2
 8000c70:	b152      	cbz	r2, 8000c88 <__udivmoddi4+0x30>
 8000c72:	fa01 f302 	lsl.w	r3, r1, r2
 8000c76:	f1c2 0120 	rsb	r1, r2, #32
 8000c7a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c7e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c82:	ea41 0e03 	orr.w	lr, r1, r3
 8000c86:	4094      	lsls	r4, r2
 8000c88:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c8c:	0c21      	lsrs	r1, r4, #16
 8000c8e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c92:	fa1f f78c 	uxth.w	r7, ip
 8000c96:	fb08 e316 	mls	r3, r8, r6, lr
 8000c9a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c9e:	fb06 f107 	mul.w	r1, r6, r7
 8000ca2:	4299      	cmp	r1, r3
 8000ca4:	d90a      	bls.n	8000cbc <__udivmoddi4+0x64>
 8000ca6:	eb1c 0303 	adds.w	r3, ip, r3
 8000caa:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cae:	f080 811f 	bcs.w	8000ef0 <__udivmoddi4+0x298>
 8000cb2:	4299      	cmp	r1, r3
 8000cb4:	f240 811c 	bls.w	8000ef0 <__udivmoddi4+0x298>
 8000cb8:	3e02      	subs	r6, #2
 8000cba:	4463      	add	r3, ip
 8000cbc:	1a5b      	subs	r3, r3, r1
 8000cbe:	b2a4      	uxth	r4, r4
 8000cc0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cc4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cc8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ccc:	fb00 f707 	mul.w	r7, r0, r7
 8000cd0:	42a7      	cmp	r7, r4
 8000cd2:	d90a      	bls.n	8000cea <__udivmoddi4+0x92>
 8000cd4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cd8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cdc:	f080 810a 	bcs.w	8000ef4 <__udivmoddi4+0x29c>
 8000ce0:	42a7      	cmp	r7, r4
 8000ce2:	f240 8107 	bls.w	8000ef4 <__udivmoddi4+0x29c>
 8000ce6:	4464      	add	r4, ip
 8000ce8:	3802      	subs	r0, #2
 8000cea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cee:	1be4      	subs	r4, r4, r7
 8000cf0:	2600      	movs	r6, #0
 8000cf2:	b11d      	cbz	r5, 8000cfc <__udivmoddi4+0xa4>
 8000cf4:	40d4      	lsrs	r4, r2
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cfc:	4631      	mov	r1, r6
 8000cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d02:	428b      	cmp	r3, r1
 8000d04:	d909      	bls.n	8000d1a <__udivmoddi4+0xc2>
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	f000 80ef 	beq.w	8000eea <__udivmoddi4+0x292>
 8000d0c:	2600      	movs	r6, #0
 8000d0e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d12:	4630      	mov	r0, r6
 8000d14:	4631      	mov	r1, r6
 8000d16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1a:	fab3 f683 	clz	r6, r3
 8000d1e:	2e00      	cmp	r6, #0
 8000d20:	d14a      	bne.n	8000db8 <__udivmoddi4+0x160>
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d302      	bcc.n	8000d2c <__udivmoddi4+0xd4>
 8000d26:	4282      	cmp	r2, r0
 8000d28:	f200 80f9 	bhi.w	8000f1e <__udivmoddi4+0x2c6>
 8000d2c:	1a84      	subs	r4, r0, r2
 8000d2e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d32:	2001      	movs	r0, #1
 8000d34:	469e      	mov	lr, r3
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	d0e0      	beq.n	8000cfc <__udivmoddi4+0xa4>
 8000d3a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d3e:	e7dd      	b.n	8000cfc <__udivmoddi4+0xa4>
 8000d40:	b902      	cbnz	r2, 8000d44 <__udivmoddi4+0xec>
 8000d42:	deff      	udf	#255	; 0xff
 8000d44:	fab2 f282 	clz	r2, r2
 8000d48:	2a00      	cmp	r2, #0
 8000d4a:	f040 8092 	bne.w	8000e72 <__udivmoddi4+0x21a>
 8000d4e:	eba1 010c 	sub.w	r1, r1, ip
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f fe8c 	uxth.w	lr, ip
 8000d5a:	2601      	movs	r6, #1
 8000d5c:	0c20      	lsrs	r0, r4, #16
 8000d5e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d62:	fb07 1113 	mls	r1, r7, r3, r1
 8000d66:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6a:	fb0e f003 	mul.w	r0, lr, r3
 8000d6e:	4288      	cmp	r0, r1
 8000d70:	d908      	bls.n	8000d84 <__udivmoddi4+0x12c>
 8000d72:	eb1c 0101 	adds.w	r1, ip, r1
 8000d76:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x12a>
 8000d7c:	4288      	cmp	r0, r1
 8000d7e:	f200 80cb 	bhi.w	8000f18 <__udivmoddi4+0x2c0>
 8000d82:	4643      	mov	r3, r8
 8000d84:	1a09      	subs	r1, r1, r0
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d8c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d90:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d94:	fb0e fe00 	mul.w	lr, lr, r0
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d908      	bls.n	8000dae <__udivmoddi4+0x156>
 8000d9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000da0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000da4:	d202      	bcs.n	8000dac <__udivmoddi4+0x154>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f200 80bb 	bhi.w	8000f22 <__udivmoddi4+0x2ca>
 8000dac:	4608      	mov	r0, r1
 8000dae:	eba4 040e 	sub.w	r4, r4, lr
 8000db2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000db6:	e79c      	b.n	8000cf2 <__udivmoddi4+0x9a>
 8000db8:	f1c6 0720 	rsb	r7, r6, #32
 8000dbc:	40b3      	lsls	r3, r6
 8000dbe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dc2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dc6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dca:	fa01 f306 	lsl.w	r3, r1, r6
 8000dce:	431c      	orrs	r4, r3
 8000dd0:	40f9      	lsrs	r1, r7
 8000dd2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dd6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dda:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dde:	0c20      	lsrs	r0, r4, #16
 8000de0:	fa1f fe8c 	uxth.w	lr, ip
 8000de4:	fb09 1118 	mls	r1, r9, r8, r1
 8000de8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dec:	fb08 f00e 	mul.w	r0, r8, lr
 8000df0:	4288      	cmp	r0, r1
 8000df2:	fa02 f206 	lsl.w	r2, r2, r6
 8000df6:	d90b      	bls.n	8000e10 <__udivmoddi4+0x1b8>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e00:	f080 8088 	bcs.w	8000f14 <__udivmoddi4+0x2bc>
 8000e04:	4288      	cmp	r0, r1
 8000e06:	f240 8085 	bls.w	8000f14 <__udivmoddi4+0x2bc>
 8000e0a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e0e:	4461      	add	r1, ip
 8000e10:	1a09      	subs	r1, r1, r0
 8000e12:	b2a4      	uxth	r4, r4
 8000e14:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e18:	fb09 1110 	mls	r1, r9, r0, r1
 8000e1c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e20:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e24:	458e      	cmp	lr, r1
 8000e26:	d908      	bls.n	8000e3a <__udivmoddi4+0x1e2>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e30:	d26c      	bcs.n	8000f0c <__udivmoddi4+0x2b4>
 8000e32:	458e      	cmp	lr, r1
 8000e34:	d96a      	bls.n	8000f0c <__udivmoddi4+0x2b4>
 8000e36:	3802      	subs	r0, #2
 8000e38:	4461      	add	r1, ip
 8000e3a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e3e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e42:	eba1 010e 	sub.w	r1, r1, lr
 8000e46:	42a1      	cmp	r1, r4
 8000e48:	46c8      	mov	r8, r9
 8000e4a:	46a6      	mov	lr, r4
 8000e4c:	d356      	bcc.n	8000efc <__udivmoddi4+0x2a4>
 8000e4e:	d053      	beq.n	8000ef8 <__udivmoddi4+0x2a0>
 8000e50:	b15d      	cbz	r5, 8000e6a <__udivmoddi4+0x212>
 8000e52:	ebb3 0208 	subs.w	r2, r3, r8
 8000e56:	eb61 010e 	sbc.w	r1, r1, lr
 8000e5a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e5e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e62:	40f1      	lsrs	r1, r6
 8000e64:	431f      	orrs	r7, r3
 8000e66:	e9c5 7100 	strd	r7, r1, [r5]
 8000e6a:	2600      	movs	r6, #0
 8000e6c:	4631      	mov	r1, r6
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	f1c2 0320 	rsb	r3, r2, #32
 8000e76:	40d8      	lsrs	r0, r3
 8000e78:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e7c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e80:	4091      	lsls	r1, r2
 8000e82:	4301      	orrs	r1, r0
 8000e84:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e88:	fa1f fe8c 	uxth.w	lr, ip
 8000e8c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e90:	fb07 3610 	mls	r6, r7, r0, r3
 8000e94:	0c0b      	lsrs	r3, r1, #16
 8000e96:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e9a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e9e:	429e      	cmp	r6, r3
 8000ea0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ea4:	d908      	bls.n	8000eb8 <__udivmoddi4+0x260>
 8000ea6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eaa:	f100 38ff 	add.w	r8, r0, #4294967295
 8000eae:	d22f      	bcs.n	8000f10 <__udivmoddi4+0x2b8>
 8000eb0:	429e      	cmp	r6, r3
 8000eb2:	d92d      	bls.n	8000f10 <__udivmoddi4+0x2b8>
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	4463      	add	r3, ip
 8000eb8:	1b9b      	subs	r3, r3, r6
 8000eba:	b289      	uxth	r1, r1
 8000ebc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ec0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ec4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ec8:	fb06 f30e 	mul.w	r3, r6, lr
 8000ecc:	428b      	cmp	r3, r1
 8000ece:	d908      	bls.n	8000ee2 <__udivmoddi4+0x28a>
 8000ed0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ed8:	d216      	bcs.n	8000f08 <__udivmoddi4+0x2b0>
 8000eda:	428b      	cmp	r3, r1
 8000edc:	d914      	bls.n	8000f08 <__udivmoddi4+0x2b0>
 8000ede:	3e02      	subs	r6, #2
 8000ee0:	4461      	add	r1, ip
 8000ee2:	1ac9      	subs	r1, r1, r3
 8000ee4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ee8:	e738      	b.n	8000d5c <__udivmoddi4+0x104>
 8000eea:	462e      	mov	r6, r5
 8000eec:	4628      	mov	r0, r5
 8000eee:	e705      	b.n	8000cfc <__udivmoddi4+0xa4>
 8000ef0:	4606      	mov	r6, r0
 8000ef2:	e6e3      	b.n	8000cbc <__udivmoddi4+0x64>
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	e6f8      	b.n	8000cea <__udivmoddi4+0x92>
 8000ef8:	454b      	cmp	r3, r9
 8000efa:	d2a9      	bcs.n	8000e50 <__udivmoddi4+0x1f8>
 8000efc:	ebb9 0802 	subs.w	r8, r9, r2
 8000f00:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f04:	3801      	subs	r0, #1
 8000f06:	e7a3      	b.n	8000e50 <__udivmoddi4+0x1f8>
 8000f08:	4646      	mov	r6, r8
 8000f0a:	e7ea      	b.n	8000ee2 <__udivmoddi4+0x28a>
 8000f0c:	4620      	mov	r0, r4
 8000f0e:	e794      	b.n	8000e3a <__udivmoddi4+0x1e2>
 8000f10:	4640      	mov	r0, r8
 8000f12:	e7d1      	b.n	8000eb8 <__udivmoddi4+0x260>
 8000f14:	46d0      	mov	r8, sl
 8000f16:	e77b      	b.n	8000e10 <__udivmoddi4+0x1b8>
 8000f18:	3b02      	subs	r3, #2
 8000f1a:	4461      	add	r1, ip
 8000f1c:	e732      	b.n	8000d84 <__udivmoddi4+0x12c>
 8000f1e:	4630      	mov	r0, r6
 8000f20:	e709      	b.n	8000d36 <__udivmoddi4+0xde>
 8000f22:	4464      	add	r4, ip
 8000f24:	3802      	subs	r0, #2
 8000f26:	e742      	b.n	8000dae <__udivmoddi4+0x156>

08000f28 <__aeabi_idiv0>:
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop

08000f2c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer,
		StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8000f2c:	b480      	push	{r7}
 8000f2e:	b085      	sub	sp, #20
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	60f8      	str	r0, [r7, #12]
 8000f34:	60b9      	str	r1, [r7, #8]
 8000f36:	607a      	str	r2, [r7, #4]
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	4a07      	ldr	r2, [pc, #28]	; (8000f58 <vApplicationGetIdleTaskMemory+0x2c>)
 8000f3c:	601a      	str	r2, [r3, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000f3e:	68bb      	ldr	r3, [r7, #8]
 8000f40:	4a06      	ldr	r2, [pc, #24]	; (8000f5c <vApplicationGetIdleTaskMemory+0x30>)
 8000f42:	601a      	str	r2, [r3, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2280      	movs	r2, #128	; 0x80
 8000f48:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 8000f4a:	bf00      	nop
 8000f4c:	3714      	adds	r7, #20
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	20000090 	.word	0x20000090
 8000f5c:	20000144 	.word	0x20000144

08000f60 <ITM_SendChar>:
	 \li Just returns when no debugger is connected that has booked the output.
	 \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
	 \param [in]     ch  Character to transmit.
	 \returns            Character to transmit.
	 */
	__STATIC_INLINE uint32_t ITM_SendChar(uint32_t ch) {
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
		if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) && /* ITM enabled */
 8000f68:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f6c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000f70:	f003 0301 	and.w	r3, r3, #1
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d013      	beq.n	8000fa0 <ITM_SendChar+0x40>
		((ITM->TER & 1UL) != 0UL)) /* ITM Port #0 enabled */
 8000f78:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f7c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000f80:	f003 0301 	and.w	r3, r3, #1
		if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) && /* ITM enabled */
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d00b      	beq.n	8000fa0 <ITM_SendChar+0x40>
		{
			while (ITM->PORT[0U].u32 == 0UL) {
 8000f88:	e000      	b.n	8000f8c <ITM_SendChar+0x2c>
				__NOP();
 8000f8a:	bf00      	nop
			while (ITM->PORT[0U].u32 == 0UL) {
 8000f8c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d0f9      	beq.n	8000f8a <ITM_SendChar+0x2a>
			}
			ITM->PORT[0U].u8 = (uint8_t) ch;
 8000f96:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f9a:	687a      	ldr	r2, [r7, #4]
 8000f9c:	b2d2      	uxtb	r2, r2
 8000f9e:	701a      	strb	r2, [r3, #0]
		}
		return (ch);
 8000fa0:	687b      	ldr	r3, [r7, #4]
	}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr

08000fae <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
unsigned int USSevent_flag = 0;

int _write(int file, char *ptr, int len)
{
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	b086      	sub	sp, #24
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	60f8      	str	r0, [r7, #12]
 8000fb6:	60b9      	str	r1, [r7, #8]
 8000fb8:	607a      	str	r2, [r7, #4]
	/* Implement the write code here*/
	int i=0;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	617b      	str	r3, [r7, #20]
	for(i=0 ; i<len ; i++)
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	617b      	str	r3, [r7, #20]
 8000fc2:	e009      	b.n	8000fd8 <_write+0x2a>
		ITM_SendChar((*ptr++));
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	1c5a      	adds	r2, r3, #1
 8000fc8:	60ba      	str	r2, [r7, #8]
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff ffc7 	bl	8000f60 <ITM_SendChar>
	for(i=0 ; i<len ; i++)
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	617b      	str	r3, [r7, #20]
 8000fd8:	697a      	ldr	r2, [r7, #20]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	dbf1      	blt.n	8000fc4 <_write+0x16>
	return len;
 8000fe0:	687b      	ldr	r3, [r7, #4]
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3718      	adds	r7, #24
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
	...

08000fec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fec:	b5b0      	push	{r4, r5, r7, lr}
 8000fee:	b0a0      	sub	sp, #128	; 0x80
 8000ff0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ff2:	f000 fdbb 	bl	8001b6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ff6:	f000 f88b 	bl	8001110 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ffa:	f000 f99b 	bl	8001334 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000ffe:	f000 f8f1 	bl	80011e4 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001002:	f000 f91d 	bl	8001240 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8001006:	f000 f96b 	bl	80012e0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("starting....\n");
 800100a:	4834      	ldr	r0, [pc, #208]	; (80010dc <main+0xf0>)
 800100c:	f005 fcb2 	bl	8006974 <puts>
  HAL_TIM_Base_Start(&htim1);
 8001010:	4833      	ldr	r0, [pc, #204]	; (80010e0 <main+0xf4>)
 8001012:	f001 fee3 	bl	8002ddc <HAL_TIM_Base_Start>
  HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);
 8001016:	2200      	movs	r2, #0
 8001018:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800101c:	4831      	ldr	r0, [pc, #196]	; (80010e4 <main+0xf8>)
 800101e:	f001 f899 	bl	8002154 <HAL_GPIO_WritePin>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of myQueue */
  osMessageQDef(myQueue, 16, uint16_t);
 8001022:	4b31      	ldr	r3, [pc, #196]	; (80010e8 <main+0xfc>)
 8001024:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8001028:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800102a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueueHandle = osMessageCreate(osMessageQ(myQueue), NULL);
 800102e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001032:	2100      	movs	r1, #0
 8001034:	4618      	mov	r0, r3
 8001036:	f002 ffce 	bl	8003fd6 <osMessageCreate>
 800103a:	4603      	mov	r3, r0
 800103c:	4a2b      	ldr	r2, [pc, #172]	; (80010ec <main+0x100>)
 800103e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001040:	4b2b      	ldr	r3, [pc, #172]	; (80010f0 <main+0x104>)
 8001042:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8001046:	461d      	mov	r5, r3
 8001048:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800104a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800104c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001050:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001054:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001058:	2100      	movs	r1, #0
 800105a:	4618      	mov	r0, r3
 800105c:	f002 ff5b 	bl	8003f16 <osThreadCreate>
 8001060:	4603      	mov	r3, r0
 8001062:	4a24      	ldr	r2, [pc, #144]	; (80010f4 <main+0x108>)
 8001064:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  // define the thread
  osThreadDef(WFSTask, WFSTask_init, osPriorityNormal, 0, 128);
 8001066:	4b24      	ldr	r3, [pc, #144]	; (80010f8 <main+0x10c>)
 8001068:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800106c:	461d      	mov	r5, r3
 800106e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001070:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001072:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001076:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadDef(USSTask, USSTask_init, osPriorityNormal, 0, 128);
 800107a:	4b20      	ldr	r3, [pc, #128]	; (80010fc <main+0x110>)
 800107c:	f107 041c 	add.w	r4, r7, #28
 8001080:	461d      	mov	r5, r3
 8001082:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001084:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001086:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800108a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadDef(CommsTask, CommTask_init, osPriorityNormal, 0, 128);
 800108e:	4b1c      	ldr	r3, [pc, #112]	; (8001100 <main+0x114>)
 8001090:	463c      	mov	r4, r7
 8001092:	461d      	mov	r5, r3
 8001094:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001096:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001098:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800109c:	e884 0007 	stmia.w	r4, {r0, r1, r2}

  // create thread and assign ID
  WFSTaskhandler = osThreadCreate(osThread(WFSTask), NULL);
 80010a0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80010a4:	2100      	movs	r1, #0
 80010a6:	4618      	mov	r0, r3
 80010a8:	f002 ff35 	bl	8003f16 <osThreadCreate>
 80010ac:	4603      	mov	r3, r0
 80010ae:	4a15      	ldr	r2, [pc, #84]	; (8001104 <main+0x118>)
 80010b0:	6013      	str	r3, [r2, #0]
  USSTaskhandler = osThreadCreate(osThread(USSTask), NULL);
 80010b2:	f107 031c 	add.w	r3, r7, #28
 80010b6:	2100      	movs	r1, #0
 80010b8:	4618      	mov	r0, r3
 80010ba:	f002 ff2c 	bl	8003f16 <osThreadCreate>
 80010be:	4603      	mov	r3, r0
 80010c0:	4a11      	ldr	r2, [pc, #68]	; (8001108 <main+0x11c>)
 80010c2:	6013      	str	r3, [r2, #0]
  CommTaskhandler = osThreadCreate(osThread(CommsTask), NULL);
 80010c4:	463b      	mov	r3, r7
 80010c6:	2100      	movs	r1, #0
 80010c8:	4618      	mov	r0, r3
 80010ca:	f002 ff24 	bl	8003f16 <osThreadCreate>
 80010ce:	4603      	mov	r3, r0
 80010d0:	4a0e      	ldr	r2, [pc, #56]	; (800110c <main+0x120>)
 80010d2:	6013      	str	r3, [r2, #0]


  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80010d4:	f002 ff18 	bl	8003f08 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010d8:	e7fe      	b.n	80010d8 <main+0xec>
 80010da:	bf00      	nop
 80010dc:	08007c74 	.word	0x08007c74
 80010e0:	20000398 	.word	0x20000398
 80010e4:	40020c00 	.word	0x40020c00
 80010e8:	08007c84 	.word	0x08007c84
 80010ec:	20000428 	.word	0x20000428
 80010f0:	08007c94 	.word	0x08007c94
 80010f4:	20000424 	.word	0x20000424
 80010f8:	08007cb0 	.word	0x08007cb0
 80010fc:	08007ccc 	.word	0x08007ccc
 8001100:	08007ce8 	.word	0x08007ce8
 8001104:	20000440 	.word	0x20000440
 8001108:	20000444 	.word	0x20000444
 800110c:	20000448 	.word	0x20000448

08001110 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b094      	sub	sp, #80	; 0x50
 8001114:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001116:	f107 031c 	add.w	r3, r7, #28
 800111a:	2234      	movs	r2, #52	; 0x34
 800111c:	2100      	movs	r1, #0
 800111e:	4618      	mov	r0, r3
 8001120:	f005 fb1d 	bl	800675e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001124:	f107 0308 	add.w	r3, r7, #8
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]
 8001130:	60da      	str	r2, [r3, #12]
 8001132:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001134:	2300      	movs	r3, #0
 8001136:	607b      	str	r3, [r7, #4]
 8001138:	4b28      	ldr	r3, [pc, #160]	; (80011dc <SystemClock_Config+0xcc>)
 800113a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113c:	4a27      	ldr	r2, [pc, #156]	; (80011dc <SystemClock_Config+0xcc>)
 800113e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001142:	6413      	str	r3, [r2, #64]	; 0x40
 8001144:	4b25      	ldr	r3, [pc, #148]	; (80011dc <SystemClock_Config+0xcc>)
 8001146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001148:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800114c:	607b      	str	r3, [r7, #4]
 800114e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001150:	2300      	movs	r3, #0
 8001152:	603b      	str	r3, [r7, #0]
 8001154:	4b22      	ldr	r3, [pc, #136]	; (80011e0 <SystemClock_Config+0xd0>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a21      	ldr	r2, [pc, #132]	; (80011e0 <SystemClock_Config+0xd0>)
 800115a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800115e:	6013      	str	r3, [r2, #0]
 8001160:	4b1f      	ldr	r3, [pc, #124]	; (80011e0 <SystemClock_Config+0xd0>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001168:	603b      	str	r3, [r7, #0]
 800116a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800116c:	2302      	movs	r3, #2
 800116e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001170:	2301      	movs	r3, #1
 8001172:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001174:	2310      	movs	r3, #16
 8001176:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001178:	2302      	movs	r3, #2
 800117a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800117c:	2300      	movs	r3, #0
 800117e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001180:	2308      	movs	r3, #8
 8001182:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001184:	2348      	movs	r3, #72	; 0x48
 8001186:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001188:	2302      	movs	r3, #2
 800118a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800118c:	2302      	movs	r3, #2
 800118e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001190:	2302      	movs	r3, #2
 8001192:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001194:	f107 031c 	add.w	r3, r7, #28
 8001198:	4618      	mov	r0, r3
 800119a:	f001 fb4b 	bl	8002834 <HAL_RCC_OscConfig>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80011a4:	f000 fa9e 	bl	80016e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011a8:	230f      	movs	r3, #15
 80011aa:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011ac:	2302      	movs	r3, #2
 80011ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011b0:	2300      	movs	r3, #0
 80011b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011b8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011ba:	2300      	movs	r3, #0
 80011bc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011be:	f107 0308 	add.w	r3, r7, #8
 80011c2:	2102      	movs	r1, #2
 80011c4:	4618      	mov	r0, r3
 80011c6:	f001 f923 	bl	8002410 <HAL_RCC_ClockConfig>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80011d0:	f000 fa88 	bl	80016e4 <Error_Handler>
  }
}
 80011d4:	bf00      	nop
 80011d6:	3750      	adds	r7, #80	; 0x50
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	40023800 	.word	0x40023800
 80011e0:	40007000 	.word	0x40007000

080011e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011e8:	4b12      	ldr	r3, [pc, #72]	; (8001234 <MX_I2C1_Init+0x50>)
 80011ea:	4a13      	ldr	r2, [pc, #76]	; (8001238 <MX_I2C1_Init+0x54>)
 80011ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80011ee:	4b11      	ldr	r3, [pc, #68]	; (8001234 <MX_I2C1_Init+0x50>)
 80011f0:	4a12      	ldr	r2, [pc, #72]	; (800123c <MX_I2C1_Init+0x58>)
 80011f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011f4:	4b0f      	ldr	r3, [pc, #60]	; (8001234 <MX_I2C1_Init+0x50>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80011fa:	4b0e      	ldr	r3, [pc, #56]	; (8001234 <MX_I2C1_Init+0x50>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001200:	4b0c      	ldr	r3, [pc, #48]	; (8001234 <MX_I2C1_Init+0x50>)
 8001202:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001206:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001208:	4b0a      	ldr	r3, [pc, #40]	; (8001234 <MX_I2C1_Init+0x50>)
 800120a:	2200      	movs	r2, #0
 800120c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800120e:	4b09      	ldr	r3, [pc, #36]	; (8001234 <MX_I2C1_Init+0x50>)
 8001210:	2200      	movs	r2, #0
 8001212:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001214:	4b07      	ldr	r3, [pc, #28]	; (8001234 <MX_I2C1_Init+0x50>)
 8001216:	2200      	movs	r2, #0
 8001218:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800121a:	4b06      	ldr	r3, [pc, #24]	; (8001234 <MX_I2C1_Init+0x50>)
 800121c:	2200      	movs	r2, #0
 800121e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001220:	4804      	ldr	r0, [pc, #16]	; (8001234 <MX_I2C1_Init+0x50>)
 8001222:	f000 ffb1 	bl	8002188 <HAL_I2C_Init>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800122c:	f000 fa5a 	bl	80016e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001230:	bf00      	nop
 8001232:	bd80      	pop	{r7, pc}
 8001234:	20000344 	.word	0x20000344
 8001238:	40005400 	.word	0x40005400
 800123c:	000186a0 	.word	0x000186a0

08001240 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b086      	sub	sp, #24
 8001244:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001246:	f107 0308 	add.w	r3, r7, #8
 800124a:	2200      	movs	r2, #0
 800124c:	601a      	str	r2, [r3, #0]
 800124e:	605a      	str	r2, [r3, #4]
 8001250:	609a      	str	r2, [r3, #8]
 8001252:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001254:	463b      	mov	r3, r7
 8001256:	2200      	movs	r2, #0
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800125c:	4b1e      	ldr	r3, [pc, #120]	; (80012d8 <MX_TIM1_Init+0x98>)
 800125e:	4a1f      	ldr	r2, [pc, #124]	; (80012dc <MX_TIM1_Init+0x9c>)
 8001260:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8001262:	4b1d      	ldr	r3, [pc, #116]	; (80012d8 <MX_TIM1_Init+0x98>)
 8001264:	2247      	movs	r2, #71	; 0x47
 8001266:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001268:	4b1b      	ldr	r3, [pc, #108]	; (80012d8 <MX_TIM1_Init+0x98>)
 800126a:	2200      	movs	r2, #0
 800126c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 800126e:	4b1a      	ldr	r3, [pc, #104]	; (80012d8 <MX_TIM1_Init+0x98>)
 8001270:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001274:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001276:	4b18      	ldr	r3, [pc, #96]	; (80012d8 <MX_TIM1_Init+0x98>)
 8001278:	2200      	movs	r2, #0
 800127a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800127c:	4b16      	ldr	r3, [pc, #88]	; (80012d8 <MX_TIM1_Init+0x98>)
 800127e:	2200      	movs	r2, #0
 8001280:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001282:	4b15      	ldr	r3, [pc, #84]	; (80012d8 <MX_TIM1_Init+0x98>)
 8001284:	2200      	movs	r2, #0
 8001286:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001288:	4813      	ldr	r0, [pc, #76]	; (80012d8 <MX_TIM1_Init+0x98>)
 800128a:	f001 fd57 	bl	8002d3c <HAL_TIM_Base_Init>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001294:	f000 fa26 	bl	80016e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001298:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800129c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800129e:	f107 0308 	add.w	r3, r7, #8
 80012a2:	4619      	mov	r1, r3
 80012a4:	480c      	ldr	r0, [pc, #48]	; (80012d8 <MX_TIM1_Init+0x98>)
 80012a6:	f001 ff79 	bl	800319c <HAL_TIM_ConfigClockSource>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80012b0:	f000 fa18 	bl	80016e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012b4:	2300      	movs	r3, #0
 80012b6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012b8:	2300      	movs	r3, #0
 80012ba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012bc:	463b      	mov	r3, r7
 80012be:	4619      	mov	r1, r3
 80012c0:	4805      	ldr	r0, [pc, #20]	; (80012d8 <MX_TIM1_Init+0x98>)
 80012c2:	f002 f995 	bl	80035f0 <HAL_TIMEx_MasterConfigSynchronization>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80012cc:	f000 fa0a 	bl	80016e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80012d0:	bf00      	nop
 80012d2:	3718      	adds	r7, #24
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	20000398 	.word	0x20000398
 80012dc:	40010000 	.word	0x40010000

080012e0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80012e4:	4b11      	ldr	r3, [pc, #68]	; (800132c <MX_USART3_UART_Init+0x4c>)
 80012e6:	4a12      	ldr	r2, [pc, #72]	; (8001330 <MX_USART3_UART_Init+0x50>)
 80012e8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80012ea:	4b10      	ldr	r3, [pc, #64]	; (800132c <MX_USART3_UART_Init+0x4c>)
 80012ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012f0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80012f2:	4b0e      	ldr	r3, [pc, #56]	; (800132c <MX_USART3_UART_Init+0x4c>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80012f8:	4b0c      	ldr	r3, [pc, #48]	; (800132c <MX_USART3_UART_Init+0x4c>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80012fe:	4b0b      	ldr	r3, [pc, #44]	; (800132c <MX_USART3_UART_Init+0x4c>)
 8001300:	2200      	movs	r2, #0
 8001302:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001304:	4b09      	ldr	r3, [pc, #36]	; (800132c <MX_USART3_UART_Init+0x4c>)
 8001306:	220c      	movs	r2, #12
 8001308:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800130a:	4b08      	ldr	r3, [pc, #32]	; (800132c <MX_USART3_UART_Init+0x4c>)
 800130c:	2200      	movs	r2, #0
 800130e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001310:	4b06      	ldr	r3, [pc, #24]	; (800132c <MX_USART3_UART_Init+0x4c>)
 8001312:	2200      	movs	r2, #0
 8001314:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001316:	4805      	ldr	r0, [pc, #20]	; (800132c <MX_USART3_UART_Init+0x4c>)
 8001318:	f002 f9fa 	bl	8003710 <HAL_UART_Init>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001322:	f000 f9df 	bl	80016e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	200003e0 	.word	0x200003e0
 8001330:	40004800 	.word	0x40004800

08001334 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b08a      	sub	sp, #40	; 0x28
 8001338:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800133a:	f107 0314 	add.w	r3, r7, #20
 800133e:	2200      	movs	r2, #0
 8001340:	601a      	str	r2, [r3, #0]
 8001342:	605a      	str	r2, [r3, #4]
 8001344:	609a      	str	r2, [r3, #8]
 8001346:	60da      	str	r2, [r3, #12]
 8001348:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	613b      	str	r3, [r7, #16]
 800134e:	4b2d      	ldr	r3, [pc, #180]	; (8001404 <MX_GPIO_Init+0xd0>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	4a2c      	ldr	r2, [pc, #176]	; (8001404 <MX_GPIO_Init+0xd0>)
 8001354:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001358:	6313      	str	r3, [r2, #48]	; 0x30
 800135a:	4b2a      	ldr	r3, [pc, #168]	; (8001404 <MX_GPIO_Init+0xd0>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001362:	613b      	str	r3, [r7, #16]
 8001364:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	60fb      	str	r3, [r7, #12]
 800136a:	4b26      	ldr	r3, [pc, #152]	; (8001404 <MX_GPIO_Init+0xd0>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	4a25      	ldr	r2, [pc, #148]	; (8001404 <MX_GPIO_Init+0xd0>)
 8001370:	f043 0301 	orr.w	r3, r3, #1
 8001374:	6313      	str	r3, [r2, #48]	; 0x30
 8001376:	4b23      	ldr	r3, [pc, #140]	; (8001404 <MX_GPIO_Init+0xd0>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	60bb      	str	r3, [r7, #8]
 8001386:	4b1f      	ldr	r3, [pc, #124]	; (8001404 <MX_GPIO_Init+0xd0>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	4a1e      	ldr	r2, [pc, #120]	; (8001404 <MX_GPIO_Init+0xd0>)
 800138c:	f043 0308 	orr.w	r3, r3, #8
 8001390:	6313      	str	r3, [r2, #48]	; 0x30
 8001392:	4b1c      	ldr	r3, [pc, #112]	; (8001404 <MX_GPIO_Init+0xd0>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	f003 0308 	and.w	r3, r3, #8
 800139a:	60bb      	str	r3, [r7, #8]
 800139c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	607b      	str	r3, [r7, #4]
 80013a2:	4b18      	ldr	r3, [pc, #96]	; (8001404 <MX_GPIO_Init+0xd0>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	4a17      	ldr	r2, [pc, #92]	; (8001404 <MX_GPIO_Init+0xd0>)
 80013a8:	f043 0302 	orr.w	r3, r3, #2
 80013ac:	6313      	str	r3, [r2, #48]	; 0x30
 80013ae:	4b15      	ldr	r3, [pc, #84]	; (8001404 <MX_GPIO_Init+0xd0>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	f003 0302 	and.w	r3, r3, #2
 80013b6:	607b      	str	r3, [r7, #4]
 80013b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80013ba:	2200      	movs	r2, #0
 80013bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013c0:	4811      	ldr	r0, [pc, #68]	; (8001408 <MX_GPIO_Init+0xd4>)
 80013c2:	f000 fec7 	bl	8002154 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013c6:	23c0      	movs	r3, #192	; 0xc0
 80013c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013ca:	2300      	movs	r3, #0
 80013cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ce:	2300      	movs	r3, #0
 80013d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d2:	f107 0314 	add.w	r3, r7, #20
 80013d6:	4619      	mov	r1, r3
 80013d8:	480c      	ldr	r0, [pc, #48]	; (800140c <MX_GPIO_Init+0xd8>)
 80013da:	f000 fd0f 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80013de:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e4:	2301      	movs	r3, #1
 80013e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ec:	2300      	movs	r3, #0
 80013ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013f0:	f107 0314 	add.w	r3, r7, #20
 80013f4:	4619      	mov	r1, r3
 80013f6:	4804      	ldr	r0, [pc, #16]	; (8001408 <MX_GPIO_Init+0xd4>)
 80013f8:	f000 fd00 	bl	8001dfc <HAL_GPIO_Init>

}
 80013fc:	bf00      	nop
 80013fe:	3728      	adds	r7, #40	; 0x28
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	40023800 	.word	0x40023800
 8001408:	40020c00 	.word	0x40020c00
 800140c:	40020000 	.word	0x40020000

08001410 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  printf("DefaultTask\n");
 8001418:	4803      	ldr	r0, [pc, #12]	; (8001428 <StartDefaultTask+0x18>)
 800141a:	f005 faab 	bl	8006974 <puts>
    osDelay(1000);
 800141e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001422:	f002 fdc4 	bl	8003fae <osDelay>
	  printf("DefaultTask\n");
 8001426:	e7f7      	b.n	8001418 <StartDefaultTask+0x8>
 8001428:	08007d04 	.word	0x08007d04
 800142c:	00000000 	.word	0x00000000

08001430 <USSTask_init>:
  * @param  htim : TIM handle
  * @retval None
  */

void USSTask_init(void const * argument)
{
 8001430:	b590      	push	{r4, r7, lr}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  if(USSevent_flag == 1){
 8001438:	4b47      	ldr	r3, [pc, #284]	; (8001558 <USSTask_init+0x128>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	2b01      	cmp	r3, #1
 800143e:	d17c      	bne.n	800153a <USSTask_init+0x10a>
	  	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8001440:	2201      	movs	r2, #1
 8001442:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001446:	4845      	ldr	r0, [pc, #276]	; (800155c <USSTask_init+0x12c>)
 8001448:	f000 fe84 	bl	8002154 <HAL_GPIO_WritePin>
	  	__HAL_TIM_SET_COUNTER(&htim1, 0);
 800144c:	4b44      	ldr	r3, [pc, #272]	; (8001560 <USSTask_init+0x130>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2200      	movs	r2, #0
 8001452:	625a      	str	r2, [r3, #36]	; 0x24
	  	while (__HAL_TIM_GET_COUNTER (&htim1) < 20);  // wait for 20 us
 8001454:	bf00      	nop
 8001456:	4b42      	ldr	r3, [pc, #264]	; (8001560 <USSTask_init+0x130>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800145c:	2b13      	cmp	r3, #19
 800145e:	d9fa      	bls.n	8001456 <USSTask_init+0x26>
	  	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8001460:	2200      	movs	r2, #0
 8001462:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001466:	483d      	ldr	r0, [pc, #244]	; (800155c <USSTask_init+0x12c>)
 8001468:	f000 fe74 	bl	8002154 <HAL_GPIO_WritePin>

	  	pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 800146c:	f000 fbb4 	bl	8001bd8 <HAL_GetTick>
 8001470:	4603      	mov	r3, r0
 8001472:	4a3c      	ldr	r2, [pc, #240]	; (8001564 <USSTask_init+0x134>)
 8001474:	6013      	str	r3, [r2, #0]
	  	 // wait for the echo pin to go high
	  	while (!(HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 10 >  HAL_GetTick());
 8001476:	bf00      	nop
 8001478:	2180      	movs	r1, #128	; 0x80
 800147a:	483b      	ldr	r0, [pc, #236]	; (8001568 <USSTask_init+0x138>)
 800147c:	f000 fe52 	bl	8002124 <HAL_GPIO_ReadPin>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d108      	bne.n	8001498 <USSTask_init+0x68>
 8001486:	4b37      	ldr	r3, [pc, #220]	; (8001564 <USSTask_init+0x134>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f103 040a 	add.w	r4, r3, #10
 800148e:	f000 fba3 	bl	8001bd8 <HAL_GetTick>
 8001492:	4603      	mov	r3, r0
 8001494:	429c      	cmp	r4, r3
 8001496:	d8ef      	bhi.n	8001478 <USSTask_init+0x48>
	  	Value1 = __HAL_TIM_GET_COUNTER (&htim1);
 8001498:	4b31      	ldr	r3, [pc, #196]	; (8001560 <USSTask_init+0x130>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800149e:	4a33      	ldr	r2, [pc, #204]	; (800156c <USSTask_init+0x13c>)
 80014a0:	6013      	str	r3, [r2, #0]

	  	pMillis = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 80014a2:	f000 fb99 	bl	8001bd8 <HAL_GetTick>
 80014a6:	4603      	mov	r3, r0
 80014a8:	4a2e      	ldr	r2, [pc, #184]	; (8001564 <USSTask_init+0x134>)
 80014aa:	6013      	str	r3, [r2, #0]
	  	 // wait for the echo pin to go low
	  	while ((HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 50 > HAL_GetTick());
 80014ac:	bf00      	nop
 80014ae:	2180      	movs	r1, #128	; 0x80
 80014b0:	482d      	ldr	r0, [pc, #180]	; (8001568 <USSTask_init+0x138>)
 80014b2:	f000 fe37 	bl	8002124 <HAL_GPIO_ReadPin>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d008      	beq.n	80014ce <USSTask_init+0x9e>
 80014bc:	4b29      	ldr	r3, [pc, #164]	; (8001564 <USSTask_init+0x134>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f103 0432 	add.w	r4, r3, #50	; 0x32
 80014c4:	f000 fb88 	bl	8001bd8 <HAL_GetTick>
 80014c8:	4603      	mov	r3, r0
 80014ca:	429c      	cmp	r4, r3
 80014cc:	d8ef      	bhi.n	80014ae <USSTask_init+0x7e>
	  	Value2 = __HAL_TIM_GET_COUNTER (&htim1);
 80014ce:	4b24      	ldr	r3, [pc, #144]	; (8001560 <USSTask_init+0x130>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d4:	4a26      	ldr	r2, [pc, #152]	; (8001570 <USSTask_init+0x140>)
 80014d6:	6013      	str	r3, [r2, #0]

	  	Distance = (Value2-Value1)* 0.034/2;
 80014d8:	4b25      	ldr	r3, [pc, #148]	; (8001570 <USSTask_init+0x140>)
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	4b23      	ldr	r3, [pc, #140]	; (800156c <USSTask_init+0x13c>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	4618      	mov	r0, r3
 80014e4:	f7ff f82e 	bl	8000544 <__aeabi_ui2d>
 80014e8:	a319      	add	r3, pc, #100	; (adr r3, 8001550 <USSTask_init+0x120>)
 80014ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ee:	f7ff f8a3 	bl	8000638 <__aeabi_dmul>
 80014f2:	4602      	mov	r2, r0
 80014f4:	460b      	mov	r3, r1
 80014f6:	4610      	mov	r0, r2
 80014f8:	4619      	mov	r1, r3
 80014fa:	f04f 0200 	mov.w	r2, #0
 80014fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001502:	f7ff f9c3 	bl	800088c <__aeabi_ddiv>
 8001506:	4602      	mov	r2, r0
 8001508:	460b      	mov	r3, r1
 800150a:	4610      	mov	r0, r2
 800150c:	4619      	mov	r1, r3
 800150e:	f7ff fb6b 	bl	8000be8 <__aeabi_d2uiz>
 8001512:	4603      	mov	r3, r0
 8001514:	b29a      	uxth	r2, r3
 8001516:	4b17      	ldr	r3, [pc, #92]	; (8001574 <USSTask_init+0x144>)
 8001518:	801a      	strh	r2, [r3, #0]
	  	osMessagePut(myQueueHandle, Distance, 1000);
 800151a:	4b17      	ldr	r3, [pc, #92]	; (8001578 <USSTask_init+0x148>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a15      	ldr	r2, [pc, #84]	; (8001574 <USSTask_init+0x144>)
 8001520:	8812      	ldrh	r2, [r2, #0]
 8001522:	4611      	mov	r1, r2
 8001524:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001528:	4618      	mov	r0, r3
 800152a:	f002 fd7d 	bl	8004028 <osMessagePut>

	  	USSevent_flag = USSevent_flag ^ 1;
 800152e:	4b0a      	ldr	r3, [pc, #40]	; (8001558 <USSTask_init+0x128>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f083 0301 	eor.w	r3, r3, #1
 8001536:	4a08      	ldr	r2, [pc, #32]	; (8001558 <USSTask_init+0x128>)
 8001538:	6013      	str	r3, [r2, #0]
	  }
		taskYIELD();
 800153a:	4b10      	ldr	r3, [pc, #64]	; (800157c <USSTask_init+0x14c>)
 800153c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001540:	601a      	str	r2, [r3, #0]
 8001542:	f3bf 8f4f 	dsb	sy
 8001546:	f3bf 8f6f 	isb	sy
	  if(USSevent_flag == 1){
 800154a:	e775      	b.n	8001438 <USSTask_init+0x8>
 800154c:	f3af 8000 	nop.w
 8001550:	b020c49c 	.word	0xb020c49c
 8001554:	3fa16872 	.word	0x3fa16872
 8001558:	2000043c 	.word	0x2000043c
 800155c:	40020c00 	.word	0x40020c00
 8001560:	20000398 	.word	0x20000398
 8001564:	2000042c 	.word	0x2000042c
 8001568:	40020000 	.word	0x40020000
 800156c:	20000430 	.word	0x20000430
 8001570:	20000434 	.word	0x20000434
 8001574:	20000438 	.word	0x20000438
 8001578:	20000428 	.word	0x20000428
 800157c:	e000ed04 	.word	0xe000ed04

08001580 <WFSTask_init>:

  }
  /* USER CODE END 5 */
}
void WFSTask_init(void const * argument)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b086      	sub	sp, #24
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	TickType_t tickCount;
	TickType_t frequency = 2000;
 8001588:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800158c:	617b      	str	r3, [r7, #20]
	tickCount = xTaskGetTickCount();
 800158e:	f003 ff67 	bl	8005460 <xTaskGetTickCount>
 8001592:	4603      	mov	r3, r0
 8001594:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	 for(;;)
	  {
	   GPIO_PinState Value3 = HAL_GPIO_ReadPin(Input_Port, Input_Pin);
 8001596:	2140      	movs	r1, #64	; 0x40
 8001598:	4810      	ldr	r0, [pc, #64]	; (80015dc <WFSTask_init+0x5c>)
 800159a:	f000 fdc3 	bl	8002124 <HAL_GPIO_ReadPin>
 800159e:	4603      	mov	r3, r0
 80015a0:	74fb      	strb	r3, [r7, #19]
	   osDelay(1000);
 80015a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015a6:	f002 fd02 	bl	8003fae <osDelay>
	   GPIO_PinState Value4 = HAL_GPIO_ReadPin(Input_Port, Input_Pin);
 80015aa:	2140      	movs	r1, #64	; 0x40
 80015ac:	480b      	ldr	r0, [pc, #44]	; (80015dc <WFSTask_init+0x5c>)
 80015ae:	f000 fdb9 	bl	8002124 <HAL_GPIO_ReadPin>
 80015b2:	4603      	mov	r3, r0
 80015b4:	74bb      	strb	r3, [r7, #18]
	   if(Value3 != Value4){
 80015b6:	7cfa      	ldrb	r2, [r7, #19]
 80015b8:	7cbb      	ldrb	r3, [r7, #18]
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d0eb      	beq.n	8001596 <WFSTask_init+0x16>
	  	   USSevent_flag = USSevent_flag | 1;
 80015be:	4b08      	ldr	r3, [pc, #32]	; (80015e0 <WFSTask_init+0x60>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f043 0301 	orr.w	r3, r3, #1
 80015c6:	4a06      	ldr	r2, [pc, #24]	; (80015e0 <WFSTask_init+0x60>)
 80015c8:	6013      	str	r3, [r2, #0]
	  	   break;
 80015ca:	bf00      	nop
	  }
	 }
	  vTaskDelayUntil( &tickCount, frequency );
 80015cc:	f107 030c 	add.w	r3, r7, #12
 80015d0:	6979      	ldr	r1, [r7, #20]
 80015d2:	4618      	mov	r0, r3
 80015d4:	f003 fd7e 	bl	80050d4 <vTaskDelayUntil>
  for(;;)
 80015d8:	e7dd      	b.n	8001596 <WFSTask_init+0x16>
 80015da:	bf00      	nop
 80015dc:	40020000 	.word	0x40020000
 80015e0:	2000043c 	.word	0x2000043c

080015e4 <CommTask_init>:
  }
  /* USER CODE END 5 */
}
void CommTask_init(void const * argument)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b08e      	sub	sp, #56	; 0x38
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	osEvent readState;
	uint8_t msg[BUFF_SZ] = {0};
 80015ec:	2300      	movs	r3, #0
 80015ee:	617b      	str	r3, [r7, #20]
 80015f0:	f107 0318 	add.w	r3, r7, #24
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	809a      	strh	r2, [r3, #4]
	uint8_t padding[BUFF_SZ] = {0};
 80015fa:	2300      	movs	r3, #0
 80015fc:	60bb      	str	r3, [r7, #8]
 80015fe:	f107 030c 	add.w	r3, r7, #12
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	809a      	strh	r2, [r3, #4]
	char padding_character = '0';
 8001608:	2330      	movs	r3, #48	; 0x30
 800160a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  for(;;)
  {
	readState = osMessageGet(myQueueHandle, osWaitForever);
 800160e:	4b28      	ldr	r3, [pc, #160]	; (80016b0 <CommTask_init+0xcc>)
 8001610:	6819      	ldr	r1, [r3, #0]
 8001612:	f107 0320 	add.w	r3, r7, #32
 8001616:	f04f 32ff 	mov.w	r2, #4294967295
 800161a:	4618      	mov	r0, r3
 800161c:	f002 fd44 	bl	80040a8 <osMessageGet>
	if(readState.status == osEventMessage){
 8001620:	6a3b      	ldr	r3, [r7, #32]
 8001622:	2b10      	cmp	r3, #16
 8001624:	d137      	bne.n	8001696 <CommTask_init+0xb2>
		int r = (int)readState.value.v;
 8001626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001628:	633b      	str	r3, [r7, #48]	; 0x30
		int l = (r == 0)? 1 : log10(r)+1;
 800162a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800162c:	2b00      	cmp	r3, #0
 800162e:	d017      	beq.n	8001660 <CommTask_init+0x7c>
 8001630:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001632:	f7fe ff97 	bl	8000564 <__aeabi_i2d>
 8001636:	4602      	mov	r2, r0
 8001638:	460b      	mov	r3, r1
 800163a:	ec43 2b10 	vmov	d0, r2, r3
 800163e:	f006 f86b 	bl	8007718 <log10>
 8001642:	ec51 0b10 	vmov	r0, r1, d0
 8001646:	f04f 0200 	mov.w	r2, #0
 800164a:	4b1a      	ldr	r3, [pc, #104]	; (80016b4 <CommTask_init+0xd0>)
 800164c:	f7fe fe3e 	bl	80002cc <__adddf3>
 8001650:	4602      	mov	r2, r0
 8001652:	460b      	mov	r3, r1
 8001654:	4610      	mov	r0, r2
 8001656:	4619      	mov	r1, r3
 8001658:	f7ff fa9e 	bl	8000b98 <__aeabi_d2iz>
 800165c:	4603      	mov	r3, r0
 800165e:	e000      	b.n	8001662 <CommTask_init+0x7e>
 8001660:	2301      	movs	r3, #1
 8001662:	62fb      	str	r3, [r7, #44]	; 0x2c
		sprintf ((char *)msg, "%s%i\r\n", (char *)memset(padding, padding_character, BUFF_SZ -l), r);
 8001664:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 8001668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800166a:	f1c3 030a 	rsb	r3, r3, #10
 800166e:	461a      	mov	r2, r3
 8001670:	f107 0308 	add.w	r3, r7, #8
 8001674:	4618      	mov	r0, r3
 8001676:	f005 f872 	bl	800675e <memset>
 800167a:	4602      	mov	r2, r0
 800167c:	f107 0014 	add.w	r0, r7, #20
 8001680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001682:	490d      	ldr	r1, [pc, #52]	; (80016b8 <CommTask_init+0xd4>)
 8001684:	f005 f9f8 	bl	8006a78 <siprintf>
		HAL_UART_Transmit(&huart3, msg, sizeof(msg), 100);
 8001688:	f107 0114 	add.w	r1, r7, #20
 800168c:	2364      	movs	r3, #100	; 0x64
 800168e:	220a      	movs	r2, #10
 8001690:	480a      	ldr	r0, [pc, #40]	; (80016bc <CommTask_init+0xd8>)
 8001692:	f002 f88a 	bl	80037aa <HAL_UART_Transmit>
	}
	HAL_Delay(2000);
 8001696:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800169a:	f000 faa9 	bl	8001bf0 <HAL_Delay>
	memset(padding, 0, BUFF_SZ);
 800169e:	f107 0308 	add.w	r3, r7, #8
 80016a2:	220a      	movs	r2, #10
 80016a4:	2100      	movs	r1, #0
 80016a6:	4618      	mov	r0, r3
 80016a8:	f005 f859 	bl	800675e <memset>
  {
 80016ac:	e7af      	b.n	800160e <CommTask_init+0x2a>
 80016ae:	bf00      	nop
 80016b0:	20000428 	.word	0x20000428
 80016b4:	3ff00000 	.word	0x3ff00000
 80016b8:	08007d10 	.word	0x08007d10
 80016bc:	200003e0 	.word	0x200003e0

080016c0 <HAL_TIM_PeriodElapsedCallback>:
  }
  /* USER CODE END 5 */
}
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a04      	ldr	r2, [pc, #16]	; (80016e0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d101      	bne.n	80016d6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80016d2:	f000 fa6d 	bl	8001bb0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80016d6:	bf00      	nop
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	40001000 	.word	0x40001000

080016e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
 \brief   Disable IRQ Interrupts
 \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void) {
	__ASM volatile ("cpsid i" : : : "memory");
 80016e8:	b672      	cpsid	i
}
 80016ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016ec:	e7fe      	b.n	80016ec <Error_Handler+0x8>
	...

080016f0 <HAL_MspInit>:

/* USER CODE END 0 */
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void) {
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MspInit 0 */

	/* USER CODE END MspInit 0 */

	__HAL_RCC_SYSCFG_CLK_ENABLE();
 80016f6:	2300      	movs	r3, #0
 80016f8:	607b      	str	r3, [r7, #4]
 80016fa:	4b12      	ldr	r3, [pc, #72]	; (8001744 <HAL_MspInit+0x54>)
 80016fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016fe:	4a11      	ldr	r2, [pc, #68]	; (8001744 <HAL_MspInit+0x54>)
 8001700:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001704:	6453      	str	r3, [r2, #68]	; 0x44
 8001706:	4b0f      	ldr	r3, [pc, #60]	; (8001744 <HAL_MspInit+0x54>)
 8001708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800170a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800170e:	607b      	str	r3, [r7, #4]
 8001710:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_PWR_CLK_ENABLE();
 8001712:	2300      	movs	r3, #0
 8001714:	603b      	str	r3, [r7, #0]
 8001716:	4b0b      	ldr	r3, [pc, #44]	; (8001744 <HAL_MspInit+0x54>)
 8001718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171a:	4a0a      	ldr	r2, [pc, #40]	; (8001744 <HAL_MspInit+0x54>)
 800171c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001720:	6413      	str	r3, [r2, #64]	; 0x40
 8001722:	4b08      	ldr	r3, [pc, #32]	; (8001744 <HAL_MspInit+0x54>)
 8001724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800172a:	603b      	str	r3, [r7, #0]
 800172c:	683b      	ldr	r3, [r7, #0]

	/* System interrupt init*/
	/* PendSV_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800172e:	2200      	movs	r2, #0
 8001730:	210f      	movs	r1, #15
 8001732:	f06f 0001 	mvn.w	r0, #1
 8001736:	f000 fb37 	bl	8001da8 <HAL_NVIC_SetPriority>

	/* USER CODE BEGIN MspInit 1 */

	/* USER CODE END MspInit 1 */
}
 800173a:	bf00      	nop
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	40023800 	.word	0x40023800

08001748 <HAL_I2C_MspInit>:
 * @brief I2C MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hi2c: I2C handle pointer
 * @retval None
 */
void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c) {
 8001748:	b580      	push	{r7, lr}
 800174a:	b08a      	sub	sp, #40	; 0x28
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001750:	f107 0314 	add.w	r3, r7, #20
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	605a      	str	r2, [r3, #4]
 800175a:	609a      	str	r2, [r3, #8]
 800175c:	60da      	str	r2, [r3, #12]
 800175e:	611a      	str	r2, [r3, #16]
	if (hi2c->Instance == I2C1) {
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a19      	ldr	r2, [pc, #100]	; (80017cc <HAL_I2C_MspInit+0x84>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d12b      	bne.n	80017c2 <HAL_I2C_MspInit+0x7a>
		/* USER CODE BEGIN I2C1_MspInit 0 */

		/* USER CODE END I2C1_MspInit 0 */

		__HAL_RCC_GPIOB_CLK_ENABLE();
 800176a:	2300      	movs	r3, #0
 800176c:	613b      	str	r3, [r7, #16]
 800176e:	4b18      	ldr	r3, [pc, #96]	; (80017d0 <HAL_I2C_MspInit+0x88>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001772:	4a17      	ldr	r2, [pc, #92]	; (80017d0 <HAL_I2C_MspInit+0x88>)
 8001774:	f043 0302 	orr.w	r3, r3, #2
 8001778:	6313      	str	r3, [r2, #48]	; 0x30
 800177a:	4b15      	ldr	r3, [pc, #84]	; (80017d0 <HAL_I2C_MspInit+0x88>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177e:	f003 0302 	and.w	r3, r3, #2
 8001782:	613b      	str	r3, [r7, #16]
 8001784:	693b      	ldr	r3, [r7, #16]
		/**I2C1 GPIO Configuration
		 PB6     ------> I2C1_SCL
		 PB7     ------> I2C1_SDA
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 8001786:	23c0      	movs	r3, #192	; 0xc0
 8001788:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800178a:	2312      	movs	r3, #18
 800178c:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178e:	2300      	movs	r3, #0
 8001790:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001792:	2303      	movs	r3, #3
 8001794:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001796:	2304      	movs	r3, #4
 8001798:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800179a:	f107 0314 	add.w	r3, r7, #20
 800179e:	4619      	mov	r1, r3
 80017a0:	480c      	ldr	r0, [pc, #48]	; (80017d4 <HAL_I2C_MspInit+0x8c>)
 80017a2:	f000 fb2b 	bl	8001dfc <HAL_GPIO_Init>

		/* Peripheral clock enable */
		__HAL_RCC_I2C1_CLK_ENABLE();
 80017a6:	2300      	movs	r3, #0
 80017a8:	60fb      	str	r3, [r7, #12]
 80017aa:	4b09      	ldr	r3, [pc, #36]	; (80017d0 <HAL_I2C_MspInit+0x88>)
 80017ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ae:	4a08      	ldr	r2, [pc, #32]	; (80017d0 <HAL_I2C_MspInit+0x88>)
 80017b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017b4:	6413      	str	r3, [r2, #64]	; 0x40
 80017b6:	4b06      	ldr	r3, [pc, #24]	; (80017d0 <HAL_I2C_MspInit+0x88>)
 80017b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017be:	60fb      	str	r3, [r7, #12]
 80017c0:	68fb      	ldr	r3, [r7, #12]
		/* USER CODE BEGIN I2C1_MspInit 1 */

		/* USER CODE END I2C1_MspInit 1 */
	}

}
 80017c2:	bf00      	nop
 80017c4:	3728      	adds	r7, #40	; 0x28
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	40005400 	.word	0x40005400
 80017d0:	40023800 	.word	0x40023800
 80017d4:	40020400 	.word	0x40020400

080017d8 <HAL_TIM_Base_MspInit>:
 * @brief TIM_Base MSP Initialization
 * This function configures the hardware resources used in this example
 * @param htim_base: TIM_Base handle pointer
 * @retval None
 */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim_base) {
 80017d8:	b480      	push	{r7}
 80017da:	b085      	sub	sp, #20
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
	if (htim_base->Instance == TIM1) {
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a0b      	ldr	r2, [pc, #44]	; (8001814 <HAL_TIM_Base_MspInit+0x3c>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d10d      	bne.n	8001806 <HAL_TIM_Base_MspInit+0x2e>
		/* USER CODE BEGIN TIM1_MspInit 0 */

		/* USER CODE END TIM1_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_TIM1_CLK_ENABLE();
 80017ea:	2300      	movs	r3, #0
 80017ec:	60fb      	str	r3, [r7, #12]
 80017ee:	4b0a      	ldr	r3, [pc, #40]	; (8001818 <HAL_TIM_Base_MspInit+0x40>)
 80017f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f2:	4a09      	ldr	r2, [pc, #36]	; (8001818 <HAL_TIM_Base_MspInit+0x40>)
 80017f4:	f043 0301 	orr.w	r3, r3, #1
 80017f8:	6453      	str	r3, [r2, #68]	; 0x44
 80017fa:	4b07      	ldr	r3, [pc, #28]	; (8001818 <HAL_TIM_Base_MspInit+0x40>)
 80017fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fe:	f003 0301 	and.w	r3, r3, #1
 8001802:	60fb      	str	r3, [r7, #12]
 8001804:	68fb      	ldr	r3, [r7, #12]
		/* USER CODE BEGIN TIM1_MspInit 1 */

		/* USER CODE END TIM1_MspInit 1 */
	}

}
 8001806:	bf00      	nop
 8001808:	3714      	adds	r7, #20
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	40010000 	.word	0x40010000
 8001818:	40023800 	.word	0x40023800

0800181c <HAL_UART_MspInit>:
 * @brief UART MSP Initialization
 * This function configures the hardware resources used in this example
 * @param huart: UART handle pointer
 * @retval None
 */
void HAL_UART_MspInit(UART_HandleTypeDef *huart) {
 800181c:	b580      	push	{r7, lr}
 800181e:	b08a      	sub	sp, #40	; 0x28
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001824:	f107 0314 	add.w	r3, r7, #20
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]
 800182c:	605a      	str	r2, [r3, #4]
 800182e:	609a      	str	r2, [r3, #8]
 8001830:	60da      	str	r2, [r3, #12]
 8001832:	611a      	str	r2, [r3, #16]
	if (huart->Instance == USART3) {
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a19      	ldr	r2, [pc, #100]	; (80018a0 <HAL_UART_MspInit+0x84>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d12c      	bne.n	8001898 <HAL_UART_MspInit+0x7c>
		/* USER CODE BEGIN USART3_MspInit 0 */

		/* USER CODE END USART3_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_USART3_CLK_ENABLE();
 800183e:	2300      	movs	r3, #0
 8001840:	613b      	str	r3, [r7, #16]
 8001842:	4b18      	ldr	r3, [pc, #96]	; (80018a4 <HAL_UART_MspInit+0x88>)
 8001844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001846:	4a17      	ldr	r2, [pc, #92]	; (80018a4 <HAL_UART_MspInit+0x88>)
 8001848:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800184c:	6413      	str	r3, [r2, #64]	; 0x40
 800184e:	4b15      	ldr	r3, [pc, #84]	; (80018a4 <HAL_UART_MspInit+0x88>)
 8001850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001852:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001856:	613b      	str	r3, [r7, #16]
 8001858:	693b      	ldr	r3, [r7, #16]

		__HAL_RCC_GPIOD_CLK_ENABLE();
 800185a:	2300      	movs	r3, #0
 800185c:	60fb      	str	r3, [r7, #12]
 800185e:	4b11      	ldr	r3, [pc, #68]	; (80018a4 <HAL_UART_MspInit+0x88>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	4a10      	ldr	r2, [pc, #64]	; (80018a4 <HAL_UART_MspInit+0x88>)
 8001864:	f043 0308 	orr.w	r3, r3, #8
 8001868:	6313      	str	r3, [r2, #48]	; 0x30
 800186a:	4b0e      	ldr	r3, [pc, #56]	; (80018a4 <HAL_UART_MspInit+0x88>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	f003 0308 	and.w	r3, r3, #8
 8001872:	60fb      	str	r3, [r7, #12]
 8001874:	68fb      	ldr	r3, [r7, #12]
		/**USART3 GPIO Configuration
		 PD8     ------> USART3_TX
		 PD9     ------> USART3_RX
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8001876:	f44f 7340 	mov.w	r3, #768	; 0x300
 800187a:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187c:	2302      	movs	r3, #2
 800187e:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001880:	2300      	movs	r3, #0
 8001882:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001884:	2303      	movs	r3, #3
 8001886:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001888:	2307      	movs	r3, #7
 800188a:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800188c:	f107 0314 	add.w	r3, r7, #20
 8001890:	4619      	mov	r1, r3
 8001892:	4805      	ldr	r0, [pc, #20]	; (80018a8 <HAL_UART_MspInit+0x8c>)
 8001894:	f000 fab2 	bl	8001dfc <HAL_GPIO_Init>
		/* USER CODE BEGIN USART3_MspInit 1 */

		/* USER CODE END USART3_MspInit 1 */
	}

}
 8001898:	bf00      	nop
 800189a:	3728      	adds	r7, #40	; 0x28
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	40004800 	.word	0x40004800
 80018a4:	40023800 	.word	0x40023800
 80018a8:	40020c00 	.word	0x40020c00

080018ac <HAL_InitTick>:
 * @note   This function is called  automatically at the beginning of program after
 *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
 * @param  TickPriority: Tick interrupt priority.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority) {
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b08e      	sub	sp, #56	; 0x38
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
	RCC_ClkInitTypeDef clkconfig;
	uint32_t uwTimclock, uwAPB1Prescaler = 0U;
 80018b4:	2300      	movs	r3, #0
 80018b6:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint32_t uwPrescalerValue = 0U;
 80018b8:	2300      	movs	r3, #0
 80018ba:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t pFLatency;
	HAL_StatusTypeDef status;

	/* Enable TIM6 clock */
	__HAL_RCC_TIM6_CLK_ENABLE();
 80018bc:	2300      	movs	r3, #0
 80018be:	60fb      	str	r3, [r7, #12]
 80018c0:	4b33      	ldr	r3, [pc, #204]	; (8001990 <HAL_InitTick+0xe4>)
 80018c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c4:	4a32      	ldr	r2, [pc, #200]	; (8001990 <HAL_InitTick+0xe4>)
 80018c6:	f043 0310 	orr.w	r3, r3, #16
 80018ca:	6413      	str	r3, [r2, #64]	; 0x40
 80018cc:	4b30      	ldr	r3, [pc, #192]	; (8001990 <HAL_InitTick+0xe4>)
 80018ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d0:	f003 0310 	and.w	r3, r3, #16
 80018d4:	60fb      	str	r3, [r7, #12]
 80018d6:	68fb      	ldr	r3, [r7, #12]

	/* Get clock configuration */
	HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80018d8:	f107 0210 	add.w	r2, r7, #16
 80018dc:	f107 0314 	add.w	r3, r7, #20
 80018e0:	4611      	mov	r1, r2
 80018e2:	4618      	mov	r0, r3
 80018e4:	f000 ff74 	bl	80027d0 <HAL_RCC_GetClockConfig>

	/* Get APB1 prescaler */
	uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80018e8:	6a3b      	ldr	r3, [r7, #32]
 80018ea:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Compute TIM6 clock */
	if (uwAPB1Prescaler == RCC_HCLK_DIV1) {
 80018ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d103      	bne.n	80018fa <HAL_InitTick+0x4e>
		uwTimclock = HAL_RCC_GetPCLK1Freq();
 80018f2:	f000 ff45 	bl	8002780 <HAL_RCC_GetPCLK1Freq>
 80018f6:	6378      	str	r0, [r7, #52]	; 0x34
 80018f8:	e004      	b.n	8001904 <HAL_InitTick+0x58>
	} else {
		uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80018fa:	f000 ff41 	bl	8002780 <HAL_RCC_GetPCLK1Freq>
 80018fe:	4603      	mov	r3, r0
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	637b      	str	r3, [r7, #52]	; 0x34
	}

	/* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
	uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001904:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001906:	4a23      	ldr	r2, [pc, #140]	; (8001994 <HAL_InitTick+0xe8>)
 8001908:	fba2 2303 	umull	r2, r3, r2, r3
 800190c:	0c9b      	lsrs	r3, r3, #18
 800190e:	3b01      	subs	r3, #1
 8001910:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Initialize TIM6 */
	htim6.Instance = TIM6;
 8001912:	4b21      	ldr	r3, [pc, #132]	; (8001998 <HAL_InitTick+0xec>)
 8001914:	4a21      	ldr	r2, [pc, #132]	; (800199c <HAL_InitTick+0xf0>)
 8001916:	601a      	str	r2, [r3, #0]
	 + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
	 + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
	 + ClockDivision = 0
	 + Counter direction = Up
	 */
	htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001918:	4b1f      	ldr	r3, [pc, #124]	; (8001998 <HAL_InitTick+0xec>)
 800191a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800191e:	60da      	str	r2, [r3, #12]
	htim6.Init.Prescaler = uwPrescalerValue;
 8001920:	4a1d      	ldr	r2, [pc, #116]	; (8001998 <HAL_InitTick+0xec>)
 8001922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001924:	6053      	str	r3, [r2, #4]
	htim6.Init.ClockDivision = 0;
 8001926:	4b1c      	ldr	r3, [pc, #112]	; (8001998 <HAL_InitTick+0xec>)
 8001928:	2200      	movs	r2, #0
 800192a:	611a      	str	r2, [r3, #16]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800192c:	4b1a      	ldr	r3, [pc, #104]	; (8001998 <HAL_InitTick+0xec>)
 800192e:	2200      	movs	r2, #0
 8001930:	609a      	str	r2, [r3, #8]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001932:	4b19      	ldr	r3, [pc, #100]	; (8001998 <HAL_InitTick+0xec>)
 8001934:	2200      	movs	r2, #0
 8001936:	619a      	str	r2, [r3, #24]

	status = HAL_TIM_Base_Init(&htim6);
 8001938:	4817      	ldr	r0, [pc, #92]	; (8001998 <HAL_InitTick+0xec>)
 800193a:	f001 f9ff 	bl	8002d3c <HAL_TIM_Base_Init>
 800193e:	4603      	mov	r3, r0
 8001940:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	if (status == HAL_OK) {
 8001944:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001948:	2b00      	cmp	r3, #0
 800194a:	d11b      	bne.n	8001984 <HAL_InitTick+0xd8>
		/* Start the TIM time Base generation in interrupt mode */
		status = HAL_TIM_Base_Start_IT(&htim6);
 800194c:	4812      	ldr	r0, [pc, #72]	; (8001998 <HAL_InitTick+0xec>)
 800194e:	f001 faad 	bl	8002eac <HAL_TIM_Base_Start_IT>
 8001952:	4603      	mov	r3, r0
 8001954:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		if (status == HAL_OK) {
 8001958:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800195c:	2b00      	cmp	r3, #0
 800195e:	d111      	bne.n	8001984 <HAL_InitTick+0xd8>
			/* Enable the TIM6 global Interrupt */
			HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001960:	2036      	movs	r0, #54	; 0x36
 8001962:	f000 fa3d 	bl	8001de0 <HAL_NVIC_EnableIRQ>
			/* Configure the SysTick IRQ priority */
			if (TickPriority < (1UL << __NVIC_PRIO_BITS)) {
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2b0f      	cmp	r3, #15
 800196a:	d808      	bhi.n	800197e <HAL_InitTick+0xd2>
				/* Configure the TIM IRQ priority */
				HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800196c:	2200      	movs	r2, #0
 800196e:	6879      	ldr	r1, [r7, #4]
 8001970:	2036      	movs	r0, #54	; 0x36
 8001972:	f000 fa19 	bl	8001da8 <HAL_NVIC_SetPriority>
				uwTickPrio = TickPriority;
 8001976:	4a0a      	ldr	r2, [pc, #40]	; (80019a0 <HAL_InitTick+0xf4>)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6013      	str	r3, [r2, #0]
 800197c:	e002      	b.n	8001984 <HAL_InitTick+0xd8>
			} else {
				status = HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			}
		}
	}

	/* Return function status */
	return status;
 8001984:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001988:	4618      	mov	r0, r3
 800198a:	3738      	adds	r7, #56	; 0x38
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	40023800 	.word	0x40023800
 8001994:	431bde83 	.word	0x431bde83
 8001998:	2000044c 	.word	0x2000044c
 800199c:	40001000 	.word	0x40001000
 80019a0:	20000004 	.word	0x20000004

080019a4 <NMI_Handler>:
/*           Cortex-M4 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80019a8:	e7fe      	b.n	80019a8 <NMI_Handler+0x4>

080019aa <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 80019aa:	b480      	push	{r7}
 80019ac:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 80019ae:	e7fe      	b.n	80019ae <HardFault_Handler+0x4>

080019b0 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 80019b4:	e7fe      	b.n	80019b4 <MemManage_Handler+0x4>

080019b6 <BusFault_Handler>:
}

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 80019b6:	b480      	push	{r7}
 80019b8:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 80019ba:	e7fe      	b.n	80019ba <BusFault_Handler+0x4>

080019bc <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 80019c0:	e7fe      	b.n	80019c0 <UsageFault_Handler+0x4>

080019c2 <DebugMon_Handler>:
}

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 80019c2:	b480      	push	{r7}
 80019c4:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 80019c6:	bf00      	nop
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <TIM6_DAC_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
 */
void TIM6_DAC_IRQHandler(void) {
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM6_DAC_IRQn 0 */

	/* USER CODE END TIM6_DAC_IRQn 0 */
	HAL_TIM_IRQHandler(&htim6);
 80019d4:	4802      	ldr	r0, [pc, #8]	; (80019e0 <TIM6_DAC_IRQHandler+0x10>)
 80019d6:	f001 fad9 	bl	8002f8c <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM6_DAC_IRQn 1 */

	/* USER CODE END TIM6_DAC_IRQn 1 */
}
 80019da:	bf00      	nop
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	2000044c 	.word	0x2000044c

080019e4 <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b086      	sub	sp, #24
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	60f8      	str	r0, [r7, #12]
 80019ec:	60b9      	str	r1, [r7, #8]
 80019ee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80019f0:	2300      	movs	r3, #0
 80019f2:	617b      	str	r3, [r7, #20]
 80019f4:	e00a      	b.n	8001a0c <_read+0x28>
		*ptr++ = __io_getchar();
 80019f6:	f3af 8000 	nop.w
 80019fa:	4601      	mov	r1, r0
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	1c5a      	adds	r2, r3, #1
 8001a00:	60ba      	str	r2, [r7, #8]
 8001a02:	b2ca      	uxtb	r2, r1
 8001a04:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	3301      	adds	r3, #1
 8001a0a:	617b      	str	r3, [r7, #20]
 8001a0c:	697a      	ldr	r2, [r7, #20]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	dbf0      	blt.n	80019f6 <_read+0x12>
	}

	return len;
 8001a14:	687b      	ldr	r3, [r7, #4]
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3718      	adds	r7, #24
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <_close>:
		__io_putchar(*ptr++);
	}
	return len;
}

int _close(int file) {
 8001a1e:	b480      	push	{r7}
 8001a20:	b083      	sub	sp, #12
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
	return -1;
 8001a26:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	370c      	adds	r7, #12
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr

08001a36 <_fstat>:

int _fstat(int file, struct stat *st) {
 8001a36:	b480      	push	{r7}
 8001a38:	b083      	sub	sp, #12
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]
 8001a3e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a46:	605a      	str	r2, [r3, #4]
	return 0;
 8001a48:	2300      	movs	r3, #0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	370c      	adds	r7, #12
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr

08001a56 <_isatty>:

int _isatty(int file) {
 8001a56:	b480      	push	{r7}
 8001a58:	b083      	sub	sp, #12
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]
	return 1;
 8001a5e:	2301      	movs	r3, #1
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8001a6c:	b480      	push	{r7}
 8001a6e:	b085      	sub	sp, #20
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	60f8      	str	r0, [r7, #12]
 8001a74:	60b9      	str	r1, [r7, #8]
 8001a76:	607a      	str	r2, [r7, #4]
	return 0;
 8001a78:	2300      	movs	r3, #0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3714      	adds	r7, #20
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
	...

08001a88 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b086      	sub	sp, #24
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8001a90:	4a14      	ldr	r2, [pc, #80]	; (8001ae4 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 8001a92:	4b15      	ldr	r3, [pc, #84]	; (8001ae8 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8001a9c:	4b13      	ldr	r3, [pc, #76]	; (8001aec <_sbrk+0x64>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d102      	bne.n	8001aaa <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8001aa4:	4b11      	ldr	r3, [pc, #68]	; (8001aec <_sbrk+0x64>)
 8001aa6:	4a12      	ldr	r2, [pc, #72]	; (8001af0 <_sbrk+0x68>)
 8001aa8:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8001aaa:	4b10      	ldr	r3, [pc, #64]	; (8001aec <_sbrk+0x64>)
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	693a      	ldr	r2, [r7, #16]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d207      	bcs.n	8001ac8 <_sbrk+0x40>
		errno = ENOMEM;
 8001ab8:	f004 fd20 	bl	80064fc <__errno>
 8001abc:	4603      	mov	r3, r0
 8001abe:	220c      	movs	r2, #12
 8001ac0:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8001ac2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ac6:	e009      	b.n	8001adc <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8001ac8:	4b08      	ldr	r3, [pc, #32]	; (8001aec <_sbrk+0x64>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8001ace:	4b07      	ldr	r3, [pc, #28]	; (8001aec <_sbrk+0x64>)
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	4a05      	ldr	r2, [pc, #20]	; (8001aec <_sbrk+0x64>)
 8001ad8:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8001ada:	68fb      	ldr	r3, [r7, #12]
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3718      	adds	r7, #24
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	20050000 	.word	0x20050000
 8001ae8:	00000400 	.word	0x00000400
 8001aec:	20000494 	.word	0x20000494
 8001af0:	20004200 	.word	0x20004200

08001af4 <SystemInit>:
 *         Initialize the FPU setting, vector table location and External memory 
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 8001af8:	4b06      	ldr	r3, [pc, #24]	; (8001b14 <SystemInit+0x20>)
 8001afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001afe:	4a05      	ldr	r2, [pc, #20]	; (8001b14 <SystemInit+0x20>)
 8001b00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b08:	bf00      	nop
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	e000ed00 	.word	0xe000ed00

08001b18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8001b18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b50 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b1c:	480d      	ldr	r0, [pc, #52]	; (8001b54 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b1e:	490e      	ldr	r1, [pc, #56]	; (8001b58 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b20:	4a0e      	ldr	r2, [pc, #56]	; (8001b5c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b24:	e002      	b.n	8001b2c <LoopCopyDataInit>

08001b26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b2a:	3304      	adds	r3, #4

08001b2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b30:	d3f9      	bcc.n	8001b26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b32:	4a0b      	ldr	r2, [pc, #44]	; (8001b60 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b34:	4c0b      	ldr	r4, [pc, #44]	; (8001b64 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b38:	e001      	b.n	8001b3e <LoopFillZerobss>

08001b3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b3c:	3204      	adds	r2, #4

08001b3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b40:	d3fb      	bcc.n	8001b3a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b42:	f7ff ffd7 	bl	8001af4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b46:	f004 fdd5 	bl	80066f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b4a:	f7ff fa4f 	bl	8000fec <main>
  bx  lr    
 8001b4e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001b50:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001b54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b58:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001b5c:	08007de0 	.word	0x08007de0
  ldr r2, =_sbss
 8001b60:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001b64:	20004200 	.word	0x20004200

08001b68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b68:	e7fe      	b.n	8001b68 <ADC_IRQHandler>
	...

08001b6c <HAL_Init>:
 * @note   SysTick is used as time base for the HAL_Delay() function, the application
 *         need to ensure that the SysTick time base is always set to 1 millisecond
 *         to have correct HAL operation.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_Init(void) {
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
	/* Configure Flash prefetch, Instruction cache, Data cache */
#if (INSTRUCTION_CACHE_ENABLE != 0U)
	__HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b70:	4b0e      	ldr	r3, [pc, #56]	; (8001bac <HAL_Init+0x40>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a0d      	ldr	r2, [pc, #52]	; (8001bac <HAL_Init+0x40>)
 8001b76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
	__HAL_FLASH_DATA_CACHE_ENABLE();
 8001b7c:	4b0b      	ldr	r3, [pc, #44]	; (8001bac <HAL_Init+0x40>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a0a      	ldr	r2, [pc, #40]	; (8001bac <HAL_Init+0x40>)
 8001b82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
	__HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b88:	4b08      	ldr	r3, [pc, #32]	; (8001bac <HAL_Init+0x40>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a07      	ldr	r2, [pc, #28]	; (8001bac <HAL_Init+0x40>)
 8001b8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

	/* Set Interrupt Group Priority */
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b94:	2003      	movs	r0, #3
 8001b96:	f000 f8fc 	bl	8001d92 <HAL_NVIC_SetPriorityGrouping>

	/* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
	HAL_InitTick(TICK_INT_PRIORITY);
 8001b9a:	200f      	movs	r0, #15
 8001b9c:	f7ff fe86 	bl	80018ac <HAL_InitTick>

	/* Init the low level hardware */
	HAL_MspInit();
 8001ba0:	f7ff fda6 	bl	80016f0 <HAL_MspInit>

	/* Return function status */
	return HAL_OK;
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	40023c00 	.word	0x40023c00

08001bb0 <HAL_IncTick>:
 *       in SysTick ISR.
 * @note This function is declared as __weak to be overwritten in case of other 
 *      implementations in user file.
 * @retval None
 */
__weak void HAL_IncTick(void) {
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
	uwTick += uwTickFreq;
 8001bb4:	4b06      	ldr	r3, [pc, #24]	; (8001bd0 <HAL_IncTick+0x20>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	461a      	mov	r2, r3
 8001bba:	4b06      	ldr	r3, [pc, #24]	; (8001bd4 <HAL_IncTick+0x24>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	4a04      	ldr	r2, [pc, #16]	; (8001bd4 <HAL_IncTick+0x24>)
 8001bc2:	6013      	str	r3, [r2, #0]
}
 8001bc4:	bf00      	nop
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	20000008 	.word	0x20000008
 8001bd4:	20000498 	.word	0x20000498

08001bd8 <HAL_GetTick>:
 * @brief Provides a tick value in millisecond.
 * @note This function is declared as __weak to be overwritten in case of other 
 *       implementations in user file.
 * @retval tick value
 */
__weak uint32_t HAL_GetTick(void) {
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
	return uwTick;
 8001bdc:	4b03      	ldr	r3, [pc, #12]	; (8001bec <HAL_GetTick+0x14>)
 8001bde:	681b      	ldr	r3, [r3, #0]
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	20000498 	.word	0x20000498

08001bf0 <HAL_Delay>:
 * @note This function is declared as __weak to be overwritten in case of other
 *       implementations in user file.
 * @param Delay specifies the delay time length, in milliseconds.
 * @retval None
 */
__weak void HAL_Delay(uint32_t Delay) {
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
	uint32_t tickstart = HAL_GetTick();
 8001bf8:	f7ff ffee 	bl	8001bd8 <HAL_GetTick>
 8001bfc:	60b8      	str	r0, [r7, #8]
	uint32_t wait = Delay;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	60fb      	str	r3, [r7, #12]

	/* Add a freq to guarantee minimum wait */
	if (wait < HAL_MAX_DELAY) {
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c08:	d005      	beq.n	8001c16 <HAL_Delay+0x26>
		wait += (uint32_t) (uwTickFreq);
 8001c0a:	4b0a      	ldr	r3, [pc, #40]	; (8001c34 <HAL_Delay+0x44>)
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	461a      	mov	r2, r3
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	4413      	add	r3, r2
 8001c14:	60fb      	str	r3, [r7, #12]
	}

	while ((HAL_GetTick() - tickstart) < wait) {
 8001c16:	bf00      	nop
 8001c18:	f7ff ffde 	bl	8001bd8 <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	68fa      	ldr	r2, [r7, #12]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d8f7      	bhi.n	8001c18 <HAL_Delay+0x28>
	}
}
 8001c28:	bf00      	nop
 8001c2a:	bf00      	nop
 8001c2c:	3710      	adds	r7, #16
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	20000008 	.word	0x20000008

08001c38 <__NVIC_SetPriorityGrouping>:
	__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup) {
 8001c38:	b480      	push	{r7}
 8001c3a:	b085      	sub	sp, #20
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
		uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t) 0x07UL); /* only values 0..7 are used          */
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f003 0307 	and.w	r3, r3, #7
 8001c46:	60fb      	str	r3, [r7, #12]
		reg_value = SCB->AIRCR; /* read old register configuration    */
 8001c48:	4b0c      	ldr	r3, [pc, #48]	; (8001c7c <__NVIC_SetPriorityGrouping+0x44>)
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	60bb      	str	r3, [r7, #8]
		reg_value &= ~((uint32_t) (SCB_AIRCR_VECTKEY_Msk
 8001c4e:	68ba      	ldr	r2, [r7, #8]
 8001c50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c54:	4013      	ands	r3, r2
 8001c56:	60bb      	str	r3, [r7, #8]
				| (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)); /* Insert write key and priority group */
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	021a      	lsls	r2, r3, #8
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	4313      	orrs	r3, r2
		reg_value = (reg_value | ((uint32_t) 0x5FAUL << SCB_AIRCR_VECTKEY_Pos)
 8001c60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c68:	60bb      	str	r3, [r7, #8]
		SCB->AIRCR = reg_value;
 8001c6a:	4a04      	ldr	r2, [pc, #16]	; (8001c7c <__NVIC_SetPriorityGrouping+0x44>)
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	60d3      	str	r3, [r2, #12]
	}
 8001c70:	bf00      	nop
 8001c72:	3714      	adds	r7, #20
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr
 8001c7c:	e000ed00 	.word	0xe000ed00

08001c80 <__NVIC_GetPriorityGrouping>:
	__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void) {
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
		return ((uint32_t) ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk)
 8001c84:	4b04      	ldr	r3, [pc, #16]	; (8001c98 <__NVIC_GetPriorityGrouping+0x18>)
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	0a1b      	lsrs	r3, r3, #8
 8001c8a:	f003 0307 	and.w	r3, r3, #7
	}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr
 8001c98:	e000ed00 	.word	0xe000ed00

08001c9c <__NVIC_EnableIRQ>:
	__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn) {
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	71fb      	strb	r3, [r7, #7]
		if ((int32_t) (IRQn) >= 0) {
 8001ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	db0b      	blt.n	8001cc6 <__NVIC_EnableIRQ+0x2a>
					<< (((uint32_t) IRQn) & 0x1FUL));
 8001cae:	79fb      	ldrb	r3, [r7, #7]
 8001cb0:	f003 021f 	and.w	r2, r3, #31
			NVIC->ISER[(((uint32_t) IRQn) >> 5UL)] = (uint32_t) (1UL
 8001cb4:	4907      	ldr	r1, [pc, #28]	; (8001cd4 <__NVIC_EnableIRQ+0x38>)
 8001cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cba:	095b      	lsrs	r3, r3, #5
 8001cbc:	2001      	movs	r0, #1
 8001cbe:	fa00 f202 	lsl.w	r2, r0, r2
 8001cc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}
 8001cc6:	bf00      	nop
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	e000e100 	.word	0xe000e100

08001cd8 <__NVIC_SetPriority>:
	__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority) {
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	4603      	mov	r3, r0
 8001ce0:	6039      	str	r1, [r7, #0]
 8001ce2:	71fb      	strb	r3, [r7, #7]
		if ((int32_t) (IRQn) >= 0) {
 8001ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	db0a      	blt.n	8001d02 <__NVIC_SetPriority+0x2a>
			NVIC->IP[((uint32_t) IRQn)] = (uint8_t) ((priority
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	b2da      	uxtb	r2, r3
 8001cf0:	490c      	ldr	r1, [pc, #48]	; (8001d24 <__NVIC_SetPriority+0x4c>)
 8001cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf6:	0112      	lsls	r2, r2, #4
 8001cf8:	b2d2      	uxtb	r2, r2
 8001cfa:	440b      	add	r3, r1
 8001cfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
	}
 8001d00:	e00a      	b.n	8001d18 <__NVIC_SetPriority+0x40>
			SCB->SHP[(((uint32_t) IRQn) & 0xFUL) - 4UL] = (uint8_t) ((priority
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	b2da      	uxtb	r2, r3
 8001d06:	4908      	ldr	r1, [pc, #32]	; (8001d28 <__NVIC_SetPriority+0x50>)
 8001d08:	79fb      	ldrb	r3, [r7, #7]
 8001d0a:	f003 030f 	and.w	r3, r3, #15
 8001d0e:	3b04      	subs	r3, #4
 8001d10:	0112      	lsls	r2, r2, #4
 8001d12:	b2d2      	uxtb	r2, r2
 8001d14:	440b      	add	r3, r1
 8001d16:	761a      	strb	r2, [r3, #24]
	}
 8001d18:	bf00      	nop
 8001d1a:	370c      	adds	r7, #12
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr
 8001d24:	e000e100 	.word	0xe000e100
 8001d28:	e000ed00 	.word	0xe000ed00

08001d2c <NVIC_EncodePriority>:
			uint32_t PreemptPriority, uint32_t SubPriority) {
 8001d2c:	b480      	push	{r7}
 8001d2e:	b089      	sub	sp, #36	; 0x24
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	60f8      	str	r0, [r7, #12]
 8001d34:	60b9      	str	r1, [r7, #8]
 8001d36:	607a      	str	r2, [r7, #4]
		uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t) 0x07UL); /* only values 0..7 are used          */
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	f003 0307 	and.w	r3, r3, #7
 8001d3e:	61fb      	str	r3, [r7, #28]
				((7UL - PriorityGroupTmp) > (uint32_t) (__NVIC_PRIO_BITS)) ?
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	f1c3 0307 	rsb	r3, r3, #7
		PreemptPriorityBits =
 8001d46:	2b04      	cmp	r3, #4
 8001d48:	bf28      	it	cs
 8001d4a:	2304      	movcs	r3, #4
 8001d4c:	61bb      	str	r3, [r7, #24]
				((PriorityGroupTmp + (uint32_t) (__NVIC_PRIO_BITS))
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	3304      	adds	r3, #4
						(uint32_t) 0UL :
 8001d52:	2b06      	cmp	r3, #6
 8001d54:	d902      	bls.n	8001d5c <NVIC_EncodePriority+0x30>
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	3b03      	subs	r3, #3
 8001d5a:	e000      	b.n	8001d5e <NVIC_EncodePriority+0x32>
 8001d5c:	2300      	movs	r3, #0
		SubPriorityBits =
 8001d5e:	617b      	str	r3, [r7, #20]
				& (uint32_t) ((1UL << (PreemptPriorityBits)) - 1UL))
 8001d60:	f04f 32ff 	mov.w	r2, #4294967295
 8001d64:	69bb      	ldr	r3, [r7, #24]
 8001d66:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6a:	43da      	mvns	r2, r3
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	401a      	ands	r2, r3
				<< SubPriorityBits)
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	409a      	lsls	r2, r3
				| ((SubPriority & (uint32_t) ((1UL << (SubPriorityBits)) - 1UL))));
 8001d74:	f04f 31ff 	mov.w	r1, #4294967295
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d7e:	43d9      	mvns	r1, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	400b      	ands	r3, r1
 8001d84:	4313      	orrs	r3, r2
	}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3724      	adds	r7, #36	; 0x24
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr

08001d92 <HAL_NVIC_SetPriorityGrouping>:
 *                                    0 bits for subpriority
 * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
 *         The pending IRQ priority will be managed only by the subpriority. 
 * @retval None
 */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup) {
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b082      	sub	sp, #8
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
	/* Check the parameters */
	assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

	/* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
	NVIC_SetPriorityGrouping(PriorityGroup);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f7ff ff4c 	bl	8001c38 <__NVIC_SetPriorityGrouping>
}
 8001da0:	bf00      	nop
 8001da2:	3708      	adds	r7, #8
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <HAL_NVIC_SetPriority>:
 *         This parameter can be a value between 0 and 15
 *         A lower priority value indicates a higher priority.          
 * @retval None
 */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority,
		uint32_t SubPriority) {
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	4603      	mov	r3, r0
 8001db0:	60b9      	str	r1, [r7, #8]
 8001db2:	607a      	str	r2, [r7, #4]
 8001db4:	73fb      	strb	r3, [r7, #15]
	uint32_t prioritygroup = 0x00U;
 8001db6:	2300      	movs	r3, #0
 8001db8:	617b      	str	r3, [r7, #20]

	/* Check the parameters */
	assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
	assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

	prioritygroup = NVIC_GetPriorityGrouping();
 8001dba:	f7ff ff61 	bl	8001c80 <__NVIC_GetPriorityGrouping>
 8001dbe:	6178      	str	r0, [r7, #20]

	NVIC_SetPriority(IRQn,
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	68b9      	ldr	r1, [r7, #8]
 8001dc4:	6978      	ldr	r0, [r7, #20]
 8001dc6:	f7ff ffb1 	bl	8001d2c <NVIC_EncodePriority>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dd0:	4611      	mov	r1, r2
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7ff ff80 	bl	8001cd8 <__NVIC_SetPriority>
			NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001dd8:	bf00      	nop
 8001dda:	3718      	adds	r7, #24
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}

08001de0 <HAL_NVIC_EnableIRQ>:
 * @param  IRQn External interrupt number.
 *         This parameter can be an enumerator of IRQn_Type enumeration
 *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
 * @retval None
 */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn) {
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	4603      	mov	r3, r0
 8001de8:	71fb      	strb	r3, [r7, #7]
	/* Check the parameters */
	assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

	/* Enable interrupt */
	NVIC_EnableIRQ(IRQn);
 8001dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7ff ff54 	bl	8001c9c <__NVIC_EnableIRQ>
}
 8001df4:	bf00      	nop
 8001df6:	3708      	adds	r7, #8
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <HAL_GPIO_Init>:
 *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
 * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
 *         the configuration information for the specified GPIO peripheral.
 * @retval None
 */
void HAL_GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_InitTypeDef *GPIO_Init) {
 8001dfc:	b480      	push	{r7}
 8001dfe:	b089      	sub	sp, #36	; 0x24
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	6039      	str	r1, [r7, #0]
	uint32_t position;
	uint32_t ioposition = 0x00U;
 8001e06:	2300      	movs	r3, #0
 8001e08:	617b      	str	r3, [r7, #20]
	uint32_t iocurrent = 0x00U;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	613b      	str	r3, [r7, #16]
	uint32_t temp = 0x00U;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	61bb      	str	r3, [r7, #24]
	assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
	assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
	assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

	/* Configure the port pins */
	for (position = 0U; position < GPIO_NUMBER; position++) {
 8001e12:	2300      	movs	r3, #0
 8001e14:	61fb      	str	r3, [r7, #28]
 8001e16:	e165      	b.n	80020e4 <HAL_GPIO_Init+0x2e8>
		/* Get the IO position */
		ioposition = 0x01U << position;
 8001e18:	2201      	movs	r2, #1
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	617b      	str	r3, [r7, #20]
		/* Get the current IO position */
		iocurrent = (uint32_t) (GPIO_Init->Pin) & ioposition;
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	697a      	ldr	r2, [r7, #20]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	613b      	str	r3, [r7, #16]

		if (iocurrent == ioposition) {
 8001e2c:	693a      	ldr	r2, [r7, #16]
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	f040 8154 	bne.w	80020de <HAL_GPIO_Init+0x2e2>
			/*--------------------- GPIO Mode Configuration ------------------------*/
			/* In case of Output or Alternate function mode selection */
			if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT)
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f003 0303 	and.w	r3, r3, #3
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d005      	beq.n	8001e4e <HAL_GPIO_Init+0x52>
					|| (GPIO_Init->Mode & GPIO_MODE) == MODE_AF) {
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	f003 0303 	and.w	r3, r3, #3
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d130      	bne.n	8001eb0 <HAL_GPIO_Init+0xb4>
				/* Check the Speed parameter */
				assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
				/* Configure the IO Speed */
				temp = GPIOx->OSPEEDR;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	61bb      	str	r3, [r7, #24]
				temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	2203      	movs	r2, #3
 8001e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5e:	43db      	mvns	r3, r3
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	4013      	ands	r3, r2
 8001e64:	61bb      	str	r3, [r7, #24]
				temp |= (GPIO_Init->Speed << (position * 2U));
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	68da      	ldr	r2, [r3, #12]
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	005b      	lsls	r3, r3, #1
 8001e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	61bb      	str	r3, [r7, #24]
				GPIOx->OSPEEDR = temp;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	69ba      	ldr	r2, [r7, #24]
 8001e7c:	609a      	str	r2, [r3, #8]

				/* Configure the IO Output Type */
				temp = GPIOx->OTYPER;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	61bb      	str	r3, [r7, #24]
				temp &= ~(GPIO_OTYPER_OT_0 << position);
 8001e84:	2201      	movs	r2, #1
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8c:	43db      	mvns	r3, r3
 8001e8e:	69ba      	ldr	r2, [r7, #24]
 8001e90:	4013      	ands	r3, r2
 8001e92:	61bb      	str	r3, [r7, #24]
				temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	091b      	lsrs	r3, r3, #4
 8001e9a:	f003 0201 	and.w	r2, r3, #1
						<< position);
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	fa02 f303 	lsl.w	r3, r2, r3
				temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos)
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	61bb      	str	r3, [r7, #24]
				GPIOx->OTYPER = temp;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	605a      	str	r2, [r3, #4]
			}

			if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) {
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f003 0303 	and.w	r3, r3, #3
 8001eb8:	2b03      	cmp	r3, #3
 8001eba:	d017      	beq.n	8001eec <HAL_GPIO_Init+0xf0>
				/* Check the parameters */
				assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

				/* Activate the Pull-up or Pull down resistor for the current IO */
				temp = GPIOx->PUPDR;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	61bb      	str	r3, [r7, #24]
				temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	005b      	lsls	r3, r3, #1
 8001ec6:	2203      	movs	r2, #3
 8001ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	69ba      	ldr	r2, [r7, #24]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	61bb      	str	r3, [r7, #24]
				temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	689a      	ldr	r2, [r3, #8]
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	005b      	lsls	r3, r3, #1
 8001edc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	61bb      	str	r3, [r7, #24]
				GPIOx->PUPDR = temp;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	60da      	str	r2, [r3, #12]
			}

			/* In case of Alternate function mode selection */
			if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF) {
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f003 0303 	and.w	r3, r3, #3
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d123      	bne.n	8001f40 <HAL_GPIO_Init+0x144>
				/* Check the Alternate function parameter */
				assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
				/* Configure Alternate function mapped with the current IO */
				temp = GPIOx->AFR[position >> 3U];
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	08da      	lsrs	r2, r3, #3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	3208      	adds	r2, #8
 8001f00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f04:	61bb      	str	r3, [r7, #24]
				temp &= ~(0xFU << ((uint32_t) (position & 0x07U) * 4U));
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	f003 0307 	and.w	r3, r3, #7
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	220f      	movs	r2, #15
 8001f10:	fa02 f303 	lsl.w	r3, r2, r3
 8001f14:	43db      	mvns	r3, r3
 8001f16:	69ba      	ldr	r2, [r7, #24]
 8001f18:	4013      	ands	r3, r2
 8001f1a:	61bb      	str	r3, [r7, #24]
				temp |= ((uint32_t) (GPIO_Init->Alternate)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	691a      	ldr	r2, [r3, #16]
						<< (((uint32_t) position & 0x07U) * 4U));
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	f003 0307 	and.w	r3, r3, #7
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	fa02 f303 	lsl.w	r3, r2, r3
				temp |= ((uint32_t) (GPIO_Init->Alternate)
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	61bb      	str	r3, [r7, #24]
				GPIOx->AFR[position >> 3U] = temp;
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	08da      	lsrs	r2, r3, #3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	3208      	adds	r2, #8
 8001f3a:	69b9      	ldr	r1, [r7, #24]
 8001f3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			}

			/* Configure IO Direction mode (Input, Output, Alternate or Analog) */
			temp = GPIOx->MODER;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	61bb      	str	r3, [r7, #24]
			temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	005b      	lsls	r3, r3, #1
 8001f4a:	2203      	movs	r2, #3
 8001f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f50:	43db      	mvns	r3, r3
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	4013      	ands	r3, r2
 8001f56:	61bb      	str	r3, [r7, #24]
			temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f003 0203 	and.w	r2, r3, #3
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	fa02 f303 	lsl.w	r3, r2, r3
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	61bb      	str	r3, [r7, #24]
			GPIOx->MODER = temp;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	601a      	str	r2, [r3, #0]

			/*--------------------- EXTI Mode Configuration ------------------------*/
			/* Configure the External Interrupt or event for the current IO */
			if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U) {
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	f000 80ae 	beq.w	80020de <HAL_GPIO_Init+0x2e2>
				/* Enable SYSCFG Clock */
				__HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f82:	2300      	movs	r3, #0
 8001f84:	60fb      	str	r3, [r7, #12]
 8001f86:	4b5d      	ldr	r3, [pc, #372]	; (80020fc <HAL_GPIO_Init+0x300>)
 8001f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8a:	4a5c      	ldr	r2, [pc, #368]	; (80020fc <HAL_GPIO_Init+0x300>)
 8001f8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f90:	6453      	str	r3, [r2, #68]	; 0x44
 8001f92:	4b5a      	ldr	r3, [pc, #360]	; (80020fc <HAL_GPIO_Init+0x300>)
 8001f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f9a:	60fb      	str	r3, [r7, #12]
 8001f9c:	68fb      	ldr	r3, [r7, #12]

				temp = SYSCFG->EXTICR[position >> 2U];
 8001f9e:	4a58      	ldr	r2, [pc, #352]	; (8002100 <HAL_GPIO_Init+0x304>)
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	089b      	lsrs	r3, r3, #2
 8001fa4:	3302      	adds	r3, #2
 8001fa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001faa:	61bb      	str	r3, [r7, #24]
				temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	f003 0303 	and.w	r3, r3, #3
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	220f      	movs	r2, #15
 8001fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fba:	43db      	mvns	r3, r3
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	61bb      	str	r3, [r7, #24]
				temp |= ((uint32_t) (GPIO_GET_INDEX(GPIOx))
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a4f      	ldr	r2, [pc, #316]	; (8002104 <HAL_GPIO_Init+0x308>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d025      	beq.n	8002016 <HAL_GPIO_Init+0x21a>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a4e      	ldr	r2, [pc, #312]	; (8002108 <HAL_GPIO_Init+0x30c>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d01f      	beq.n	8002012 <HAL_GPIO_Init+0x216>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a4d      	ldr	r2, [pc, #308]	; (800210c <HAL_GPIO_Init+0x310>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d019      	beq.n	800200e <HAL_GPIO_Init+0x212>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4a4c      	ldr	r2, [pc, #304]	; (8002110 <HAL_GPIO_Init+0x314>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d013      	beq.n	800200a <HAL_GPIO_Init+0x20e>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a4b      	ldr	r2, [pc, #300]	; (8002114 <HAL_GPIO_Init+0x318>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d00d      	beq.n	8002006 <HAL_GPIO_Init+0x20a>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a4a      	ldr	r2, [pc, #296]	; (8002118 <HAL_GPIO_Init+0x31c>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d007      	beq.n	8002002 <HAL_GPIO_Init+0x206>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a49      	ldr	r2, [pc, #292]	; (800211c <HAL_GPIO_Init+0x320>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d101      	bne.n	8001ffe <HAL_GPIO_Init+0x202>
 8001ffa:	2306      	movs	r3, #6
 8001ffc:	e00c      	b.n	8002018 <HAL_GPIO_Init+0x21c>
 8001ffe:	2307      	movs	r3, #7
 8002000:	e00a      	b.n	8002018 <HAL_GPIO_Init+0x21c>
 8002002:	2305      	movs	r3, #5
 8002004:	e008      	b.n	8002018 <HAL_GPIO_Init+0x21c>
 8002006:	2304      	movs	r3, #4
 8002008:	e006      	b.n	8002018 <HAL_GPIO_Init+0x21c>
 800200a:	2303      	movs	r3, #3
 800200c:	e004      	b.n	8002018 <HAL_GPIO_Init+0x21c>
 800200e:	2302      	movs	r3, #2
 8002010:	e002      	b.n	8002018 <HAL_GPIO_Init+0x21c>
 8002012:	2301      	movs	r3, #1
 8002014:	e000      	b.n	8002018 <HAL_GPIO_Init+0x21c>
 8002016:	2300      	movs	r3, #0
						<< (4U * (position & 0x03U)));
 8002018:	69fa      	ldr	r2, [r7, #28]
 800201a:	f002 0203 	and.w	r2, r2, #3
 800201e:	0092      	lsls	r2, r2, #2
 8002020:	4093      	lsls	r3, r2
				temp |= ((uint32_t) (GPIO_GET_INDEX(GPIOx))
 8002022:	69ba      	ldr	r2, [r7, #24]
 8002024:	4313      	orrs	r3, r2
 8002026:	61bb      	str	r3, [r7, #24]
				SYSCFG->EXTICR[position >> 2U] = temp;
 8002028:	4935      	ldr	r1, [pc, #212]	; (8002100 <HAL_GPIO_Init+0x304>)
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	089b      	lsrs	r3, r3, #2
 800202e:	3302      	adds	r3, #2
 8002030:	69ba      	ldr	r2, [r7, #24]
 8002032:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				/* Clear Rising Falling edge configuration */
				temp = EXTI->RTSR;
 8002036:	4b3a      	ldr	r3, [pc, #232]	; (8002120 <HAL_GPIO_Init+0x324>)
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	61bb      	str	r3, [r7, #24]
				temp &= ~((uint32_t) iocurrent);
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	43db      	mvns	r3, r3
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	4013      	ands	r3, r2
 8002044:	61bb      	str	r3, [r7, #24]
				if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U) {
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d003      	beq.n	800205a <HAL_GPIO_Init+0x25e>
					temp |= iocurrent;
 8002052:	69ba      	ldr	r2, [r7, #24]
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	4313      	orrs	r3, r2
 8002058:	61bb      	str	r3, [r7, #24]
				}
				EXTI->RTSR = temp;
 800205a:	4a31      	ldr	r2, [pc, #196]	; (8002120 <HAL_GPIO_Init+0x324>)
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	6093      	str	r3, [r2, #8]

				temp = EXTI->FTSR;
 8002060:	4b2f      	ldr	r3, [pc, #188]	; (8002120 <HAL_GPIO_Init+0x324>)
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	61bb      	str	r3, [r7, #24]
				temp &= ~((uint32_t) iocurrent);
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	43db      	mvns	r3, r3
 800206a:	69ba      	ldr	r2, [r7, #24]
 800206c:	4013      	ands	r3, r2
 800206e:	61bb      	str	r3, [r7, #24]
				if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U) {
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d003      	beq.n	8002084 <HAL_GPIO_Init+0x288>
					temp |= iocurrent;
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	4313      	orrs	r3, r2
 8002082:	61bb      	str	r3, [r7, #24]
				}
				EXTI->FTSR = temp;
 8002084:	4a26      	ldr	r2, [pc, #152]	; (8002120 <HAL_GPIO_Init+0x324>)
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	60d3      	str	r3, [r2, #12]

				temp = EXTI->EMR;
 800208a:	4b25      	ldr	r3, [pc, #148]	; (8002120 <HAL_GPIO_Init+0x324>)
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	61bb      	str	r3, [r7, #24]
				temp &= ~((uint32_t) iocurrent);
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	43db      	mvns	r3, r3
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	4013      	ands	r3, r2
 8002098:	61bb      	str	r3, [r7, #24]
				if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U) {
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d003      	beq.n	80020ae <HAL_GPIO_Init+0x2b2>
					temp |= iocurrent;
 80020a6:	69ba      	ldr	r2, [r7, #24]
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	61bb      	str	r3, [r7, #24]
				}
				EXTI->EMR = temp;
 80020ae:	4a1c      	ldr	r2, [pc, #112]	; (8002120 <HAL_GPIO_Init+0x324>)
 80020b0:	69bb      	ldr	r3, [r7, #24]
 80020b2:	6053      	str	r3, [r2, #4]

				/* Clear EXTI line configuration */
				temp = EXTI->IMR;
 80020b4:	4b1a      	ldr	r3, [pc, #104]	; (8002120 <HAL_GPIO_Init+0x324>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	61bb      	str	r3, [r7, #24]
				temp &= ~((uint32_t) iocurrent);
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	43db      	mvns	r3, r3
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	4013      	ands	r3, r2
 80020c2:	61bb      	str	r3, [r7, #24]
				if ((GPIO_Init->Mode & EXTI_IT) != 0x00U) {
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d003      	beq.n	80020d8 <HAL_GPIO_Init+0x2dc>
					temp |= iocurrent;
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	61bb      	str	r3, [r7, #24]
				}
				EXTI->IMR = temp;
 80020d8:	4a11      	ldr	r2, [pc, #68]	; (8002120 <HAL_GPIO_Init+0x324>)
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	6013      	str	r3, [r2, #0]
	for (position = 0U; position < GPIO_NUMBER; position++) {
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	3301      	adds	r3, #1
 80020e2:	61fb      	str	r3, [r7, #28]
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	2b0f      	cmp	r3, #15
 80020e8:	f67f ae96 	bls.w	8001e18 <HAL_GPIO_Init+0x1c>
			}
		}
	}
}
 80020ec:	bf00      	nop
 80020ee:	bf00      	nop
 80020f0:	3724      	adds	r7, #36	; 0x24
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	40023800 	.word	0x40023800
 8002100:	40013800 	.word	0x40013800
 8002104:	40020000 	.word	0x40020000
 8002108:	40020400 	.word	0x40020400
 800210c:	40020800 	.word	0x40020800
 8002110:	40020c00 	.word	0x40020c00
 8002114:	40021000 	.word	0x40021000
 8002118:	40021400 	.word	0x40021400
 800211c:	40021800 	.word	0x40021800
 8002120:	40013c00 	.word	0x40013c00

08002124 <HAL_GPIO_ReadPin>:
 *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
 * @param  GPIO_Pin specifies the port bit to read.
 *         This parameter can be GPIO_PIN_x where x can be (0..15).
 * @retval The input port pin value.
 */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8002124:	b480      	push	{r7}
 8002126:	b085      	sub	sp, #20
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	460b      	mov	r3, r1
 800212e:	807b      	strh	r3, [r7, #2]
	GPIO_PinState bitstatus;

	/* Check the parameters */
	assert_param(IS_GPIO_PIN(GPIO_Pin));

	if ((GPIOx->IDR & GPIO_Pin) != (uint32_t) GPIO_PIN_RESET) {
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	691a      	ldr	r2, [r3, #16]
 8002134:	887b      	ldrh	r3, [r7, #2]
 8002136:	4013      	ands	r3, r2
 8002138:	2b00      	cmp	r3, #0
 800213a:	d002      	beq.n	8002142 <HAL_GPIO_ReadPin+0x1e>
		bitstatus = GPIO_PIN_SET;
 800213c:	2301      	movs	r3, #1
 800213e:	73fb      	strb	r3, [r7, #15]
 8002140:	e001      	b.n	8002146 <HAL_GPIO_ReadPin+0x22>
	} else {
		bitstatus = GPIO_PIN_RESET;
 8002142:	2300      	movs	r3, #0
 8002144:	73fb      	strb	r3, [r7, #15]
	}
	return bitstatus;
 8002146:	7bfb      	ldrb	r3, [r7, #15]
}
 8002148:	4618      	mov	r0, r3
 800214a:	3714      	adds	r7, #20
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <HAL_GPIO_WritePin>:
 *            @arg GPIO_PIN_RESET: to clear the port pin
 *            @arg GPIO_PIN_SET: to set the port pin
 * @retval None
 */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin,
		GPIO_PinState PinState) {
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	460b      	mov	r3, r1
 800215e:	807b      	strh	r3, [r7, #2]
 8002160:	4613      	mov	r3, r2
 8002162:	707b      	strb	r3, [r7, #1]
	/* Check the parameters */
	assert_param(IS_GPIO_PIN(GPIO_Pin));
	assert_param(IS_GPIO_PIN_ACTION(PinState));

	if (PinState != GPIO_PIN_RESET) {
 8002164:	787b      	ldrb	r3, [r7, #1]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d003      	beq.n	8002172 <HAL_GPIO_WritePin+0x1e>
		GPIOx->BSRR = GPIO_Pin;
 800216a:	887a      	ldrh	r2, [r7, #2]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	619a      	str	r2, [r3, #24]
	} else {
		GPIOx->BSRR = (uint32_t) GPIO_Pin << 16U;
	}
}
 8002170:	e003      	b.n	800217a <HAL_GPIO_WritePin+0x26>
		GPIOx->BSRR = (uint32_t) GPIO_Pin << 16U;
 8002172:	887b      	ldrh	r3, [r7, #2]
 8002174:	041a      	lsls	r2, r3, #16
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	619a      	str	r2, [r3, #24]
}
 800217a:	bf00      	nop
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
	...

08002188 <HAL_I2C_Init>:
 *         in the I2C_InitTypeDef and initialize the associated handle.
 * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
 *                the configuration information for the specified I2C.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c) {
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
	uint32_t freqrange;
	uint32_t pclk1;

	/* Check the I2C handle allocation */
	if (hi2c == NULL) {
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d101      	bne.n	800219a <HAL_I2C_Init+0x12>
		return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e12b      	b.n	80023f2 <HAL_I2C_Init+0x26a>
	assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
	assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
	assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
	assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

	if (hi2c->State == HAL_I2C_STATE_RESET) {
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d106      	bne.n	80021b4 <HAL_I2C_Init+0x2c>
		/* Allocate lock resource and initialize it */
		hi2c->Lock = HAL_UNLOCKED;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
		/* Init the low level hardware : GPIO, CLOCK, NVIC */
		HAL_I2C_MspInit(hi2c);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f7ff faca 	bl	8001748 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
	}

	hi2c->State = HAL_I2C_STATE_BUSY;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2224      	movs	r2, #36	; 0x24
 80021b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* Disable the selected I2C peripheral */
	__HAL_I2C_DISABLE(hi2c);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f022 0201 	bic.w	r2, r2, #1
 80021ca:	601a      	str	r2, [r3, #0]

	/*Reset I2C*/
	hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021da:	601a      	str	r2, [r3, #0]
	hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021ea:	601a      	str	r2, [r3, #0]

	/* Get PCLK1 frequency */
	pclk1 = HAL_RCC_GetPCLK1Freq();
 80021ec:	f000 fac8 	bl	8002780 <HAL_RCC_GetPCLK1Freq>
 80021f0:	60f8      	str	r0, [r7, #12]

	/* Check the minimum allowed PCLK1 frequency */
	if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U) {
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	4a81      	ldr	r2, [pc, #516]	; (80023fc <HAL_I2C_Init+0x274>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d807      	bhi.n	800220c <HAL_I2C_Init+0x84>
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	4a80      	ldr	r2, [pc, #512]	; (8002400 <HAL_I2C_Init+0x278>)
 8002200:	4293      	cmp	r3, r2
 8002202:	bf94      	ite	ls
 8002204:	2301      	movls	r3, #1
 8002206:	2300      	movhi	r3, #0
 8002208:	b2db      	uxtb	r3, r3
 800220a:	e006      	b.n	800221a <HAL_I2C_Init+0x92>
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	4a7d      	ldr	r2, [pc, #500]	; (8002404 <HAL_I2C_Init+0x27c>)
 8002210:	4293      	cmp	r3, r2
 8002212:	bf94      	ite	ls
 8002214:	2301      	movls	r3, #1
 8002216:	2300      	movhi	r3, #0
 8002218:	b2db      	uxtb	r3, r3
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <HAL_I2C_Init+0x9a>
		return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e0e7      	b.n	80023f2 <HAL_I2C_Init+0x26a>
	}

	/* Calculate frequency range */
	freqrange = I2C_FREQRANGE(pclk1);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	4a78      	ldr	r2, [pc, #480]	; (8002408 <HAL_I2C_Init+0x280>)
 8002226:	fba2 2303 	umull	r2, r3, r2, r3
 800222a:	0c9b      	lsrs	r3, r3, #18
 800222c:	60bb      	str	r3, [r7, #8]

	/*---------------------------- I2Cx CR2 Configuration ----------------------*/
	/* Configure I2Cx: Frequency range */
	MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	68ba      	ldr	r2, [r7, #8]
 800223e:	430a      	orrs	r2, r1
 8002240:	605a      	str	r2, [r3, #4]

	/*---------------------------- I2Cx TRISE Configuration --------------------*/
	/* Configure I2Cx: Rise Time */
	MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE,
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	6a1b      	ldr	r3, [r3, #32]
 8002248:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	4a6a      	ldr	r2, [pc, #424]	; (80023fc <HAL_I2C_Init+0x274>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d802      	bhi.n	800225c <HAL_I2C_Init+0xd4>
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	3301      	adds	r3, #1
 800225a:	e009      	b.n	8002270 <HAL_I2C_Init+0xe8>
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002262:	fb02 f303 	mul.w	r3, r2, r3
 8002266:	4a69      	ldr	r2, [pc, #420]	; (800240c <HAL_I2C_Init+0x284>)
 8002268:	fba2 2303 	umull	r2, r3, r2, r3
 800226c:	099b      	lsrs	r3, r3, #6
 800226e:	3301      	adds	r3, #1
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	6812      	ldr	r2, [r2, #0]
 8002274:	430b      	orrs	r3, r1
 8002276:	6213      	str	r3, [r2, #32]
			I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));

	/*---------------------------- I2Cx CCR Configuration ----------------------*/
	/* Configure I2Cx: Speed */
	MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR),
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	69db      	ldr	r3, [r3, #28]
 800227e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002282:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	495c      	ldr	r1, [pc, #368]	; (80023fc <HAL_I2C_Init+0x274>)
 800228c:	428b      	cmp	r3, r1
 800228e:	d819      	bhi.n	80022c4 <HAL_I2C_Init+0x13c>
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	1e59      	subs	r1, r3, #1
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	005b      	lsls	r3, r3, #1
 800229a:	fbb1 f3f3 	udiv	r3, r1, r3
 800229e:	1c59      	adds	r1, r3, #1
 80022a0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80022a4:	400b      	ands	r3, r1
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d00a      	beq.n	80022c0 <HAL_I2C_Init+0x138>
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	1e59      	subs	r1, r3, #1
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	005b      	lsls	r3, r3, #1
 80022b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80022b8:	3301      	adds	r3, #1
 80022ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022be:	e051      	b.n	8002364 <HAL_I2C_Init+0x1dc>
 80022c0:	2304      	movs	r3, #4
 80022c2:	e04f      	b.n	8002364 <HAL_I2C_Init+0x1dc>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d111      	bne.n	80022f0 <HAL_I2C_Init+0x168>
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	1e58      	subs	r0, r3, #1
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6859      	ldr	r1, [r3, #4]
 80022d4:	460b      	mov	r3, r1
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	440b      	add	r3, r1
 80022da:	fbb0 f3f3 	udiv	r3, r0, r3
 80022de:	3301      	adds	r3, #1
 80022e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	bf0c      	ite	eq
 80022e8:	2301      	moveq	r3, #1
 80022ea:	2300      	movne	r3, #0
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	e012      	b.n	8002316 <HAL_I2C_Init+0x18e>
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	1e58      	subs	r0, r3, #1
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6859      	ldr	r1, [r3, #4]
 80022f8:	460b      	mov	r3, r1
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	440b      	add	r3, r1
 80022fe:	0099      	lsls	r1, r3, #2
 8002300:	440b      	add	r3, r1
 8002302:	fbb0 f3f3 	udiv	r3, r0, r3
 8002306:	3301      	adds	r3, #1
 8002308:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800230c:	2b00      	cmp	r3, #0
 800230e:	bf0c      	ite	eq
 8002310:	2301      	moveq	r3, #1
 8002312:	2300      	movne	r3, #0
 8002314:	b2db      	uxtb	r3, r3
 8002316:	2b00      	cmp	r3, #0
 8002318:	d001      	beq.n	800231e <HAL_I2C_Init+0x196>
 800231a:	2301      	movs	r3, #1
 800231c:	e022      	b.n	8002364 <HAL_I2C_Init+0x1dc>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d10e      	bne.n	8002344 <HAL_I2C_Init+0x1bc>
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	1e58      	subs	r0, r3, #1
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6859      	ldr	r1, [r3, #4]
 800232e:	460b      	mov	r3, r1
 8002330:	005b      	lsls	r3, r3, #1
 8002332:	440b      	add	r3, r1
 8002334:	fbb0 f3f3 	udiv	r3, r0, r3
 8002338:	3301      	adds	r3, #1
 800233a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800233e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002342:	e00f      	b.n	8002364 <HAL_I2C_Init+0x1dc>
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	1e58      	subs	r0, r3, #1
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6859      	ldr	r1, [r3, #4]
 800234c:	460b      	mov	r3, r1
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	440b      	add	r3, r1
 8002352:	0099      	lsls	r1, r3, #2
 8002354:	440b      	add	r3, r1
 8002356:	fbb0 f3f3 	udiv	r3, r0, r3
 800235a:	3301      	adds	r3, #1
 800235c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002360:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002364:	6879      	ldr	r1, [r7, #4]
 8002366:	6809      	ldr	r1, [r1, #0]
 8002368:	4313      	orrs	r3, r2
 800236a:	61cb      	str	r3, [r1, #28]
			I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));

	/*---------------------------- I2Cx CR1 Configuration ----------------------*/
	/* Configure I2Cx: Generalcall and NoStretch mode */
	MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH),
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	69da      	ldr	r2, [r3, #28]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a1b      	ldr	r3, [r3, #32]
 800237e:	431a      	orrs	r2, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	430a      	orrs	r2, r1
 8002386:	601a      	str	r2, [r3, #0]
			(hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));

	/*---------------------------- I2Cx OAR1 Configuration ---------------------*/
	/* Configure I2Cx: Own Address1 and addressing mode */
	MODIFY_REG(hi2c->Instance->OAR1,
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002392:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	6911      	ldr	r1, [r2, #16]
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	68d2      	ldr	r2, [r2, #12]
 800239e:	4311      	orrs	r1, r2
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	6812      	ldr	r2, [r2, #0]
 80023a4:	430b      	orrs	r3, r1
 80023a6:	6093      	str	r3, [r2, #8]
			(I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0),
			(hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));

	/*---------------------------- I2Cx OAR2 Configuration ---------------------*/
	/* Configure I2Cx: Dual mode and Own Address2 */
	MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2),
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	695a      	ldr	r2, [r3, #20]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	699b      	ldr	r3, [r3, #24]
 80023ba:	431a      	orrs	r2, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	430a      	orrs	r2, r1
 80023c2:	60da      	str	r2, [r3, #12]
			(hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));

	/* Enable the selected I2C peripheral */
	__HAL_I2C_ENABLE(hi2c);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f042 0201 	orr.w	r2, r2, #1
 80023d2:	601a      	str	r2, [r3, #0]

	hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	641a      	str	r2, [r3, #64]	; 0x40
	hi2c->State = HAL_I2C_STATE_READY;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2220      	movs	r2, #32
 80023de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	hi2c->PreviousState = I2C_STATE_NONE;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	631a      	str	r2, [r3, #48]	; 0x30
	hi2c->Mode = HAL_I2C_MODE_NONE;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2200      	movs	r2, #0
 80023ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

	return HAL_OK;
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3710      	adds	r7, #16
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	000186a0 	.word	0x000186a0
 8002400:	001e847f 	.word	0x001e847f
 8002404:	003d08ff 	.word	0x003d08ff
 8002408:	431bde83 	.word	0x431bde83
 800240c:	10624dd3 	.word	0x10624dd3

08002410 <HAL_RCC_ClockConfig>:
 *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
 *         (for more details refer to section above "Initialization/de-initialization functions")
 * @retval None
 */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef *RCC_ClkInitStruct,
		uint32_t FLatency) {
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]
	uint32_t tickstart;

	/* Check Null pointer */
	if (RCC_ClkInitStruct == NULL) {
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d101      	bne.n	8002424 <HAL_RCC_ClockConfig+0x14>
		return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e0cc      	b.n	80025be <HAL_RCC_ClockConfig+0x1ae>
	/* To correctly read data from FLASH memory, the number of wait states (LATENCY)
	 must be correctly programmed according to the frequency of the CPU clock
	 (HCLK) and the supply voltage of the device. */

	/* Increasing the number of wait states because of higher CPU frequency */
	if (FLatency > __HAL_FLASH_GET_LATENCY()) {
 8002424:	4b68      	ldr	r3, [pc, #416]	; (80025c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0307 	and.w	r3, r3, #7
 800242c:	683a      	ldr	r2, [r7, #0]
 800242e:	429a      	cmp	r2, r3
 8002430:	d90c      	bls.n	800244c <HAL_RCC_ClockConfig+0x3c>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		__HAL_FLASH_SET_LATENCY(FLatency);
 8002432:	4b65      	ldr	r3, [pc, #404]	; (80025c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002434:	683a      	ldr	r2, [r7, #0]
 8002436:	b2d2      	uxtb	r2, r2
 8002438:	701a      	strb	r2, [r3, #0]

		/* Check that the new number of wait states is taken into account to access the Flash
		 memory by reading the FLASH_ACR register */
		if (__HAL_FLASH_GET_LATENCY() != FLatency) {
 800243a:	4b63      	ldr	r3, [pc, #396]	; (80025c8 <HAL_RCC_ClockConfig+0x1b8>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0307 	and.w	r3, r3, #7
 8002442:	683a      	ldr	r2, [r7, #0]
 8002444:	429a      	cmp	r2, r3
 8002446:	d001      	beq.n	800244c <HAL_RCC_ClockConfig+0x3c>
			return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e0b8      	b.n	80025be <HAL_RCC_ClockConfig+0x1ae>
		}
	}

	/*-------------------------- HCLK Configuration --------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0302 	and.w	r3, r3, #2
 8002454:	2b00      	cmp	r3, #0
 8002456:	d020      	beq.n	800249a <HAL_RCC_ClockConfig+0x8a>
			== RCC_CLOCKTYPE_HCLK) {
		/* Set the highest APBx dividers in order to ensure that we do not go through
		 a non-spec phase whatever we decrease or increase HCLK. */
		if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0304 	and.w	r3, r3, #4
 8002460:	2b00      	cmp	r3, #0
 8002462:	d005      	beq.n	8002470 <HAL_RCC_ClockConfig+0x60>
				== RCC_CLOCKTYPE_PCLK1) {
			MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002464:	4b59      	ldr	r3, [pc, #356]	; (80025cc <HAL_RCC_ClockConfig+0x1bc>)
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	4a58      	ldr	r2, [pc, #352]	; (80025cc <HAL_RCC_ClockConfig+0x1bc>)
 800246a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800246e:	6093      	str	r3, [r2, #8]
		}

		if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0308 	and.w	r3, r3, #8
 8002478:	2b00      	cmp	r3, #0
 800247a:	d005      	beq.n	8002488 <HAL_RCC_ClockConfig+0x78>
				== RCC_CLOCKTYPE_PCLK2) {
			MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800247c:	4b53      	ldr	r3, [pc, #332]	; (80025cc <HAL_RCC_ClockConfig+0x1bc>)
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	4a52      	ldr	r2, [pc, #328]	; (80025cc <HAL_RCC_ClockConfig+0x1bc>)
 8002482:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002486:	6093      	str	r3, [r2, #8]
		}

		assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
		MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002488:	4b50      	ldr	r3, [pc, #320]	; (80025cc <HAL_RCC_ClockConfig+0x1bc>)
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	494d      	ldr	r1, [pc, #308]	; (80025cc <HAL_RCC_ClockConfig+0x1bc>)
 8002496:	4313      	orrs	r3, r2
 8002498:	608b      	str	r3, [r1, #8]
	}

	/*------------------------- SYSCLK Configuration ---------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0301 	and.w	r3, r3, #1
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d044      	beq.n	8002530 <HAL_RCC_ClockConfig+0x120>
			== RCC_CLOCKTYPE_SYSCLK) {
		assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

		/* HSE is selected as System Clock Source */
		if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE) {
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d107      	bne.n	80024be <HAL_RCC_ClockConfig+0xae>
			/* Check the HSE ready flag */
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 80024ae:	4b47      	ldr	r3, [pc, #284]	; (80025cc <HAL_RCC_ClockConfig+0x1bc>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d119      	bne.n	80024ee <HAL_RCC_ClockConfig+0xde>
				return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e07f      	b.n	80025be <HAL_RCC_ClockConfig+0x1ae>
			}
		}
		/* PLL is selected as System Clock Source */
		else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d003      	beq.n	80024ce <HAL_RCC_ClockConfig+0xbe>
				|| (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)) {
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	2b03      	cmp	r3, #3
 80024cc:	d107      	bne.n	80024de <HAL_RCC_ClockConfig+0xce>
			/* Check the PLL ready flag */
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 80024ce:	4b3f      	ldr	r3, [pc, #252]	; (80025cc <HAL_RCC_ClockConfig+0x1bc>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d109      	bne.n	80024ee <HAL_RCC_ClockConfig+0xde>
				return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e06f      	b.n	80025be <HAL_RCC_ClockConfig+0x1ae>
			}
		}
		/* HSI is selected as System Clock Source */
		else {
			/* Check the HSI ready flag */
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 80024de:	4b3b      	ldr	r3, [pc, #236]	; (80025cc <HAL_RCC_ClockConfig+0x1bc>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0302 	and.w	r3, r3, #2
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d101      	bne.n	80024ee <HAL_RCC_ClockConfig+0xde>
				return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e067      	b.n	80025be <HAL_RCC_ClockConfig+0x1ae>
			}
		}

		__HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024ee:	4b37      	ldr	r3, [pc, #220]	; (80025cc <HAL_RCC_ClockConfig+0x1bc>)
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f023 0203 	bic.w	r2, r3, #3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	4934      	ldr	r1, [pc, #208]	; (80025cc <HAL_RCC_ClockConfig+0x1bc>)
 80024fc:	4313      	orrs	r3, r2
 80024fe:	608b      	str	r3, [r1, #8]

		/* Get Start Tick */
		tickstart = HAL_GetTick();
 8002500:	f7ff fb6a 	bl	8001bd8 <HAL_GetTick>
 8002504:	60f8      	str	r0, [r7, #12]

		while (__HAL_RCC_GET_SYSCLK_SOURCE()
 8002506:	e00a      	b.n	800251e <HAL_RCC_ClockConfig+0x10e>
				!= (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos)) {
			if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE) {
 8002508:	f7ff fb66 	bl	8001bd8 <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	f241 3288 	movw	r2, #5000	; 0x1388
 8002516:	4293      	cmp	r3, r2
 8002518:	d901      	bls.n	800251e <HAL_RCC_ClockConfig+0x10e>
				return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e04f      	b.n	80025be <HAL_RCC_ClockConfig+0x1ae>
		while (__HAL_RCC_GET_SYSCLK_SOURCE()
 800251e:	4b2b      	ldr	r3, [pc, #172]	; (80025cc <HAL_RCC_ClockConfig+0x1bc>)
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	f003 020c 	and.w	r2, r3, #12
				!= (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos)) {
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	009b      	lsls	r3, r3, #2
		while (__HAL_RCC_GET_SYSCLK_SOURCE()
 800252c:	429a      	cmp	r2, r3
 800252e:	d1eb      	bne.n	8002508 <HAL_RCC_ClockConfig+0xf8>
			}
		}
	}

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLatency < __HAL_FLASH_GET_LATENCY()) {
 8002530:	4b25      	ldr	r3, [pc, #148]	; (80025c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0307 	and.w	r3, r3, #7
 8002538:	683a      	ldr	r2, [r7, #0]
 800253a:	429a      	cmp	r2, r3
 800253c:	d20c      	bcs.n	8002558 <HAL_RCC_ClockConfig+0x148>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		__HAL_FLASH_SET_LATENCY(FLatency);
 800253e:	4b22      	ldr	r3, [pc, #136]	; (80025c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002540:	683a      	ldr	r2, [r7, #0]
 8002542:	b2d2      	uxtb	r2, r2
 8002544:	701a      	strb	r2, [r3, #0]

		/* Check that the new number of wait states is taken into account to access the Flash
		 memory by reading the FLASH_ACR register */
		if (__HAL_FLASH_GET_LATENCY() != FLatency) {
 8002546:	4b20      	ldr	r3, [pc, #128]	; (80025c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0307 	and.w	r3, r3, #7
 800254e:	683a      	ldr	r2, [r7, #0]
 8002550:	429a      	cmp	r2, r3
 8002552:	d001      	beq.n	8002558 <HAL_RCC_ClockConfig+0x148>
			return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e032      	b.n	80025be <HAL_RCC_ClockConfig+0x1ae>
		}
	}

	/*-------------------------- PCLK1 Configuration ---------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0304 	and.w	r3, r3, #4
 8002560:	2b00      	cmp	r3, #0
 8002562:	d008      	beq.n	8002576 <HAL_RCC_ClockConfig+0x166>
			== RCC_CLOCKTYPE_PCLK1) {
		assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
		MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1,
 8002564:	4b19      	ldr	r3, [pc, #100]	; (80025cc <HAL_RCC_ClockConfig+0x1bc>)
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	4916      	ldr	r1, [pc, #88]	; (80025cc <HAL_RCC_ClockConfig+0x1bc>)
 8002572:	4313      	orrs	r3, r2
 8002574:	608b      	str	r3, [r1, #8]
				RCC_ClkInitStruct->APB1CLKDivider);
	}

	/*-------------------------- PCLK2 Configuration ---------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0308 	and.w	r3, r3, #8
 800257e:	2b00      	cmp	r3, #0
 8002580:	d009      	beq.n	8002596 <HAL_RCC_ClockConfig+0x186>
			== RCC_CLOCKTYPE_PCLK2) {
		assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
		MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2,
 8002582:	4b12      	ldr	r3, [pc, #72]	; (80025cc <HAL_RCC_ClockConfig+0x1bc>)
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	691b      	ldr	r3, [r3, #16]
 800258e:	00db      	lsls	r3, r3, #3
 8002590:	490e      	ldr	r1, [pc, #56]	; (80025cc <HAL_RCC_ClockConfig+0x1bc>)
 8002592:	4313      	orrs	r3, r2
 8002594:	608b      	str	r3, [r1, #8]
				((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
	}

	/* Update the SystemCoreClock global variable */
	SystemCoreClock = HAL_RCC_GetSysClockFreq()
 8002596:	f000 f821 	bl	80025dc <HAL_RCC_GetSysClockFreq>
 800259a:	4602      	mov	r2, r0
			>> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800259c:	4b0b      	ldr	r3, [pc, #44]	; (80025cc <HAL_RCC_ClockConfig+0x1bc>)
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	091b      	lsrs	r3, r3, #4
 80025a2:	f003 030f 	and.w	r3, r3, #15
 80025a6:	490a      	ldr	r1, [pc, #40]	; (80025d0 <HAL_RCC_ClockConfig+0x1c0>)
 80025a8:	5ccb      	ldrb	r3, [r1, r3]
 80025aa:	fa22 f303 	lsr.w	r3, r2, r3
	SystemCoreClock = HAL_RCC_GetSysClockFreq()
 80025ae:	4a09      	ldr	r2, [pc, #36]	; (80025d4 <HAL_RCC_ClockConfig+0x1c4>)
 80025b0:	6013      	str	r3, [r2, #0]

	/* Configure the source of time base considering new system clocks settings */
	HAL_InitTick(uwTickPrio);
 80025b2:	4b09      	ldr	r3, [pc, #36]	; (80025d8 <HAL_RCC_ClockConfig+0x1c8>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7ff f978 	bl	80018ac <HAL_InitTick>

	return HAL_OK;
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3710      	adds	r7, #16
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	40023c00 	.word	0x40023c00
 80025cc:	40023800 	.word	0x40023800
 80025d0:	08007d20 	.word	0x08007d20
 80025d4:	20000000 	.word	0x20000000
 80025d8:	20000004 	.word	0x20000004

080025dc <HAL_RCC_GetSysClockFreq>:
 *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
 *
 *
 * @retval SYSCLK frequency
 */
__weak uint32_t HAL_RCC_GetSysClockFreq(void) {
 80025dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025e0:	b090      	sub	sp, #64	; 0x40
 80025e2:	af00      	add	r7, sp, #0
	uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80025e4:	2300      	movs	r3, #0
 80025e6:	637b      	str	r3, [r7, #52]	; 0x34
 80025e8:	2300      	movs	r3, #0
 80025ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025ec:	2300      	movs	r3, #0
 80025ee:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t sysclockfreq = 0U;
 80025f0:	2300      	movs	r3, #0
 80025f2:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Get SYSCLK source -------------------------------------------------------*/
	switch (RCC->CFGR & RCC_CFGR_SWS) {
 80025f4:	4b59      	ldr	r3, [pc, #356]	; (800275c <HAL_RCC_GetSysClockFreq+0x180>)
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	f003 030c 	and.w	r3, r3, #12
 80025fc:	2b08      	cmp	r3, #8
 80025fe:	d00d      	beq.n	800261c <HAL_RCC_GetSysClockFreq+0x40>
 8002600:	2b08      	cmp	r3, #8
 8002602:	f200 80a1 	bhi.w	8002748 <HAL_RCC_GetSysClockFreq+0x16c>
 8002606:	2b00      	cmp	r3, #0
 8002608:	d002      	beq.n	8002610 <HAL_RCC_GetSysClockFreq+0x34>
 800260a:	2b04      	cmp	r3, #4
 800260c:	d003      	beq.n	8002616 <HAL_RCC_GetSysClockFreq+0x3a>
 800260e:	e09b      	b.n	8002748 <HAL_RCC_GetSysClockFreq+0x16c>
	case RCC_CFGR_SWS_HSI: /* HSI used as system clock source */
	{
		sysclockfreq = HSI_VALUE;
 8002610:	4b53      	ldr	r3, [pc, #332]	; (8002760 <HAL_RCC_GetSysClockFreq+0x184>)
 8002612:	63bb      	str	r3, [r7, #56]	; 0x38
		break;
 8002614:	e09b      	b.n	800274e <HAL_RCC_GetSysClockFreq+0x172>
	}
	case RCC_CFGR_SWS_HSE: /* HSE used as system clock  source */
	{
		sysclockfreq = HSE_VALUE;
 8002616:	4b53      	ldr	r3, [pc, #332]	; (8002764 <HAL_RCC_GetSysClockFreq+0x188>)
 8002618:	63bb      	str	r3, [r7, #56]	; 0x38
		break;
 800261a:	e098      	b.n	800274e <HAL_RCC_GetSysClockFreq+0x172>
	}
	case RCC_CFGR_SWS_PLL: /* PLL used as system clock  source */
	{
		/* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
		 SYSCLK = PLL_VCO / PLLP */
		pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800261c:	4b4f      	ldr	r3, [pc, #316]	; (800275c <HAL_RCC_GetSysClockFreq+0x180>)
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002624:	637b      	str	r3, [r7, #52]	; 0x34
		if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI) {
 8002626:	4b4d      	ldr	r3, [pc, #308]	; (800275c <HAL_RCC_GetSysClockFreq+0x180>)
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d028      	beq.n	8002684 <HAL_RCC_GetSysClockFreq+0xa8>
			/* HSE used as PLL clock source */
			pllvco = (uint32_t) ((((uint64_t) HSE_VALUE
					* ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
 8002632:	4b4a      	ldr	r3, [pc, #296]	; (800275c <HAL_RCC_GetSysClockFreq+0x180>)
 8002634:	685b      	ldr	r3, [r3, #4]
							>> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 8002636:	099b      	lsrs	r3, r3, #6
					* ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
 8002638:	2200      	movs	r2, #0
 800263a:	623b      	str	r3, [r7, #32]
 800263c:	627a      	str	r2, [r7, #36]	; 0x24
 800263e:	6a3b      	ldr	r3, [r7, #32]
 8002640:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002644:	2100      	movs	r1, #0
 8002646:	4b47      	ldr	r3, [pc, #284]	; (8002764 <HAL_RCC_GetSysClockFreq+0x188>)
 8002648:	fb03 f201 	mul.w	r2, r3, r1
 800264c:	2300      	movs	r3, #0
 800264e:	fb00 f303 	mul.w	r3, r0, r3
 8002652:	4413      	add	r3, r2
 8002654:	4a43      	ldr	r2, [pc, #268]	; (8002764 <HAL_RCC_GetSysClockFreq+0x188>)
 8002656:	fba0 1202 	umull	r1, r2, r0, r2
 800265a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800265c:	460a      	mov	r2, r1
 800265e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002660:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002662:	4413      	add	r3, r2
 8002664:	62fb      	str	r3, [r7, #44]	; 0x2c
							>> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 8002666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002668:	2200      	movs	r2, #0
 800266a:	61bb      	str	r3, [r7, #24]
 800266c:	61fa      	str	r2, [r7, #28]
 800266e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002672:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002676:	f7fe fad7 	bl	8000c28 <__aeabi_uldivmod>
 800267a:	4602      	mov	r2, r0
 800267c:	460b      	mov	r3, r1
			pllvco = (uint32_t) ((((uint64_t) HSE_VALUE
 800267e:	4613      	mov	r3, r2
 8002680:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002682:	e053      	b.n	800272c <HAL_RCC_GetSysClockFreq+0x150>
		} else {
			/* HSI used as PLL clock source */
			pllvco = (uint32_t) ((((uint64_t) HSI_VALUE
					* ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
 8002684:	4b35      	ldr	r3, [pc, #212]	; (800275c <HAL_RCC_GetSysClockFreq+0x180>)
 8002686:	685b      	ldr	r3, [r3, #4]
							>> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 8002688:	099b      	lsrs	r3, r3, #6
					* ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
 800268a:	2200      	movs	r2, #0
 800268c:	613b      	str	r3, [r7, #16]
 800268e:	617a      	str	r2, [r7, #20]
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002696:	f04f 0b00 	mov.w	fp, #0
 800269a:	4652      	mov	r2, sl
 800269c:	465b      	mov	r3, fp
 800269e:	f04f 0000 	mov.w	r0, #0
 80026a2:	f04f 0100 	mov.w	r1, #0
 80026a6:	0159      	lsls	r1, r3, #5
 80026a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026ac:	0150      	lsls	r0, r2, #5
 80026ae:	4602      	mov	r2, r0
 80026b0:	460b      	mov	r3, r1
 80026b2:	ebb2 080a 	subs.w	r8, r2, sl
 80026b6:	eb63 090b 	sbc.w	r9, r3, fp
 80026ba:	f04f 0200 	mov.w	r2, #0
 80026be:	f04f 0300 	mov.w	r3, #0
 80026c2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80026c6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80026ca:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80026ce:	ebb2 0408 	subs.w	r4, r2, r8
 80026d2:	eb63 0509 	sbc.w	r5, r3, r9
 80026d6:	f04f 0200 	mov.w	r2, #0
 80026da:	f04f 0300 	mov.w	r3, #0
 80026de:	00eb      	lsls	r3, r5, #3
 80026e0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026e4:	00e2      	lsls	r2, r4, #3
 80026e6:	4614      	mov	r4, r2
 80026e8:	461d      	mov	r5, r3
 80026ea:	eb14 030a 	adds.w	r3, r4, sl
 80026ee:	603b      	str	r3, [r7, #0]
 80026f0:	eb45 030b 	adc.w	r3, r5, fp
 80026f4:	607b      	str	r3, [r7, #4]
 80026f6:	f04f 0200 	mov.w	r2, #0
 80026fa:	f04f 0300 	mov.w	r3, #0
 80026fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002702:	4629      	mov	r1, r5
 8002704:	028b      	lsls	r3, r1, #10
 8002706:	4621      	mov	r1, r4
 8002708:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800270c:	4621      	mov	r1, r4
 800270e:	028a      	lsls	r2, r1, #10
 8002710:	4610      	mov	r0, r2
 8002712:	4619      	mov	r1, r3
							>> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 8002714:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002716:	2200      	movs	r2, #0
 8002718:	60bb      	str	r3, [r7, #8]
 800271a:	60fa      	str	r2, [r7, #12]
 800271c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002720:	f7fe fa82 	bl	8000c28 <__aeabi_uldivmod>
 8002724:	4602      	mov	r2, r0
 8002726:	460b      	mov	r3, r1
			pllvco = (uint32_t) ((((uint64_t) HSI_VALUE
 8002728:	4613      	mov	r3, r2
 800272a:	63fb      	str	r3, [r7, #60]	; 0x3c
		}
		pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos)
 800272c:	4b0b      	ldr	r3, [pc, #44]	; (800275c <HAL_RCC_GetSysClockFreq+0x180>)
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	0c1b      	lsrs	r3, r3, #16
 8002732:	f003 0303 	and.w	r3, r3, #3
				+ 1U) * 2U);
 8002736:	3301      	adds	r3, #1
		pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos)
 8002738:	005b      	lsls	r3, r3, #1
 800273a:	633b      	str	r3, [r7, #48]	; 0x30

		sysclockfreq = pllvco / pllp;
 800273c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800273e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002740:	fbb2 f3f3 	udiv	r3, r2, r3
 8002744:	63bb      	str	r3, [r7, #56]	; 0x38
		break;
 8002746:	e002      	b.n	800274e <HAL_RCC_GetSysClockFreq+0x172>
	}
	default: {
		sysclockfreq = HSI_VALUE;
 8002748:	4b05      	ldr	r3, [pc, #20]	; (8002760 <HAL_RCC_GetSysClockFreq+0x184>)
 800274a:	63bb      	str	r3, [r7, #56]	; 0x38
		break;
 800274c:	bf00      	nop
	}
	}
	return sysclockfreq;
 800274e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002750:	4618      	mov	r0, r3
 8002752:	3740      	adds	r7, #64	; 0x40
 8002754:	46bd      	mov	sp, r7
 8002756:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800275a:	bf00      	nop
 800275c:	40023800 	.word	0x40023800
 8002760:	00f42400 	.word	0x00f42400
 8002764:	017d7840 	.word	0x017d7840

08002768 <HAL_RCC_GetHCLKFreq>:
 *
 * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
 *         and updated within this function
 * @retval HCLK frequency
 */
uint32_t HAL_RCC_GetHCLKFreq(void) {
 8002768:	b480      	push	{r7}
 800276a:	af00      	add	r7, sp, #0
	return SystemCoreClock;
 800276c:	4b03      	ldr	r3, [pc, #12]	; (800277c <HAL_RCC_GetHCLKFreq+0x14>)
 800276e:	681b      	ldr	r3, [r3, #0]
}
 8002770:	4618      	mov	r0, r3
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	20000000 	.word	0x20000000

08002780 <HAL_RCC_GetPCLK1Freq>:
 * @brief  Returns the PCLK1 frequency
 * @note   Each time PCLK1 changes, this function must be called to update the
 *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
 * @retval PCLK1 frequency
 */
uint32_t HAL_RCC_GetPCLK1Freq(void) {
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
	return (HAL_RCC_GetHCLKFreq()
 8002784:	f7ff fff0 	bl	8002768 <HAL_RCC_GetHCLKFreq>
 8002788:	4602      	mov	r2, r0
			>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800278a:	4b05      	ldr	r3, [pc, #20]	; (80027a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	0a9b      	lsrs	r3, r3, #10
 8002790:	f003 0307 	and.w	r3, r3, #7
 8002794:	4903      	ldr	r1, [pc, #12]	; (80027a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002796:	5ccb      	ldrb	r3, [r1, r3]
 8002798:	fa22 f303 	lsr.w	r3, r2, r3
}
 800279c:	4618      	mov	r0, r3
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	40023800 	.word	0x40023800
 80027a4:	08007d30 	.word	0x08007d30

080027a8 <HAL_RCC_GetPCLK2Freq>:
 * @brief  Returns the PCLK2 frequency
 * @note   Each time PCLK2 changes, this function must be called to update the
 *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
 * @retval PCLK2 frequency
 */
uint32_t HAL_RCC_GetPCLK2Freq(void) {
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
	return (HAL_RCC_GetHCLKFreq()
 80027ac:	f7ff ffdc 	bl	8002768 <HAL_RCC_GetHCLKFreq>
 80027b0:	4602      	mov	r2, r0
			>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80027b2:	4b05      	ldr	r3, [pc, #20]	; (80027c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	0b5b      	lsrs	r3, r3, #13
 80027b8:	f003 0307 	and.w	r3, r3, #7
 80027bc:	4903      	ldr	r1, [pc, #12]	; (80027cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80027be:	5ccb      	ldrb	r3, [r1, r3]
 80027c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	40023800 	.word	0x40023800
 80027cc:	08007d30 	.word	0x08007d30

080027d0 <HAL_RCC_GetClockConfig>:
 * will be configured.
 * @param  pFLatency Pointer on the Flash Latency.
 * @retval None
 */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef *RCC_ClkInitStruct,
		uint32_t *pFLatency) {
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
	/* Set all possible values for the Clock type parameter --------------------*/
	RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	220f      	movs	r2, #15
 80027de:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;

	/* Get the SYSCLK configuration --------------------------------------------*/
	RCC_ClkInitStruct->SYSCLKSource = (uint32_t) (RCC->CFGR & RCC_CFGR_SW);
 80027e0:	4b12      	ldr	r3, [pc, #72]	; (800282c <HAL_RCC_GetClockConfig+0x5c>)
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	f003 0203 	and.w	r2, r3, #3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	605a      	str	r2, [r3, #4]

	/* Get the HCLK configuration ----------------------------------------------*/
	RCC_ClkInitStruct->AHBCLKDivider = (uint32_t) (RCC->CFGR & RCC_CFGR_HPRE);
 80027ec:	4b0f      	ldr	r3, [pc, #60]	; (800282c <HAL_RCC_GetClockConfig+0x5c>)
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	609a      	str	r2, [r3, #8]

	/* Get the APB1 configuration ----------------------------------------------*/
	RCC_ClkInitStruct->APB1CLKDivider = (uint32_t) (RCC->CFGR & RCC_CFGR_PPRE1);
 80027f8:	4b0c      	ldr	r3, [pc, #48]	; (800282c <HAL_RCC_GetClockConfig+0x5c>)
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	60da      	str	r2, [r3, #12]

	/* Get the APB2 configuration ----------------------------------------------*/
	RCC_ClkInitStruct->APB2CLKDivider = (uint32_t) ((RCC->CFGR & RCC_CFGR_PPRE2)
 8002804:	4b09      	ldr	r3, [pc, #36]	; (800282c <HAL_RCC_GetClockConfig+0x5c>)
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	08db      	lsrs	r3, r3, #3
 800280a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	611a      	str	r2, [r3, #16]
			>> 3U);

	/* Get the Flash Wait State (Latency) configuration ------------------------*/
	*pFLatency = (uint32_t) (FLASH->ACR & FLASH_ACR_LATENCY);
 8002812:	4b07      	ldr	r3, [pc, #28]	; (8002830 <HAL_RCC_GetClockConfig+0x60>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0207 	and.w	r2, r3, #7
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	601a      	str	r2, [r3, #0]
}
 800281e:	bf00      	nop
 8002820:	370c      	adds	r7, #12
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	40023800 	.word	0x40023800
 8002830:	40023c00 	.word	0x40023c00

08002834 <HAL_RCC_OscConfig>:
 *         first and then HSE On or HSE Bypass.
 * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
 *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef *RCC_OscInitStruct) {
 8002834:	b580      	push	{r7, lr}
 8002836:	b086      	sub	sp, #24
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
	uint32_t tickstart, pll_config;

	/* Check Null pointer */
	if (RCC_OscInitStruct == NULL) {
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d101      	bne.n	8002846 <HAL_RCC_OscConfig+0x12>
		return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e273      	b.n	8002d2e <HAL_RCC_OscConfig+0x4fa>
	}

	/* Check the parameters */
	assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
	/*------------------------------- HSE Configuration ------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0301 	and.w	r3, r3, #1
 800284e:	2b00      	cmp	r3, #0
 8002850:	d075      	beq.n	800293e <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
		if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002852:	4b88      	ldr	r3, [pc, #544]	; (8002a74 <HAL_RCC_OscConfig+0x240>)
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	f003 030c 	and.w	r3, r3, #12
 800285a:	2b04      	cmp	r3, #4
 800285c:	d00c      	beq.n	8002878 <HAL_RCC_OscConfig+0x44>
				|| ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800285e:	4b85      	ldr	r3, [pc, #532]	; (8002a74 <HAL_RCC_OscConfig+0x240>)
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	f003 030c 	and.w	r3, r3, #12
 8002866:	2b08      	cmp	r3, #8
 8002868:	d112      	bne.n	8002890 <HAL_RCC_OscConfig+0x5c>
						&& ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC)
 800286a:	4b82      	ldr	r3, [pc, #520]	; (8002a74 <HAL_RCC_OscConfig+0x240>)
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002872:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002876:	d10b      	bne.n	8002890 <HAL_RCC_OscConfig+0x5c>
								== RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
				{
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002878:	4b7e      	ldr	r3, [pc, #504]	; (8002a74 <HAL_RCC_OscConfig+0x240>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d05b      	beq.n	800293c <HAL_RCC_OscConfig+0x108>
					&& (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)) {
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d157      	bne.n	800293c <HAL_RCC_OscConfig+0x108>
				return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e24e      	b.n	8002d2e <HAL_RCC_OscConfig+0x4fa>
			}
		} else {
			/* Set the new HSE configuration ---------------------------------------*/
			__HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002898:	d106      	bne.n	80028a8 <HAL_RCC_OscConfig+0x74>
 800289a:	4b76      	ldr	r3, [pc, #472]	; (8002a74 <HAL_RCC_OscConfig+0x240>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a75      	ldr	r2, [pc, #468]	; (8002a74 <HAL_RCC_OscConfig+0x240>)
 80028a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028a4:	6013      	str	r3, [r2, #0]
 80028a6:	e01d      	b.n	80028e4 <HAL_RCC_OscConfig+0xb0>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028b0:	d10c      	bne.n	80028cc <HAL_RCC_OscConfig+0x98>
 80028b2:	4b70      	ldr	r3, [pc, #448]	; (8002a74 <HAL_RCC_OscConfig+0x240>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a6f      	ldr	r2, [pc, #444]	; (8002a74 <HAL_RCC_OscConfig+0x240>)
 80028b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028bc:	6013      	str	r3, [r2, #0]
 80028be:	4b6d      	ldr	r3, [pc, #436]	; (8002a74 <HAL_RCC_OscConfig+0x240>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a6c      	ldr	r2, [pc, #432]	; (8002a74 <HAL_RCC_OscConfig+0x240>)
 80028c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028c8:	6013      	str	r3, [r2, #0]
 80028ca:	e00b      	b.n	80028e4 <HAL_RCC_OscConfig+0xb0>
 80028cc:	4b69      	ldr	r3, [pc, #420]	; (8002a74 <HAL_RCC_OscConfig+0x240>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a68      	ldr	r2, [pc, #416]	; (8002a74 <HAL_RCC_OscConfig+0x240>)
 80028d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028d6:	6013      	str	r3, [r2, #0]
 80028d8:	4b66      	ldr	r3, [pc, #408]	; (8002a74 <HAL_RCC_OscConfig+0x240>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a65      	ldr	r2, [pc, #404]	; (8002a74 <HAL_RCC_OscConfig+0x240>)
 80028de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028e2:	6013      	str	r3, [r2, #0]

			/* Check the HSE State */
			if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF) {
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d013      	beq.n	8002914 <HAL_RCC_OscConfig+0xe0>
				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 80028ec:	f7ff f974 	bl	8001bd8 <HAL_GetTick>
 80028f0:	6138      	str	r0, [r7, #16]

				/* Wait till HSE is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 80028f2:	e008      	b.n	8002906 <HAL_RCC_OscConfig+0xd2>
					if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE) {
 80028f4:	f7ff f970 	bl	8001bd8 <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	2b64      	cmp	r3, #100	; 0x64
 8002900:	d901      	bls.n	8002906 <HAL_RCC_OscConfig+0xd2>
						return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e213      	b.n	8002d2e <HAL_RCC_OscConfig+0x4fa>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 8002906:	4b5b      	ldr	r3, [pc, #364]	; (8002a74 <HAL_RCC_OscConfig+0x240>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d0f0      	beq.n	80028f4 <HAL_RCC_OscConfig+0xc0>
 8002912:	e014      	b.n	800293e <HAL_RCC_OscConfig+0x10a>
					}
				}
			} else {
				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 8002914:	f7ff f960 	bl	8001bd8 <HAL_GetTick>
 8002918:	6138      	str	r0, [r7, #16]

				/* Wait till HSE is bypassed or disabled */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) {
 800291a:	e008      	b.n	800292e <HAL_RCC_OscConfig+0xfa>
					if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE) {
 800291c:	f7ff f95c 	bl	8001bd8 <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	2b64      	cmp	r3, #100	; 0x64
 8002928:	d901      	bls.n	800292e <HAL_RCC_OscConfig+0xfa>
						return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e1ff      	b.n	8002d2e <HAL_RCC_OscConfig+0x4fa>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) {
 800292e:	4b51      	ldr	r3, [pc, #324]	; (8002a74 <HAL_RCC_OscConfig+0x240>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d1f0      	bne.n	800291c <HAL_RCC_OscConfig+0xe8>
 800293a:	e000      	b.n	800293e <HAL_RCC_OscConfig+0x10a>
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800293c:	bf00      	nop
				}
			}
		}
	}
	/*----------------------------- HSI Configuration --------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0302 	and.w	r3, r3, #2
 8002946:	2b00      	cmp	r3, #0
 8002948:	d063      	beq.n	8002a12 <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
		if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800294a:	4b4a      	ldr	r3, [pc, #296]	; (8002a74 <HAL_RCC_OscConfig+0x240>)
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	f003 030c 	and.w	r3, r3, #12
 8002952:	2b00      	cmp	r3, #0
 8002954:	d00b      	beq.n	800296e <HAL_RCC_OscConfig+0x13a>
				|| ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002956:	4b47      	ldr	r3, [pc, #284]	; (8002a74 <HAL_RCC_OscConfig+0x240>)
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	f003 030c 	and.w	r3, r3, #12
 800295e:	2b08      	cmp	r3, #8
 8002960:	d11c      	bne.n	800299c <HAL_RCC_OscConfig+0x168>
						&& ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC)
 8002962:	4b44      	ldr	r3, [pc, #272]	; (8002a74 <HAL_RCC_OscConfig+0x240>)
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d116      	bne.n	800299c <HAL_RCC_OscConfig+0x168>
								== RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
				{
			/* When HSI is used as system clock it will not disabled */
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800296e:	4b41      	ldr	r3, [pc, #260]	; (8002a74 <HAL_RCC_OscConfig+0x240>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0302 	and.w	r3, r3, #2
 8002976:	2b00      	cmp	r3, #0
 8002978:	d005      	beq.n	8002986 <HAL_RCC_OscConfig+0x152>
					&& (RCC_OscInitStruct->HSIState != RCC_HSI_ON)) {
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	2b01      	cmp	r3, #1
 8002980:	d001      	beq.n	8002986 <HAL_RCC_OscConfig+0x152>
				return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e1d3      	b.n	8002d2e <HAL_RCC_OscConfig+0x4fa>
			}
			/* Otherwise, just the calibration is allowed */
			else {
				/* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
				__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(
 8002986:	4b3b      	ldr	r3, [pc, #236]	; (8002a74 <HAL_RCC_OscConfig+0x240>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	691b      	ldr	r3, [r3, #16]
 8002992:	00db      	lsls	r3, r3, #3
 8002994:	4937      	ldr	r1, [pc, #220]	; (8002a74 <HAL_RCC_OscConfig+0x240>)
 8002996:	4313      	orrs	r3, r2
 8002998:	600b      	str	r3, [r1, #0]
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800299a:	e03a      	b.n	8002a12 <HAL_RCC_OscConfig+0x1de>
						RCC_OscInitStruct->HSICalibrationValue);
			}
		} else {
			/* Check the HSI State */
			if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF) {
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d020      	beq.n	80029e6 <HAL_RCC_OscConfig+0x1b2>
				/* Enable the Internal High Speed oscillator (HSI). */
				__HAL_RCC_HSI_ENABLE();
 80029a4:	4b34      	ldr	r3, [pc, #208]	; (8002a78 <HAL_RCC_OscConfig+0x244>)
 80029a6:	2201      	movs	r2, #1
 80029a8:	601a      	str	r2, [r3, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 80029aa:	f7ff f915 	bl	8001bd8 <HAL_GetTick>
 80029ae:	6138      	str	r0, [r7, #16]

				/* Wait till HSI is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 80029b0:	e008      	b.n	80029c4 <HAL_RCC_OscConfig+0x190>
					if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE) {
 80029b2:	f7ff f911 	bl	8001bd8 <HAL_GetTick>
 80029b6:	4602      	mov	r2, r0
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d901      	bls.n	80029c4 <HAL_RCC_OscConfig+0x190>
						return HAL_TIMEOUT;
 80029c0:	2303      	movs	r3, #3
 80029c2:	e1b4      	b.n	8002d2e <HAL_RCC_OscConfig+0x4fa>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 80029c4:	4b2b      	ldr	r3, [pc, #172]	; (8002a74 <HAL_RCC_OscConfig+0x240>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0302 	and.w	r3, r3, #2
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d0f0      	beq.n	80029b2 <HAL_RCC_OscConfig+0x17e>
					}
				}

				/* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
				__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(
 80029d0:	4b28      	ldr	r3, [pc, #160]	; (8002a74 <HAL_RCC_OscConfig+0x240>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	691b      	ldr	r3, [r3, #16]
 80029dc:	00db      	lsls	r3, r3, #3
 80029de:	4925      	ldr	r1, [pc, #148]	; (8002a74 <HAL_RCC_OscConfig+0x240>)
 80029e0:	4313      	orrs	r3, r2
 80029e2:	600b      	str	r3, [r1, #0]
 80029e4:	e015      	b.n	8002a12 <HAL_RCC_OscConfig+0x1de>
						RCC_OscInitStruct->HSICalibrationValue);
			} else {
				/* Disable the Internal High Speed oscillator (HSI). */
				__HAL_RCC_HSI_DISABLE();
 80029e6:	4b24      	ldr	r3, [pc, #144]	; (8002a78 <HAL_RCC_OscConfig+0x244>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	601a      	str	r2, [r3, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 80029ec:	f7ff f8f4 	bl	8001bd8 <HAL_GetTick>
 80029f0:	6138      	str	r0, [r7, #16]

				/* Wait till HSI is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) {
 80029f2:	e008      	b.n	8002a06 <HAL_RCC_OscConfig+0x1d2>
					if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE) {
 80029f4:	f7ff f8f0 	bl	8001bd8 <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d901      	bls.n	8002a06 <HAL_RCC_OscConfig+0x1d2>
						return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e193      	b.n	8002d2e <HAL_RCC_OscConfig+0x4fa>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) {
 8002a06:	4b1b      	ldr	r3, [pc, #108]	; (8002a74 <HAL_RCC_OscConfig+0x240>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0302 	and.w	r3, r3, #2
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d1f0      	bne.n	80029f4 <HAL_RCC_OscConfig+0x1c0>
				}
			}
		}
	}
	/*------------------------------ LSI Configuration -------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0308 	and.w	r3, r3, #8
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d036      	beq.n	8002a8c <HAL_RCC_OscConfig+0x258>
			== RCC_OSCILLATORTYPE_LSI) {
		/* Check the parameters */
		assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

		/* Check the LSI State */
		if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF) {
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	695b      	ldr	r3, [r3, #20]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d016      	beq.n	8002a54 <HAL_RCC_OscConfig+0x220>
			/* Enable the Internal Low Speed oscillator (LSI). */
			__HAL_RCC_LSI_ENABLE();
 8002a26:	4b15      	ldr	r3, [pc, #84]	; (8002a7c <HAL_RCC_OscConfig+0x248>)
 8002a28:	2201      	movs	r2, #1
 8002a2a:	601a      	str	r2, [r3, #0]

			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 8002a2c:	f7ff f8d4 	bl	8001bd8 <HAL_GetTick>
 8002a30:	6138      	str	r0, [r7, #16]

			/* Wait till LSI is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET) {
 8002a32:	e008      	b.n	8002a46 <HAL_RCC_OscConfig+0x212>
				if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE) {
 8002a34:	f7ff f8d0 	bl	8001bd8 <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_OscConfig+0x212>
					return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e173      	b.n	8002d2e <HAL_RCC_OscConfig+0x4fa>
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET) {
 8002a46:	4b0b      	ldr	r3, [pc, #44]	; (8002a74 <HAL_RCC_OscConfig+0x240>)
 8002a48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a4a:	f003 0302 	and.w	r3, r3, #2
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d0f0      	beq.n	8002a34 <HAL_RCC_OscConfig+0x200>
 8002a52:	e01b      	b.n	8002a8c <HAL_RCC_OscConfig+0x258>
				}
			}
		} else {
			/* Disable the Internal Low Speed oscillator (LSI). */
			__HAL_RCC_LSI_DISABLE();
 8002a54:	4b09      	ldr	r3, [pc, #36]	; (8002a7c <HAL_RCC_OscConfig+0x248>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	601a      	str	r2, [r3, #0]

			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 8002a5a:	f7ff f8bd 	bl	8001bd8 <HAL_GetTick>
 8002a5e:	6138      	str	r0, [r7, #16]

			/* Wait till LSI is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET) {
 8002a60:	e00e      	b.n	8002a80 <HAL_RCC_OscConfig+0x24c>
				if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE) {
 8002a62:	f7ff f8b9 	bl	8001bd8 <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d907      	bls.n	8002a80 <HAL_RCC_OscConfig+0x24c>
					return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e15c      	b.n	8002d2e <HAL_RCC_OscConfig+0x4fa>
 8002a74:	40023800 	.word	0x40023800
 8002a78:	42470000 	.word	0x42470000
 8002a7c:	42470e80 	.word	0x42470e80
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET) {
 8002a80:	4b8a      	ldr	r3, [pc, #552]	; (8002cac <HAL_RCC_OscConfig+0x478>)
 8002a82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a84:	f003 0302 	and.w	r3, r3, #2
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d1ea      	bne.n	8002a62 <HAL_RCC_OscConfig+0x22e>
				}
			}
		}
	}
	/*------------------------------ LSE Configuration -------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0304 	and.w	r3, r3, #4
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	f000 8097 	beq.w	8002bc8 <HAL_RCC_OscConfig+0x394>
			== RCC_OSCILLATORTYPE_LSE) {
		FlagStatus pwrclkchanged = RESET;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	75fb      	strb	r3, [r7, #23]
		/* Check the parameters */
		assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

		/* Update LSE configuration in Backup Domain control register    */
		/* Requires to enable write access to Backup Domain of necessary */
		if (__HAL_RCC_PWR_IS_CLK_DISABLED()) {
 8002a9e:	4b83      	ldr	r3, [pc, #524]	; (8002cac <HAL_RCC_OscConfig+0x478>)
 8002aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d10f      	bne.n	8002aca <HAL_RCC_OscConfig+0x296>
			__HAL_RCC_PWR_CLK_ENABLE();
 8002aaa:	2300      	movs	r3, #0
 8002aac:	60bb      	str	r3, [r7, #8]
 8002aae:	4b7f      	ldr	r3, [pc, #508]	; (8002cac <HAL_RCC_OscConfig+0x478>)
 8002ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab2:	4a7e      	ldr	r2, [pc, #504]	; (8002cac <HAL_RCC_OscConfig+0x478>)
 8002ab4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ab8:	6413      	str	r3, [r2, #64]	; 0x40
 8002aba:	4b7c      	ldr	r3, [pc, #496]	; (8002cac <HAL_RCC_OscConfig+0x478>)
 8002abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ac2:	60bb      	str	r3, [r7, #8]
 8002ac4:	68bb      	ldr	r3, [r7, #8]
			pwrclkchanged = SET;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	75fb      	strb	r3, [r7, #23]
		}

		if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP)) {
 8002aca:	4b79      	ldr	r3, [pc, #484]	; (8002cb0 <HAL_RCC_OscConfig+0x47c>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d118      	bne.n	8002b08 <HAL_RCC_OscConfig+0x2d4>
			/* Enable write access to Backup domain */
			SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ad6:	4b76      	ldr	r3, [pc, #472]	; (8002cb0 <HAL_RCC_OscConfig+0x47c>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a75      	ldr	r2, [pc, #468]	; (8002cb0 <HAL_RCC_OscConfig+0x47c>)
 8002adc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ae0:	6013      	str	r3, [r2, #0]

			/* Wait for Backup domain Write protection disable */
			tickstart = HAL_GetTick();
 8002ae2:	f7ff f879 	bl	8001bd8 <HAL_GetTick>
 8002ae6:	6138      	str	r0, [r7, #16]

			while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP)) {
 8002ae8:	e008      	b.n	8002afc <HAL_RCC_OscConfig+0x2c8>
				if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE) {
 8002aea:	f7ff f875 	bl	8001bd8 <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d901      	bls.n	8002afc <HAL_RCC_OscConfig+0x2c8>
					return HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	e118      	b.n	8002d2e <HAL_RCC_OscConfig+0x4fa>
			while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP)) {
 8002afc:	4b6c      	ldr	r3, [pc, #432]	; (8002cb0 <HAL_RCC_OscConfig+0x47c>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d0f0      	beq.n	8002aea <HAL_RCC_OscConfig+0x2b6>
				}
			}
		}

		/* Set the new LSE configuration -----------------------------------------*/
		__HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d106      	bne.n	8002b1e <HAL_RCC_OscConfig+0x2ea>
 8002b10:	4b66      	ldr	r3, [pc, #408]	; (8002cac <HAL_RCC_OscConfig+0x478>)
 8002b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b14:	4a65      	ldr	r2, [pc, #404]	; (8002cac <HAL_RCC_OscConfig+0x478>)
 8002b16:	f043 0301 	orr.w	r3, r3, #1
 8002b1a:	6713      	str	r3, [r2, #112]	; 0x70
 8002b1c:	e01c      	b.n	8002b58 <HAL_RCC_OscConfig+0x324>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	2b05      	cmp	r3, #5
 8002b24:	d10c      	bne.n	8002b40 <HAL_RCC_OscConfig+0x30c>
 8002b26:	4b61      	ldr	r3, [pc, #388]	; (8002cac <HAL_RCC_OscConfig+0x478>)
 8002b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b2a:	4a60      	ldr	r2, [pc, #384]	; (8002cac <HAL_RCC_OscConfig+0x478>)
 8002b2c:	f043 0304 	orr.w	r3, r3, #4
 8002b30:	6713      	str	r3, [r2, #112]	; 0x70
 8002b32:	4b5e      	ldr	r3, [pc, #376]	; (8002cac <HAL_RCC_OscConfig+0x478>)
 8002b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b36:	4a5d      	ldr	r2, [pc, #372]	; (8002cac <HAL_RCC_OscConfig+0x478>)
 8002b38:	f043 0301 	orr.w	r3, r3, #1
 8002b3c:	6713      	str	r3, [r2, #112]	; 0x70
 8002b3e:	e00b      	b.n	8002b58 <HAL_RCC_OscConfig+0x324>
 8002b40:	4b5a      	ldr	r3, [pc, #360]	; (8002cac <HAL_RCC_OscConfig+0x478>)
 8002b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b44:	4a59      	ldr	r2, [pc, #356]	; (8002cac <HAL_RCC_OscConfig+0x478>)
 8002b46:	f023 0301 	bic.w	r3, r3, #1
 8002b4a:	6713      	str	r3, [r2, #112]	; 0x70
 8002b4c:	4b57      	ldr	r3, [pc, #348]	; (8002cac <HAL_RCC_OscConfig+0x478>)
 8002b4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b50:	4a56      	ldr	r2, [pc, #344]	; (8002cac <HAL_RCC_OscConfig+0x478>)
 8002b52:	f023 0304 	bic.w	r3, r3, #4
 8002b56:	6713      	str	r3, [r2, #112]	; 0x70
		/* Check the LSE State */
		if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF) {
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d015      	beq.n	8002b8c <HAL_RCC_OscConfig+0x358>
			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 8002b60:	f7ff f83a 	bl	8001bd8 <HAL_GetTick>
 8002b64:	6138      	str	r0, [r7, #16]

			/* Wait till LSE is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET) {
 8002b66:	e00a      	b.n	8002b7e <HAL_RCC_OscConfig+0x34a>
				if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 8002b68:	f7ff f836 	bl	8001bd8 <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_OscConfig+0x34a>
					return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e0d7      	b.n	8002d2e <HAL_RCC_OscConfig+0x4fa>
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET) {
 8002b7e:	4b4b      	ldr	r3, [pc, #300]	; (8002cac <HAL_RCC_OscConfig+0x478>)
 8002b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b82:	f003 0302 	and.w	r3, r3, #2
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d0ee      	beq.n	8002b68 <HAL_RCC_OscConfig+0x334>
 8002b8a:	e014      	b.n	8002bb6 <HAL_RCC_OscConfig+0x382>
				}
			}
		} else {
			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 8002b8c:	f7ff f824 	bl	8001bd8 <HAL_GetTick>
 8002b90:	6138      	str	r0, [r7, #16]

			/* Wait till LSE is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET) {
 8002b92:	e00a      	b.n	8002baa <HAL_RCC_OscConfig+0x376>
				if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 8002b94:	f7ff f820 	bl	8001bd8 <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d901      	bls.n	8002baa <HAL_RCC_OscConfig+0x376>
					return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e0c1      	b.n	8002d2e <HAL_RCC_OscConfig+0x4fa>
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET) {
 8002baa:	4b40      	ldr	r3, [pc, #256]	; (8002cac <HAL_RCC_OscConfig+0x478>)
 8002bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bae:	f003 0302 	and.w	r3, r3, #2
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d1ee      	bne.n	8002b94 <HAL_RCC_OscConfig+0x360>
				}
			}
		}

		/* Restore clock configuration if changed */
		if (pwrclkchanged == SET) {
 8002bb6:	7dfb      	ldrb	r3, [r7, #23]
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d105      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x394>
			__HAL_RCC_PWR_CLK_DISABLE();
 8002bbc:	4b3b      	ldr	r3, [pc, #236]	; (8002cac <HAL_RCC_OscConfig+0x478>)
 8002bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc0:	4a3a      	ldr	r2, [pc, #232]	; (8002cac <HAL_RCC_OscConfig+0x478>)
 8002bc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bc6:	6413      	str	r3, [r2, #64]	; 0x40
		}
	}
	/*-------------------------------- PLL Configuration -----------------------*/
	/* Check the parameters */
	assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
	if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE) {
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	699b      	ldr	r3, [r3, #24]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	f000 80ad 	beq.w	8002d2c <HAL_RCC_OscConfig+0x4f8>
		/* Check if the PLL is used as system clock or not */
		if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL) {
 8002bd2:	4b36      	ldr	r3, [pc, #216]	; (8002cac <HAL_RCC_OscConfig+0x478>)
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	f003 030c 	and.w	r3, r3, #12
 8002bda:	2b08      	cmp	r3, #8
 8002bdc:	d060      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x46c>
			if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON) {
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	699b      	ldr	r3, [r3, #24]
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d145      	bne.n	8002c72 <HAL_RCC_OscConfig+0x43e>
				assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
				assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
				assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

				/* Disable the main PLL. */
				__HAL_RCC_PLL_DISABLE();
 8002be6:	4b33      	ldr	r3, [pc, #204]	; (8002cb4 <HAL_RCC_OscConfig+0x480>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	601a      	str	r2, [r3, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 8002bec:	f7fe fff4 	bl	8001bd8 <HAL_GetTick>
 8002bf0:	6138      	str	r0, [r7, #16]

				/* Wait till PLL is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 8002bf2:	e008      	b.n	8002c06 <HAL_RCC_OscConfig+0x3d2>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 8002bf4:	f7fe fff0 	bl	8001bd8 <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d901      	bls.n	8002c06 <HAL_RCC_OscConfig+0x3d2>
						return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e093      	b.n	8002d2e <HAL_RCC_OscConfig+0x4fa>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 8002c06:	4b29      	ldr	r3, [pc, #164]	; (8002cac <HAL_RCC_OscConfig+0x478>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d1f0      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x3c0>
					}
				}

				/* Configure the main PLL clock source, multiplication and division factors. */
				WRITE_REG(RCC->PLLCFGR,
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	69da      	ldr	r2, [r3, #28]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6a1b      	ldr	r3, [r3, #32]
 8002c1a:	431a      	orrs	r2, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c20:	019b      	lsls	r3, r3, #6
 8002c22:	431a      	orrs	r2, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c28:	085b      	lsrs	r3, r3, #1
 8002c2a:	3b01      	subs	r3, #1
 8002c2c:	041b      	lsls	r3, r3, #16
 8002c2e:	431a      	orrs	r2, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c34:	061b      	lsls	r3, r3, #24
 8002c36:	431a      	orrs	r2, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3c:	071b      	lsls	r3, r3, #28
 8002c3e:	491b      	ldr	r1, [pc, #108]	; (8002cac <HAL_RCC_OscConfig+0x478>)
 8002c40:	4313      	orrs	r3, r2
 8002c42:	604b      	str	r3, [r1, #4]
						(RCC_OscInitStruct->PLL.PLLSource | RCC_OscInitStruct->PLL.PLLM | (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos) | (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos) | (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
				/* Enable the main PLL. */
				__HAL_RCC_PLL_ENABLE();
 8002c44:	4b1b      	ldr	r3, [pc, #108]	; (8002cb4 <HAL_RCC_OscConfig+0x480>)
 8002c46:	2201      	movs	r2, #1
 8002c48:	601a      	str	r2, [r3, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 8002c4a:	f7fe ffc5 	bl	8001bd8 <HAL_GetTick>
 8002c4e:	6138      	str	r0, [r7, #16]

				/* Wait till PLL is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 8002c50:	e008      	b.n	8002c64 <HAL_RCC_OscConfig+0x430>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 8002c52:	f7fe ffc1 	bl	8001bd8 <HAL_GetTick>
 8002c56:	4602      	mov	r2, r0
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d901      	bls.n	8002c64 <HAL_RCC_OscConfig+0x430>
						return HAL_TIMEOUT;
 8002c60:	2303      	movs	r3, #3
 8002c62:	e064      	b.n	8002d2e <HAL_RCC_OscConfig+0x4fa>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 8002c64:	4b11      	ldr	r3, [pc, #68]	; (8002cac <HAL_RCC_OscConfig+0x478>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d0f0      	beq.n	8002c52 <HAL_RCC_OscConfig+0x41e>
 8002c70:	e05c      	b.n	8002d2c <HAL_RCC_OscConfig+0x4f8>
					}
				}
			} else {
				/* Disable the main PLL. */
				__HAL_RCC_PLL_DISABLE();
 8002c72:	4b10      	ldr	r3, [pc, #64]	; (8002cb4 <HAL_RCC_OscConfig+0x480>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	601a      	str	r2, [r3, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 8002c78:	f7fe ffae 	bl	8001bd8 <HAL_GetTick>
 8002c7c:	6138      	str	r0, [r7, #16]

				/* Wait till PLL is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 8002c7e:	e008      	b.n	8002c92 <HAL_RCC_OscConfig+0x45e>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 8002c80:	f7fe ffaa 	bl	8001bd8 <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d901      	bls.n	8002c92 <HAL_RCC_OscConfig+0x45e>
						return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e04d      	b.n	8002d2e <HAL_RCC_OscConfig+0x4fa>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 8002c92:	4b06      	ldr	r3, [pc, #24]	; (8002cac <HAL_RCC_OscConfig+0x478>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d1f0      	bne.n	8002c80 <HAL_RCC_OscConfig+0x44c>
 8002c9e:	e045      	b.n	8002d2c <HAL_RCC_OscConfig+0x4f8>
					}
				}
			}
		} else {
			/* Check if there is a request to disable the PLL used as System clock source */
			if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) {
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	699b      	ldr	r3, [r3, #24]
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d107      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x484>
				return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e040      	b.n	8002d2e <HAL_RCC_OscConfig+0x4fa>
 8002cac:	40023800 	.word	0x40023800
 8002cb0:	40007000 	.word	0x40007000
 8002cb4:	42470060 	.word	0x42470060
			} else {
				/* Do not return HAL_ERROR if request repeats the current configuration */
				pll_config = RCC->PLLCFGR;
 8002cb8:	4b1f      	ldr	r3, [pc, #124]	; (8002d38 <HAL_RCC_OscConfig+0x504>)
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
				if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	699b      	ldr	r3, [r3, #24]
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d030      	beq.n	8002d28 <HAL_RCC_OscConfig+0x4f4>
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
								!= RCC_OscInitStruct->PLL.PLLSource)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	69db      	ldr	r3, [r3, #28]
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d129      	bne.n	8002d28 <HAL_RCC_OscConfig+0x4f4>
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
								!= (RCC_OscInitStruct->PLL.PLLM)
										<< RCC_PLLCFGR_PLLM_Pos)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6a1b      	ldr	r3, [r3, #32]
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d122      	bne.n	8002d28 <HAL_RCC_OscConfig+0x4f4>
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)
 8002ce2:	68fa      	ldr	r2, [r7, #12]
 8002ce4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ce8:	4013      	ands	r3, r2
								!= (RCC_OscInitStruct->PLL.PLLN)
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	6a52      	ldr	r2, [r2, #36]	; 0x24
										<< RCC_PLLCFGR_PLLN_Pos)
 8002cee:	0192      	lsls	r2, r2, #6
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d119      	bne.n	8002d28 <HAL_RCC_OscConfig+0x4f4>
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
								!= (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cfe:	085b      	lsrs	r3, r3, #1
 8002d00:	3b01      	subs	r3, #1
										<< RCC_PLLCFGR_PLLP_Pos)
 8002d02:	041b      	lsls	r3, r3, #16
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d10f      	bne.n	8002d28 <HAL_RCC_OscConfig+0x4f4>
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
								!= (RCC_OscInitStruct->PLL.PLLQ
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
										<< RCC_PLLCFGR_PLLQ_Pos))
 8002d12:	061b      	lsls	r3, r3, #24
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d107      	bne.n	8002d28 <HAL_RCC_OscConfig+0x4f4>
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
								!= (RCC_OscInitStruct->PLL.PLLR
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
										<< RCC_PLLCFGR_PLLR_Pos)))
 8002d22:	071b      	lsls	r3, r3, #28
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d001      	beq.n	8002d2c <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
						{
					return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e000      	b.n	8002d2e <HAL_RCC_OscConfig+0x4fa>
				}
			}
		}
	}
	return HAL_OK;
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3718      	adds	r7, #24
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	40023800 	.word	0x40023800

08002d3c <HAL_TIM_Base_Init>:
 *         due to DIR bit readonly in center aligned mode.
 *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
 * @param  htim TIM Base handle
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim) {
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
	/* Check the TIM handle allocation */
	if (htim == NULL) {
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d101      	bne.n	8002d4e <HAL_TIM_Base_Init+0x12>
		return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e041      	b.n	8002dd2 <HAL_TIM_Base_Init+0x96>
	assert_param(IS_TIM_INSTANCE(htim->Instance));
	assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
	assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
	assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

	if (htim->State == HAL_TIM_STATE_RESET) {
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d106      	bne.n	8002d68 <HAL_TIM_Base_Init+0x2c>
		/* Allocate lock resource and initialize it */
		htim->Lock = HAL_UNLOCKED;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
		/* Init the low level hardware : GPIO, CLOCK, NVIC */
		HAL_TIM_Base_MspInit(htim);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f7fe fd38 	bl	80017d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
	}

	/* Set the TIM state */
	htim->State = HAL_TIM_STATE_BUSY;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2202      	movs	r2, #2
 8002d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* Set the Time Base configuration */
	TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	3304      	adds	r3, #4
 8002d78:	4619      	mov	r1, r3
 8002d7a:	4610      	mov	r0, r2
 8002d7c:	f000 fafe 	bl	800337c <TIM_Base_SetConfig>

	/* Initialize the DMA burst operation state */
	htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

	/* Initialize the TIM channels state */
	TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

	/* Initialize the TIM state*/
	htim->State = HAL_TIM_STATE_READY;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	return HAL_OK;
 8002dd0:	2300      	movs	r3, #0
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3708      	adds	r7, #8
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
	...

08002ddc <HAL_TIM_Base_Start>:
/**
 * @brief  Starts the TIM Base generation.
 * @param  htim TIM Base handle
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim) {
 8002ddc:	b480      	push	{r7}
 8002dde:	b085      	sub	sp, #20
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]

	/* Check the parameters */
	assert_param(IS_TIM_INSTANCE(htim->Instance));

	/* Check the TIM state */
	if (htim->State != HAL_TIM_STATE_READY) {
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d001      	beq.n	8002df4 <HAL_TIM_Base_Start+0x18>
		return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e046      	b.n	8002e82 <HAL_TIM_Base_Start+0xa6>
	}

	/* Set the TIM state */
	htim->State = HAL_TIM_STATE_BUSY;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2202      	movs	r2, #2
 8002df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
	if (IS_TIM_SLAVE_INSTANCE(htim->Instance)) {
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a23      	ldr	r2, [pc, #140]	; (8002e90 <HAL_TIM_Base_Start+0xb4>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d022      	beq.n	8002e4c <HAL_TIM_Base_Start+0x70>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e0e:	d01d      	beq.n	8002e4c <HAL_TIM_Base_Start+0x70>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a1f      	ldr	r2, [pc, #124]	; (8002e94 <HAL_TIM_Base_Start+0xb8>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d018      	beq.n	8002e4c <HAL_TIM_Base_Start+0x70>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a1e      	ldr	r2, [pc, #120]	; (8002e98 <HAL_TIM_Base_Start+0xbc>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d013      	beq.n	8002e4c <HAL_TIM_Base_Start+0x70>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a1c      	ldr	r2, [pc, #112]	; (8002e9c <HAL_TIM_Base_Start+0xc0>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d00e      	beq.n	8002e4c <HAL_TIM_Base_Start+0x70>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a1b      	ldr	r2, [pc, #108]	; (8002ea0 <HAL_TIM_Base_Start+0xc4>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d009      	beq.n	8002e4c <HAL_TIM_Base_Start+0x70>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a19      	ldr	r2, [pc, #100]	; (8002ea4 <HAL_TIM_Base_Start+0xc8>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d004      	beq.n	8002e4c <HAL_TIM_Base_Start+0x70>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a18      	ldr	r2, [pc, #96]	; (8002ea8 <HAL_TIM_Base_Start+0xcc>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d111      	bne.n	8002e70 <HAL_TIM_Base_Start+0x94>
		tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f003 0307 	and.w	r3, r3, #7
 8002e56:	60fb      	str	r3, [r7, #12]
		if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr)) {
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2b06      	cmp	r3, #6
 8002e5c:	d010      	beq.n	8002e80 <HAL_TIM_Base_Start+0xa4>
			__HAL_TIM_ENABLE(htim);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f042 0201 	orr.w	r2, r2, #1
 8002e6c:	601a      	str	r2, [r3, #0]
		if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr)) {
 8002e6e:	e007      	b.n	8002e80 <HAL_TIM_Base_Start+0xa4>
		}
	} else {
		__HAL_TIM_ENABLE(htim);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f042 0201 	orr.w	r2, r2, #1
 8002e7e:	601a      	str	r2, [r3, #0]
	}

	/* Return function status */
	return HAL_OK;
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3714      	adds	r7, #20
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	40010000 	.word	0x40010000
 8002e94:	40000400 	.word	0x40000400
 8002e98:	40000800 	.word	0x40000800
 8002e9c:	40000c00 	.word	0x40000c00
 8002ea0:	40010400 	.word	0x40010400
 8002ea4:	40014000 	.word	0x40014000
 8002ea8:	40001800 	.word	0x40001800

08002eac <HAL_TIM_Base_Start_IT>:
/**
 * @brief  Starts the TIM Base generation in interrupt mode.
 * @param  htim TIM Base handle
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim) {
 8002eac:	b480      	push	{r7}
 8002eae:	b085      	sub	sp, #20
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]

	/* Check the parameters */
	assert_param(IS_TIM_INSTANCE(htim->Instance));

	/* Check the TIM state */
	if (htim->State != HAL_TIM_STATE_READY) {
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d001      	beq.n	8002ec4 <HAL_TIM_Base_Start_IT+0x18>
		return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e04e      	b.n	8002f62 <HAL_TIM_Base_Start_IT+0xb6>
	}

	/* Set the TIM state */
	htim->State = HAL_TIM_STATE_BUSY;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2202      	movs	r2, #2
 8002ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* Enable the TIM Update interrupt */
	__HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	68da      	ldr	r2, [r3, #12]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f042 0201 	orr.w	r2, r2, #1
 8002eda:	60da      	str	r2, [r3, #12]

	/* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
	if (IS_TIM_SLAVE_INSTANCE(htim->Instance)) {
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a23      	ldr	r2, [pc, #140]	; (8002f70 <HAL_TIM_Base_Start_IT+0xc4>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d022      	beq.n	8002f2c <HAL_TIM_Base_Start_IT+0x80>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eee:	d01d      	beq.n	8002f2c <HAL_TIM_Base_Start_IT+0x80>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a1f      	ldr	r2, [pc, #124]	; (8002f74 <HAL_TIM_Base_Start_IT+0xc8>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d018      	beq.n	8002f2c <HAL_TIM_Base_Start_IT+0x80>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a1e      	ldr	r2, [pc, #120]	; (8002f78 <HAL_TIM_Base_Start_IT+0xcc>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d013      	beq.n	8002f2c <HAL_TIM_Base_Start_IT+0x80>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a1c      	ldr	r2, [pc, #112]	; (8002f7c <HAL_TIM_Base_Start_IT+0xd0>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d00e      	beq.n	8002f2c <HAL_TIM_Base_Start_IT+0x80>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a1b      	ldr	r2, [pc, #108]	; (8002f80 <HAL_TIM_Base_Start_IT+0xd4>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d009      	beq.n	8002f2c <HAL_TIM_Base_Start_IT+0x80>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a19      	ldr	r2, [pc, #100]	; (8002f84 <HAL_TIM_Base_Start_IT+0xd8>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d004      	beq.n	8002f2c <HAL_TIM_Base_Start_IT+0x80>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a18      	ldr	r2, [pc, #96]	; (8002f88 <HAL_TIM_Base_Start_IT+0xdc>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d111      	bne.n	8002f50 <HAL_TIM_Base_Start_IT+0xa4>
		tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	f003 0307 	and.w	r3, r3, #7
 8002f36:	60fb      	str	r3, [r7, #12]
		if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr)) {
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2b06      	cmp	r3, #6
 8002f3c:	d010      	beq.n	8002f60 <HAL_TIM_Base_Start_IT+0xb4>
			__HAL_TIM_ENABLE(htim);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f042 0201 	orr.w	r2, r2, #1
 8002f4c:	601a      	str	r2, [r3, #0]
		if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr)) {
 8002f4e:	e007      	b.n	8002f60 <HAL_TIM_Base_Start_IT+0xb4>
		}
	} else {
		__HAL_TIM_ENABLE(htim);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f042 0201 	orr.w	r2, r2, #1
 8002f5e:	601a      	str	r2, [r3, #0]
	}

	/* Return function status */
	return HAL_OK;
 8002f60:	2300      	movs	r3, #0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3714      	adds	r7, #20
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop
 8002f70:	40010000 	.word	0x40010000
 8002f74:	40000400 	.word	0x40000400
 8002f78:	40000800 	.word	0x40000800
 8002f7c:	40000c00 	.word	0x40000c00
 8002f80:	40010400 	.word	0x40010400
 8002f84:	40014000 	.word	0x40014000
 8002f88:	40001800 	.word	0x40001800

08002f8c <HAL_TIM_IRQHandler>:
/**
 * @brief  This function handles TIM interrupts requests.
 * @param  htim TIM  handle
 * @retval None
 */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim) {
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
	/* Capture compare 1 event */
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET) {
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	691b      	ldr	r3, [r3, #16]
 8002f9a:	f003 0302 	and.w	r3, r3, #2
 8002f9e:	2b02      	cmp	r3, #2
 8002fa0:	d122      	bne.n	8002fe8 <HAL_TIM_IRQHandler+0x5c>
		if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET) {
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	f003 0302 	and.w	r3, r3, #2
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d11b      	bne.n	8002fe8 <HAL_TIM_IRQHandler+0x5c>
			{
				__HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f06f 0202 	mvn.w	r2, #2
 8002fb8:	611a      	str	r2, [r3, #16]
				htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	771a      	strb	r2, [r3, #28]

				/* Input capture event */
				if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U) {
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	699b      	ldr	r3, [r3, #24]
 8002fc6:	f003 0303 	and.w	r3, r3, #3
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d003      	beq.n	8002fd6 <HAL_TIM_IRQHandler+0x4a>
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
					HAL_TIM_IC_CaptureCallback(htim);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f000 f9b5 	bl	800333e <HAL_TIM_IC_CaptureCallback>
 8002fd4:	e005      	b.n	8002fe2 <HAL_TIM_IRQHandler+0x56>
				else {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
					HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f000 f9a7 	bl	800332a <HAL_TIM_OC_DelayElapsedCallback>
					HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f000 f9b8 	bl	8003352 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
				}
				htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	771a      	strb	r2, [r3, #28]
			}
		}
	}
	/* Capture compare 2 event */
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET) {
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	691b      	ldr	r3, [r3, #16]
 8002fee:	f003 0304 	and.w	r3, r3, #4
 8002ff2:	2b04      	cmp	r3, #4
 8002ff4:	d122      	bne.n	800303c <HAL_TIM_IRQHandler+0xb0>
		if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET) {
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	f003 0304 	and.w	r3, r3, #4
 8003000:	2b04      	cmp	r3, #4
 8003002:	d11b      	bne.n	800303c <HAL_TIM_IRQHandler+0xb0>
			__HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f06f 0204 	mvn.w	r2, #4
 800300c:	611a      	str	r2, [r3, #16]
			htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2202      	movs	r2, #2
 8003012:	771a      	strb	r2, [r3, #28]
			/* Input capture event */
			if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U) {
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	699b      	ldr	r3, [r3, #24]
 800301a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800301e:	2b00      	cmp	r3, #0
 8003020:	d003      	beq.n	800302a <HAL_TIM_IRQHandler+0x9e>
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
				HAL_TIM_IC_CaptureCallback(htim);
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f000 f98b 	bl	800333e <HAL_TIM_IC_CaptureCallback>
 8003028:	e005      	b.n	8003036 <HAL_TIM_IRQHandler+0xaa>
			else {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
				HAL_TIM_OC_DelayElapsedCallback(htim);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f000 f97d 	bl	800332a <HAL_TIM_OC_DelayElapsedCallback>
				HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f000 f98e 	bl	8003352 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
			}
			htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	771a      	strb	r2, [r3, #28]
		}
	}
	/* Capture compare 3 event */
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET) {
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	f003 0308 	and.w	r3, r3, #8
 8003046:	2b08      	cmp	r3, #8
 8003048:	d122      	bne.n	8003090 <HAL_TIM_IRQHandler+0x104>
		if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET) {
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	f003 0308 	and.w	r3, r3, #8
 8003054:	2b08      	cmp	r3, #8
 8003056:	d11b      	bne.n	8003090 <HAL_TIM_IRQHandler+0x104>
			__HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f06f 0208 	mvn.w	r2, #8
 8003060:	611a      	str	r2, [r3, #16]
			htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2204      	movs	r2, #4
 8003066:	771a      	strb	r2, [r3, #28]
			/* Input capture event */
			if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U) {
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	69db      	ldr	r3, [r3, #28]
 800306e:	f003 0303 	and.w	r3, r3, #3
 8003072:	2b00      	cmp	r3, #0
 8003074:	d003      	beq.n	800307e <HAL_TIM_IRQHandler+0xf2>
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
				HAL_TIM_IC_CaptureCallback(htim);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f000 f961 	bl	800333e <HAL_TIM_IC_CaptureCallback>
 800307c:	e005      	b.n	800308a <HAL_TIM_IRQHandler+0xfe>
			else {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
				HAL_TIM_OC_DelayElapsedCallback(htim);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f000 f953 	bl	800332a <HAL_TIM_OC_DelayElapsedCallback>
				HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f000 f964 	bl	8003352 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
			}
			htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	771a      	strb	r2, [r3, #28]
		}
	}
	/* Capture compare 4 event */
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET) {
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	f003 0310 	and.w	r3, r3, #16
 800309a:	2b10      	cmp	r3, #16
 800309c:	d122      	bne.n	80030e4 <HAL_TIM_IRQHandler+0x158>
		if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET) {
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	f003 0310 	and.w	r3, r3, #16
 80030a8:	2b10      	cmp	r3, #16
 80030aa:	d11b      	bne.n	80030e4 <HAL_TIM_IRQHandler+0x158>
			__HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f06f 0210 	mvn.w	r2, #16
 80030b4:	611a      	str	r2, [r3, #16]
			htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2208      	movs	r2, #8
 80030ba:	771a      	strb	r2, [r3, #28]
			/* Input capture event */
			if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U) {
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	69db      	ldr	r3, [r3, #28]
 80030c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d003      	beq.n	80030d2 <HAL_TIM_IRQHandler+0x146>
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
				HAL_TIM_IC_CaptureCallback(htim);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f000 f937 	bl	800333e <HAL_TIM_IC_CaptureCallback>
 80030d0:	e005      	b.n	80030de <HAL_TIM_IRQHandler+0x152>
			else {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
				HAL_TIM_OC_DelayElapsedCallback(htim);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f000 f929 	bl	800332a <HAL_TIM_OC_DelayElapsedCallback>
				HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f000 f93a 	bl	8003352 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
			}
			htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	771a      	strb	r2, [r3, #28]
		}
	}
	/* TIM Update event */
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET) {
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	f003 0301 	and.w	r3, r3, #1
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d10e      	bne.n	8003110 <HAL_TIM_IRQHandler+0x184>
		if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET) {
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	f003 0301 	and.w	r3, r3, #1
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d107      	bne.n	8003110 <HAL_TIM_IRQHandler+0x184>
			__HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f06f 0201 	mvn.w	r2, #1
 8003108:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
			HAL_TIM_PeriodElapsedCallback(htim);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f7fe fad8 	bl	80016c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
		}
	}
	/* TIM Break input event */
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET) {
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	691b      	ldr	r3, [r3, #16]
 8003116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800311a:	2b80      	cmp	r3, #128	; 0x80
 800311c:	d10e      	bne.n	800313c <HAL_TIM_IRQHandler+0x1b0>
		if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET) {
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003128:	2b80      	cmp	r3, #128	; 0x80
 800312a:	d107      	bne.n	800313c <HAL_TIM_IRQHandler+0x1b0>
			__HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003134:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
			HAL_TIMEx_BreakCallback(htim);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f000 fae0 	bl	80036fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
		}
	}
	/* TIM Trigger detection event */
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET) {
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	691b      	ldr	r3, [r3, #16]
 8003142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003146:	2b40      	cmp	r3, #64	; 0x40
 8003148:	d10e      	bne.n	8003168 <HAL_TIM_IRQHandler+0x1dc>
		if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET) {
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003154:	2b40      	cmp	r3, #64	; 0x40
 8003156:	d107      	bne.n	8003168 <HAL_TIM_IRQHandler+0x1dc>
			__HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003160:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
			HAL_TIM_TriggerCallback(htim);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 f8ff 	bl	8003366 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
		}
	}
	/* TIM commutation event */
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET) {
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	691b      	ldr	r3, [r3, #16]
 800316e:	f003 0320 	and.w	r3, r3, #32
 8003172:	2b20      	cmp	r3, #32
 8003174:	d10e      	bne.n	8003194 <HAL_TIM_IRQHandler+0x208>
		if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET) {
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	f003 0320 	and.w	r3, r3, #32
 8003180:	2b20      	cmp	r3, #32
 8003182:	d107      	bne.n	8003194 <HAL_TIM_IRQHandler+0x208>
			__HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f06f 0220 	mvn.w	r2, #32
 800318c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
			HAL_TIMEx_CommutCallback(htim);
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f000 faaa 	bl	80036e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
		}
	}
}
 8003194:	bf00      	nop
 8003196:	3708      	adds	r7, #8
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}

0800319c <HAL_TIM_ConfigClockSource>:
 * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
 *         contains the clock source information for the TIM peripheral.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim,
		TIM_ClockConfigTypeDef *sClockSourceConfig) {
 800319c:	b580      	push	{r7, lr}
 800319e:	b084      	sub	sp, #16
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80031a6:	2300      	movs	r3, #0
 80031a8:	73fb      	strb	r3, [r7, #15]
	uint32_t tmpsmcr;

	/* Process Locked */
	__HAL_LOCK(htim);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d101      	bne.n	80031b8 <HAL_TIM_ConfigClockSource+0x1c>
 80031b4:	2302      	movs	r3, #2
 80031b6:	e0b4      	b.n	8003322 <HAL_TIM_ConfigClockSource+0x186>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

	htim->State = HAL_TIM_STATE_BUSY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2202      	movs	r2, #2
 80031c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* Check the parameters */
	assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

	/* Reset the SMS, TS, ECE, ETPS and ETRF bits */
	tmpsmcr = htim->Instance->SMCR;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	60bb      	str	r3, [r7, #8]
	tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80031d6:	60bb      	str	r3, [r7, #8]
	tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031de:	60bb      	str	r3, [r7, #8]
	htim->Instance->SMCR = tmpsmcr;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	68ba      	ldr	r2, [r7, #8]
 80031e6:	609a      	str	r2, [r3, #8]

	switch (sClockSourceConfig->ClockSource) {
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031f0:	d03e      	beq.n	8003270 <HAL_TIM_ConfigClockSource+0xd4>
 80031f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031f6:	f200 8087 	bhi.w	8003308 <HAL_TIM_ConfigClockSource+0x16c>
 80031fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031fe:	f000 8086 	beq.w	800330e <HAL_TIM_ConfigClockSource+0x172>
 8003202:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003206:	d87f      	bhi.n	8003308 <HAL_TIM_ConfigClockSource+0x16c>
 8003208:	2b70      	cmp	r3, #112	; 0x70
 800320a:	d01a      	beq.n	8003242 <HAL_TIM_ConfigClockSource+0xa6>
 800320c:	2b70      	cmp	r3, #112	; 0x70
 800320e:	d87b      	bhi.n	8003308 <HAL_TIM_ConfigClockSource+0x16c>
 8003210:	2b60      	cmp	r3, #96	; 0x60
 8003212:	d050      	beq.n	80032b6 <HAL_TIM_ConfigClockSource+0x11a>
 8003214:	2b60      	cmp	r3, #96	; 0x60
 8003216:	d877      	bhi.n	8003308 <HAL_TIM_ConfigClockSource+0x16c>
 8003218:	2b50      	cmp	r3, #80	; 0x50
 800321a:	d03c      	beq.n	8003296 <HAL_TIM_ConfigClockSource+0xfa>
 800321c:	2b50      	cmp	r3, #80	; 0x50
 800321e:	d873      	bhi.n	8003308 <HAL_TIM_ConfigClockSource+0x16c>
 8003220:	2b40      	cmp	r3, #64	; 0x40
 8003222:	d058      	beq.n	80032d6 <HAL_TIM_ConfigClockSource+0x13a>
 8003224:	2b40      	cmp	r3, #64	; 0x40
 8003226:	d86f      	bhi.n	8003308 <HAL_TIM_ConfigClockSource+0x16c>
 8003228:	2b30      	cmp	r3, #48	; 0x30
 800322a:	d064      	beq.n	80032f6 <HAL_TIM_ConfigClockSource+0x15a>
 800322c:	2b30      	cmp	r3, #48	; 0x30
 800322e:	d86b      	bhi.n	8003308 <HAL_TIM_ConfigClockSource+0x16c>
 8003230:	2b20      	cmp	r3, #32
 8003232:	d060      	beq.n	80032f6 <HAL_TIM_ConfigClockSource+0x15a>
 8003234:	2b20      	cmp	r3, #32
 8003236:	d867      	bhi.n	8003308 <HAL_TIM_ConfigClockSource+0x16c>
 8003238:	2b00      	cmp	r3, #0
 800323a:	d05c      	beq.n	80032f6 <HAL_TIM_ConfigClockSource+0x15a>
 800323c:	2b10      	cmp	r3, #16
 800323e:	d05a      	beq.n	80032f6 <HAL_TIM_ConfigClockSource+0x15a>
 8003240:	e062      	b.n	8003308 <HAL_TIM_ConfigClockSource+0x16c>
		assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
		assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
		assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

		/* Configure the ETR Clock source */
		TIM_ETR_SetConfig(htim->Instance, sClockSourceConfig->ClockPrescaler,
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6818      	ldr	r0, [r3, #0]
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	6899      	ldr	r1, [r3, #8]
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	685a      	ldr	r2, [r3, #4]
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	f000 f9ad 	bl	80035b0 <TIM_ETR_SetConfig>
				sClockSourceConfig->ClockPolarity,
				sClockSourceConfig->ClockFilter);

		/* Select the External clock mode1 and the ETRF trigger */
		tmpsmcr = htim->Instance->SMCR;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	60bb      	str	r3, [r7, #8]
		tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003264:	60bb      	str	r3, [r7, #8]
		/* Write to TIMx SMCR */
		htim->Instance->SMCR = tmpsmcr;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	68ba      	ldr	r2, [r7, #8]
 800326c:	609a      	str	r2, [r3, #8]
		break;
 800326e:	e04f      	b.n	8003310 <HAL_TIM_ConfigClockSource+0x174>
		assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
		assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
		assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

		/* Configure the ETR Clock source */
		TIM_ETR_SetConfig(htim->Instance, sClockSourceConfig->ClockPrescaler,
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6818      	ldr	r0, [r3, #0]
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	6899      	ldr	r1, [r3, #8]
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	685a      	ldr	r2, [r3, #4]
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	f000 f996 	bl	80035b0 <TIM_ETR_SetConfig>
				sClockSourceConfig->ClockPolarity,
				sClockSourceConfig->ClockFilter);
		/* Enable the External clock mode2 */
		htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	689a      	ldr	r2, [r3, #8]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003292:	609a      	str	r2, [r3, #8]
		break;
 8003294:	e03c      	b.n	8003310 <HAL_TIM_ConfigClockSource+0x174>

		/* Check TI1 input conditioning related parameters */
		assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
		assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

		TIM_TI1_ConfigInputStage(htim->Instance,
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6818      	ldr	r0, [r3, #0]
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	6859      	ldr	r1, [r3, #4]
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	461a      	mov	r2, r3
 80032a4:	f000 f90a 	bl	80034bc <TIM_TI1_ConfigInputStage>
				sClockSourceConfig->ClockPolarity,
				sClockSourceConfig->ClockFilter);
		TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2150      	movs	r1, #80	; 0x50
 80032ae:	4618      	mov	r0, r3
 80032b0:	f000 f963 	bl	800357a <TIM_ITRx_SetConfig>
		break;
 80032b4:	e02c      	b.n	8003310 <HAL_TIM_ConfigClockSource+0x174>

		/* Check TI2 input conditioning related parameters */
		assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
		assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

		TIM_TI2_ConfigInputStage(htim->Instance,
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6818      	ldr	r0, [r3, #0]
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	6859      	ldr	r1, [r3, #4]
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	461a      	mov	r2, r3
 80032c4:	f000 f929 	bl	800351a <TIM_TI2_ConfigInputStage>
				sClockSourceConfig->ClockPolarity,
				sClockSourceConfig->ClockFilter);
		TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2160      	movs	r1, #96	; 0x60
 80032ce:	4618      	mov	r0, r3
 80032d0:	f000 f953 	bl	800357a <TIM_ITRx_SetConfig>
		break;
 80032d4:	e01c      	b.n	8003310 <HAL_TIM_ConfigClockSource+0x174>

		/* Check TI1 input conditioning related parameters */
		assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
		assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

		TIM_TI1_ConfigInputStage(htim->Instance,
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6818      	ldr	r0, [r3, #0]
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	6859      	ldr	r1, [r3, #4]
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	461a      	mov	r2, r3
 80032e4:	f000 f8ea 	bl	80034bc <TIM_TI1_ConfigInputStage>
				sClockSourceConfig->ClockPolarity,
				sClockSourceConfig->ClockFilter);
		TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	2140      	movs	r1, #64	; 0x40
 80032ee:	4618      	mov	r0, r3
 80032f0:	f000 f943 	bl	800357a <TIM_ITRx_SetConfig>
		break;
 80032f4:	e00c      	b.n	8003310 <HAL_TIM_ConfigClockSource+0x174>
	case TIM_CLOCKSOURCE_ITR2:
	case TIM_CLOCKSOURCE_ITR3: {
		/* Check whether or not the timer instance supports internal trigger input */
		assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

		TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4619      	mov	r1, r3
 8003300:	4610      	mov	r0, r2
 8003302:	f000 f93a 	bl	800357a <TIM_ITRx_SetConfig>
		break;
 8003306:	e003      	b.n	8003310 <HAL_TIM_ConfigClockSource+0x174>
	}

	default:
		status = HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	73fb      	strb	r3, [r7, #15]
		break;
 800330c:	e000      	b.n	8003310 <HAL_TIM_ConfigClockSource+0x174>
		break;
 800330e:	bf00      	nop
	}
	htim->State = HAL_TIM_STATE_READY;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2201      	movs	r2, #1
 8003314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	__HAL_UNLOCK(htim);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

	return status;
 8003320:	7bfb      	ldrb	r3, [r7, #15]
}
 8003322:	4618      	mov	r0, r3
 8003324:	3710      	adds	r7, #16
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}

0800332a <HAL_TIM_OC_DelayElapsedCallback>:
/**
 * @brief  Output Compare callback in non-blocking mode
 * @param  htim TIM OC handle
 * @retval None
 */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 800332a:	b480      	push	{r7}
 800332c:	b083      	sub	sp, #12
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
	UNUSED(htim);

	/* NOTE : This function should not be modified, when the callback is needed,
	 the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
	 */
}
 8003332:	bf00      	nop
 8003334:	370c      	adds	r7, #12
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr

0800333e <HAL_TIM_IC_CaptureCallback>:
/**
 * @brief  Input Capture callback in non-blocking mode
 * @param  htim TIM IC handle
 * @retval None
 */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 800333e:	b480      	push	{r7}
 8003340:	b083      	sub	sp, #12
 8003342:	af00      	add	r7, sp, #0
 8003344:	6078      	str	r0, [r7, #4]
	UNUSED(htim);

	/* NOTE : This function should not be modified, when the callback is needed,
	 the HAL_TIM_IC_CaptureCallback could be implemented in the user file
	 */
}
 8003346:	bf00      	nop
 8003348:	370c      	adds	r7, #12
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr

08003352 <HAL_TIM_PWM_PulseFinishedCallback>:
/**
 * @brief  PWM Pulse finished callback in non-blocking mode
 * @param  htim TIM handle
 * @retval None
 */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8003352:	b480      	push	{r7}
 8003354:	b083      	sub	sp, #12
 8003356:	af00      	add	r7, sp, #0
 8003358:	6078      	str	r0, [r7, #4]
	UNUSED(htim);

	/* NOTE : This function should not be modified, when the callback is needed,
	 the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
	 */
}
 800335a:	bf00      	nop
 800335c:	370c      	adds	r7, #12
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr

08003366 <HAL_TIM_TriggerCallback>:
/**
 * @brief  Hall Trigger detection callback in non-blocking mode
 * @param  htim TIM handle
 * @retval None
 */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim) {
 8003366:	b480      	push	{r7}
 8003368:	b083      	sub	sp, #12
 800336a:	af00      	add	r7, sp, #0
 800336c:	6078      	str	r0, [r7, #4]
	UNUSED(htim);

	/* NOTE : This function should not be modified, when the callback is needed,
	 the HAL_TIM_TriggerCallback could be implemented in the user file
	 */
}
 800336e:	bf00      	nop
 8003370:	370c      	adds	r7, #12
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr
	...

0800337c <TIM_Base_SetConfig>:
 * @brief  Time Base configuration
 * @param  TIMx TIM peripheral
 * @param  Structure TIM Base configuration structure
 * @retval None
 */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure) {
 800337c:	b480      	push	{r7}
 800337e:	b085      	sub	sp, #20
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	6039      	str	r1, [r7, #0]
	uint32_t tmpcr1;
	tmpcr1 = TIMx->CR1;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	60fb      	str	r3, [r7, #12]

	/* Set TIM Time Base Unit parameters ---------------------------------------*/
	if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx)) {
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	4a40      	ldr	r2, [pc, #256]	; (8003490 <TIM_Base_SetConfig+0x114>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d013      	beq.n	80033bc <TIM_Base_SetConfig+0x40>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800339a:	d00f      	beq.n	80033bc <TIM_Base_SetConfig+0x40>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	4a3d      	ldr	r2, [pc, #244]	; (8003494 <TIM_Base_SetConfig+0x118>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d00b      	beq.n	80033bc <TIM_Base_SetConfig+0x40>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	4a3c      	ldr	r2, [pc, #240]	; (8003498 <TIM_Base_SetConfig+0x11c>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d007      	beq.n	80033bc <TIM_Base_SetConfig+0x40>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	4a3b      	ldr	r2, [pc, #236]	; (800349c <TIM_Base_SetConfig+0x120>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d003      	beq.n	80033bc <TIM_Base_SetConfig+0x40>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	4a3a      	ldr	r2, [pc, #232]	; (80034a0 <TIM_Base_SetConfig+0x124>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d108      	bne.n	80033ce <TIM_Base_SetConfig+0x52>
		/* Select the Counter Mode */
		tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033c2:	60fb      	str	r3, [r7, #12]
		tmpcr1 |= Structure->CounterMode;
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	68fa      	ldr	r2, [r7, #12]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	60fb      	str	r3, [r7, #12]
	}

	if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx)) {
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a2f      	ldr	r2, [pc, #188]	; (8003490 <TIM_Base_SetConfig+0x114>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d02b      	beq.n	800342e <TIM_Base_SetConfig+0xb2>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033dc:	d027      	beq.n	800342e <TIM_Base_SetConfig+0xb2>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a2c      	ldr	r2, [pc, #176]	; (8003494 <TIM_Base_SetConfig+0x118>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d023      	beq.n	800342e <TIM_Base_SetConfig+0xb2>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a2b      	ldr	r2, [pc, #172]	; (8003498 <TIM_Base_SetConfig+0x11c>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d01f      	beq.n	800342e <TIM_Base_SetConfig+0xb2>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a2a      	ldr	r2, [pc, #168]	; (800349c <TIM_Base_SetConfig+0x120>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d01b      	beq.n	800342e <TIM_Base_SetConfig+0xb2>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a29      	ldr	r2, [pc, #164]	; (80034a0 <TIM_Base_SetConfig+0x124>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d017      	beq.n	800342e <TIM_Base_SetConfig+0xb2>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a28      	ldr	r2, [pc, #160]	; (80034a4 <TIM_Base_SetConfig+0x128>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d013      	beq.n	800342e <TIM_Base_SetConfig+0xb2>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a27      	ldr	r2, [pc, #156]	; (80034a8 <TIM_Base_SetConfig+0x12c>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d00f      	beq.n	800342e <TIM_Base_SetConfig+0xb2>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4a26      	ldr	r2, [pc, #152]	; (80034ac <TIM_Base_SetConfig+0x130>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d00b      	beq.n	800342e <TIM_Base_SetConfig+0xb2>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a25      	ldr	r2, [pc, #148]	; (80034b0 <TIM_Base_SetConfig+0x134>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d007      	beq.n	800342e <TIM_Base_SetConfig+0xb2>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a24      	ldr	r2, [pc, #144]	; (80034b4 <TIM_Base_SetConfig+0x138>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d003      	beq.n	800342e <TIM_Base_SetConfig+0xb2>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a23      	ldr	r2, [pc, #140]	; (80034b8 <TIM_Base_SetConfig+0x13c>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d108      	bne.n	8003440 <TIM_Base_SetConfig+0xc4>
		/* Set the clock division */
		tmpcr1 &= ~TIM_CR1_CKD;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003434:	60fb      	str	r3, [r7, #12]
		tmpcr1 |= (uint32_t) Structure->ClockDivision;
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	68fa      	ldr	r2, [r7, #12]
 800343c:	4313      	orrs	r3, r2
 800343e:	60fb      	str	r3, [r7, #12]
	}

	/* Set the auto-reload preload */
	MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	695b      	ldr	r3, [r3, #20]
 800344a:	4313      	orrs	r3, r2
 800344c:	60fb      	str	r3, [r7, #12]

	TIMx->CR1 = tmpcr1;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	68fa      	ldr	r2, [r7, #12]
 8003452:	601a      	str	r2, [r3, #0]

	/* Set the Autoreload value */
	TIMx->ARR = (uint32_t) Structure->Period;
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	689a      	ldr	r2, [r3, #8]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	62da      	str	r2, [r3, #44]	; 0x2c

	/* Set the Prescaler value */
	TIMx->PSC = Structure->Prescaler;
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	629a      	str	r2, [r3, #40]	; 0x28

	if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx)) {
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	4a0a      	ldr	r2, [pc, #40]	; (8003490 <TIM_Base_SetConfig+0x114>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d003      	beq.n	8003474 <TIM_Base_SetConfig+0xf8>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	4a0c      	ldr	r2, [pc, #48]	; (80034a0 <TIM_Base_SetConfig+0x124>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d103      	bne.n	800347c <TIM_Base_SetConfig+0x100>
		/* Set the Repetition Counter value */
		TIMx->RCR = Structure->RepetitionCounter;
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	691a      	ldr	r2, [r3, #16]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	631a      	str	r2, [r3, #48]	; 0x30
	}

	/* Generate an update event to reload the Prescaler
	 and the repetition counter (only for advanced timer) value immediately */
	TIMx->EGR = TIM_EGR_UG;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	615a      	str	r2, [r3, #20]
}
 8003482:	bf00      	nop
 8003484:	3714      	adds	r7, #20
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr
 800348e:	bf00      	nop
 8003490:	40010000 	.word	0x40010000
 8003494:	40000400 	.word	0x40000400
 8003498:	40000800 	.word	0x40000800
 800349c:	40000c00 	.word	0x40000c00
 80034a0:	40010400 	.word	0x40010400
 80034a4:	40014000 	.word	0x40014000
 80034a8:	40014400 	.word	0x40014400
 80034ac:	40014800 	.word	0x40014800
 80034b0:	40001800 	.word	0x40001800
 80034b4:	40001c00 	.word	0x40001c00
 80034b8:	40002000 	.word	0x40002000

080034bc <TIM_TI1_ConfigInputStage>:
 * @param  TIM_ICFilter Specifies the Input Capture Filter.
 *          This parameter must be a value between 0x00 and 0x0F.
 * @retval None
 */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity,
		uint32_t TIM_ICFilter) {
 80034bc:	b480      	push	{r7}
 80034be:	b087      	sub	sp, #28
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	60f8      	str	r0, [r7, #12]
 80034c4:	60b9      	str	r1, [r7, #8]
 80034c6:	607a      	str	r2, [r7, #4]
	uint32_t tmpccmr1;
	uint32_t tmpccer;

	/* Disable the Channel 1: Reset the CC1E Bit */
	tmpccer = TIMx->CCER;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6a1b      	ldr	r3, [r3, #32]
 80034cc:	617b      	str	r3, [r7, #20]
	TIMx->CCER &= ~TIM_CCER_CC1E;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	6a1b      	ldr	r3, [r3, #32]
 80034d2:	f023 0201 	bic.w	r2, r3, #1
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	621a      	str	r2, [r3, #32]
	tmpccmr1 = TIMx->CCMR1;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	699b      	ldr	r3, [r3, #24]
 80034de:	613b      	str	r3, [r7, #16]

	/* Set the filter */
	tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034e6:	613b      	str	r3, [r7, #16]
	tmpccmr1 |= (TIM_ICFilter << 4U);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	011b      	lsls	r3, r3, #4
 80034ec:	693a      	ldr	r2, [r7, #16]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	613b      	str	r3, [r7, #16]

	/* Select the Polarity and set the CC1E Bit */
	tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	f023 030a 	bic.w	r3, r3, #10
 80034f8:	617b      	str	r3, [r7, #20]
	tmpccer |= TIM_ICPolarity;
 80034fa:	697a      	ldr	r2, [r7, #20]
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	4313      	orrs	r3, r2
 8003500:	617b      	str	r3, [r7, #20]

	/* Write to TIMx CCMR1 and CCER registers */
	TIMx->CCMR1 = tmpccmr1;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	693a      	ldr	r2, [r7, #16]
 8003506:	619a      	str	r2, [r3, #24]
	TIMx->CCER = tmpccer;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	697a      	ldr	r2, [r7, #20]
 800350c:	621a      	str	r2, [r3, #32]
}
 800350e:	bf00      	nop
 8003510:	371c      	adds	r7, #28
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr

0800351a <TIM_TI2_ConfigInputStage>:
 * @param  TIM_ICFilter Specifies the Input Capture Filter.
 *          This parameter must be a value between 0x00 and 0x0F.
 * @retval None
 */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity,
		uint32_t TIM_ICFilter) {
 800351a:	b480      	push	{r7}
 800351c:	b087      	sub	sp, #28
 800351e:	af00      	add	r7, sp, #0
 8003520:	60f8      	str	r0, [r7, #12]
 8003522:	60b9      	str	r1, [r7, #8]
 8003524:	607a      	str	r2, [r7, #4]
	uint32_t tmpccmr1;
	uint32_t tmpccer;

	/* Disable the Channel 2: Reset the CC2E Bit */
	TIMx->CCER &= ~TIM_CCER_CC2E;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	6a1b      	ldr	r3, [r3, #32]
 800352a:	f023 0210 	bic.w	r2, r3, #16
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	621a      	str	r2, [r3, #32]
	tmpccmr1 = TIMx->CCMR1;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	699b      	ldr	r3, [r3, #24]
 8003536:	617b      	str	r3, [r7, #20]
	tmpccer = TIMx->CCER;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6a1b      	ldr	r3, [r3, #32]
 800353c:	613b      	str	r3, [r7, #16]

	/* Set the filter */
	tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003544:	617b      	str	r3, [r7, #20]
	tmpccmr1 |= (TIM_ICFilter << 12U);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	031b      	lsls	r3, r3, #12
 800354a:	697a      	ldr	r2, [r7, #20]
 800354c:	4313      	orrs	r3, r2
 800354e:	617b      	str	r3, [r7, #20]

	/* Select the Polarity and set the CC2E Bit */
	tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003556:	613b      	str	r3, [r7, #16]
	tmpccer |= (TIM_ICPolarity << 4U);
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	011b      	lsls	r3, r3, #4
 800355c:	693a      	ldr	r2, [r7, #16]
 800355e:	4313      	orrs	r3, r2
 8003560:	613b      	str	r3, [r7, #16]

	/* Write to TIMx CCMR1 and CCER registers */
	TIMx->CCMR1 = tmpccmr1;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	697a      	ldr	r2, [r7, #20]
 8003566:	619a      	str	r2, [r3, #24]
	TIMx->CCER = tmpccer;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	693a      	ldr	r2, [r7, #16]
 800356c:	621a      	str	r2, [r3, #32]
}
 800356e:	bf00      	nop
 8003570:	371c      	adds	r7, #28
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr

0800357a <TIM_ITRx_SetConfig>:
 *            @arg TIM_TS_TI1FP1: Filtered Timer Input 1
 *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
 *            @arg TIM_TS_ETRF: External Trigger input
 * @retval None
 */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource) {
 800357a:	b480      	push	{r7}
 800357c:	b085      	sub	sp, #20
 800357e:	af00      	add	r7, sp, #0
 8003580:	6078      	str	r0, [r7, #4]
 8003582:	6039      	str	r1, [r7, #0]
	uint32_t tmpsmcr;

	/* Get the TIMx SMCR register value */
	tmpsmcr = TIMx->SMCR;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	60fb      	str	r3, [r7, #12]
	/* Reset the TS Bits */
	tmpsmcr &= ~TIM_SMCR_TS;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003590:	60fb      	str	r3, [r7, #12]
	/* Set the Input Trigger source and the slave mode*/
	tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003592:	683a      	ldr	r2, [r7, #0]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	4313      	orrs	r3, r2
 8003598:	f043 0307 	orr.w	r3, r3, #7
 800359c:	60fb      	str	r3, [r7, #12]
	/* Write to TIMx SMCR */
	TIMx->SMCR = tmpsmcr;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	68fa      	ldr	r2, [r7, #12]
 80035a2:	609a      	str	r2, [r3, #8]
}
 80035a4:	bf00      	nop
 80035a6:	3714      	adds	r7, #20
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr

080035b0 <TIM_ETR_SetConfig>:
 * @param  ExtTRGFilter External Trigger Filter.
 *          This parameter must be a value between 0x00 and 0x0F
 * @retval None
 */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
		uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter) {
 80035b0:	b480      	push	{r7}
 80035b2:	b087      	sub	sp, #28
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	60f8      	str	r0, [r7, #12]
 80035b8:	60b9      	str	r1, [r7, #8]
 80035ba:	607a      	str	r2, [r7, #4]
 80035bc:	603b      	str	r3, [r7, #0]
	uint32_t tmpsmcr;

	tmpsmcr = TIMx->SMCR;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	617b      	str	r3, [r7, #20]

	/* Reset the ETR Bits */
	tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035ca:	617b      	str	r3, [r7, #20]

	/* Set the Prescaler, the Filter value and the Polarity */
	tmpsmcr |= (uint32_t) (TIM_ExtTRGPrescaler
			| (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	021a      	lsls	r2, r3, #8
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	431a      	orrs	r2, r3
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	4313      	orrs	r3, r2
	tmpsmcr |= (uint32_t) (TIM_ExtTRGPrescaler
 80035d8:	697a      	ldr	r2, [r7, #20]
 80035da:	4313      	orrs	r3, r2
 80035dc:	617b      	str	r3, [r7, #20]

	/* Write to TIMx SMCR */
	TIMx->SMCR = tmpsmcr;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	697a      	ldr	r2, [r7, #20]
 80035e2:	609a      	str	r2, [r3, #8]
}
 80035e4:	bf00      	nop
 80035e6:	371c      	adds	r7, #28
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr

080035f0 <HAL_TIMEx_MasterConfigSynchronization>:
 *         contains the selected trigger output (TRGO) and the Master/Slave
 *         mode.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
		TIM_MasterConfigTypeDef *sMasterConfig) {
 80035f0:	b480      	push	{r7}
 80035f2:	b085      	sub	sp, #20
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	6039      	str	r1, [r7, #0]
	assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
	assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
	assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

	/* Check input state */
	__HAL_LOCK(htim);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003600:	2b01      	cmp	r3, #1
 8003602:	d101      	bne.n	8003608 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003604:	2302      	movs	r3, #2
 8003606:	e05a      	b.n	80036be <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

	/* Change the handler state */
	htim->State = HAL_TIM_STATE_BUSY;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2202      	movs	r2, #2
 8003614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* Get the TIMx CR2 register value */
	tmpcr2 = htim->Instance->CR2;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	60fb      	str	r3, [r7, #12]

	/* Get the TIMx SMCR register value */
	tmpsmcr = htim->Instance->SMCR;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	60bb      	str	r3, [r7, #8]

	/* Reset the MMS Bits */
	tmpcr2 &= ~TIM_CR2_MMS;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800362e:	60fb      	str	r3, [r7, #12]
	/* Select the TRGO source */
	tmpcr2 |= sMasterConfig->MasterOutputTrigger;
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	68fa      	ldr	r2, [r7, #12]
 8003636:	4313      	orrs	r3, r2
 8003638:	60fb      	str	r3, [r7, #12]

	/* Update TIMx CR2 */
	htim->Instance->CR2 = tmpcr2;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	68fa      	ldr	r2, [r7, #12]
 8003640:	605a      	str	r2, [r3, #4]

	if (IS_TIM_SLAVE_INSTANCE(htim->Instance)) {
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a21      	ldr	r2, [pc, #132]	; (80036cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d022      	beq.n	8003692 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003654:	d01d      	beq.n	8003692 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a1d      	ldr	r2, [pc, #116]	; (80036d0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d018      	beq.n	8003692 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a1b      	ldr	r2, [pc, #108]	; (80036d4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d013      	beq.n	8003692 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a1a      	ldr	r2, [pc, #104]	; (80036d8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d00e      	beq.n	8003692 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a18      	ldr	r2, [pc, #96]	; (80036dc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d009      	beq.n	8003692 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a17      	ldr	r2, [pc, #92]	; (80036e0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d004      	beq.n	8003692 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a15      	ldr	r2, [pc, #84]	; (80036e4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d10c      	bne.n	80036ac <HAL_TIMEx_MasterConfigSynchronization+0xbc>
		/* Reset the MSM Bit */
		tmpsmcr &= ~TIM_SMCR_MSM;
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003698:	60bb      	str	r3, [r7, #8]
		/* Set master mode */
		tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	68ba      	ldr	r2, [r7, #8]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	60bb      	str	r3, [r7, #8]

		/* Update TIMx SMCR */
		htim->Instance->SMCR = tmpsmcr;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	68ba      	ldr	r2, [r7, #8]
 80036aa:	609a      	str	r2, [r3, #8]
	}

	/* Change the htim state */
	htim->State = HAL_TIM_STATE_READY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	__HAL_UNLOCK(htim);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

	return HAL_OK;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3714      	adds	r7, #20
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr
 80036ca:	bf00      	nop
 80036cc:	40010000 	.word	0x40010000
 80036d0:	40000400 	.word	0x40000400
 80036d4:	40000800 	.word	0x40000800
 80036d8:	40000c00 	.word	0x40000c00
 80036dc:	40010400 	.word	0x40010400
 80036e0:	40014000 	.word	0x40014000
 80036e4:	40001800 	.word	0x40001800

080036e8 <HAL_TIMEx_CommutCallback>:
/**
 * @brief  Hall commutation changed callback in non-blocking mode
 * @param  htim TIM handle
 * @retval None
 */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim) {
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
	UNUSED(htim);

	/* NOTE : This function should not be modified, when the callback is needed,
	 the HAL_TIMEx_CommutCallback could be implemented in the user file
	 */
}
 80036f0:	bf00      	nop
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <HAL_TIMEx_BreakCallback>:
/**
 * @brief  Hall Break detection callback in non-blocking mode
 * @param  htim TIM handle
 * @retval None
 */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim) {
 80036fc:	b480      	push	{r7}
 80036fe:	b083      	sub	sp, #12
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
	UNUSED(htim);

	/* NOTE : This function should not be modified, when the callback is needed,
	 the HAL_TIMEx_BreakCallback could be implemented in the user file
	 */
}
 8003704:	bf00      	nop
 8003706:	370c      	adds	r7, #12
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr

08003710 <HAL_UART_Init>:
 *         the UART_InitTypeDef and create the associated handle.
 * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 *                the configuration information for the specified UART module.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart) {
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
	/* Check the UART handle allocation */
	if (huart == NULL) {
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d101      	bne.n	8003722 <HAL_UART_Init+0x12>
		return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e03f      	b.n	80037a2 <HAL_UART_Init+0x92>
		assert_param(IS_UART_INSTANCE(huart->Instance));
	}
	assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
	assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

	if (huart->gState == HAL_UART_STATE_RESET) {
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003728:	b2db      	uxtb	r3, r3
 800372a:	2b00      	cmp	r3, #0
 800372c:	d106      	bne.n	800373c <HAL_UART_Init+0x2c>
		/* Allocate lock resource and initialize it */
		huart->Lock = HAL_UNLOCKED;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
		/* Init the low level hardware : GPIO, CLOCK */
		HAL_UART_MspInit(huart);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f7fe f870 	bl	800181c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
	}

	huart->gState = HAL_UART_STATE_BUSY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2224      	movs	r2, #36	; 0x24
 8003740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* Disable the peripheral */
	__HAL_UART_DISABLE(huart);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	68da      	ldr	r2, [r3, #12]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003752:	60da      	str	r2, [r3, #12]

	/* Set the UART Communication parameters */
	UART_SetConfig(huart);
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f000 f929 	bl	80039ac <UART_SetConfig>

	/* In asynchronous mode, the following bits must be kept cleared:
	 - LINEN and CLKEN bits in the USART_CR2 register,
	 - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
	CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	691a      	ldr	r2, [r3, #16]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003768:	611a      	str	r2, [r3, #16]
	CLEAR_BIT(huart->Instance->CR3,
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	695a      	ldr	r2, [r3, #20]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003778:	615a      	str	r2, [r3, #20]
			(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));

	/* Enable the peripheral */
	__HAL_UART_ENABLE(huart);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	68da      	ldr	r2, [r3, #12]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003788:	60da      	str	r2, [r3, #12]

	/* Initialize the UART state */
	huart->ErrorCode = HAL_UART_ERROR_NONE;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	641a      	str	r2, [r3, #64]	; 0x40
	huart->gState = HAL_UART_STATE_READY;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2220      	movs	r2, #32
 8003794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	huart->RxState = HAL_UART_STATE_READY;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2220      	movs	r2, #32
 800379c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

	return HAL_OK;
 80037a0:	2300      	movs	r3, #0
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3708      	adds	r7, #8
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}

080037aa <HAL_UART_Transmit>:
 * @param  Size  Amount of data elements (u8 or u16) to be sent
 * @param  Timeout Timeout duration
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart,
		const uint8_t *pData, uint16_t Size, uint32_t Timeout) {
 80037aa:	b580      	push	{r7, lr}
 80037ac:	b08a      	sub	sp, #40	; 0x28
 80037ae:	af02      	add	r7, sp, #8
 80037b0:	60f8      	str	r0, [r7, #12]
 80037b2:	60b9      	str	r1, [r7, #8]
 80037b4:	603b      	str	r3, [r7, #0]
 80037b6:	4613      	mov	r3, r2
 80037b8:	80fb      	strh	r3, [r7, #6]
	const uint8_t *pdata8bits;
	const uint16_t *pdata16bits;
	uint32_t tickstart = 0U;
 80037ba:	2300      	movs	r3, #0
 80037bc:	617b      	str	r3, [r7, #20]

	/* Check that a Tx process is not already ongoing */
	if (huart->gState == HAL_UART_STATE_READY) {
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	2b20      	cmp	r3, #32
 80037c8:	d17c      	bne.n	80038c4 <HAL_UART_Transmit+0x11a>
		if ((pData == NULL) || (Size == 0U)) {
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d002      	beq.n	80037d6 <HAL_UART_Transmit+0x2c>
 80037d0:	88fb      	ldrh	r3, [r7, #6]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d101      	bne.n	80037da <HAL_UART_Transmit+0x30>
			return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e075      	b.n	80038c6 <HAL_UART_Transmit+0x11c>
		}

		/* Process Locked */
		__HAL_LOCK(huart);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d101      	bne.n	80037e8 <HAL_UART_Transmit+0x3e>
 80037e4:	2302      	movs	r3, #2
 80037e6:	e06e      	b.n	80038c6 <HAL_UART_Transmit+0x11c>
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

		huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2200      	movs	r2, #0
 80037f4:	641a      	str	r2, [r3, #64]	; 0x40
		huart->gState = HAL_UART_STATE_BUSY_TX;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2221      	movs	r2, #33	; 0x21
 80037fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

		/* Init tickstart for timeout management */
		tickstart = HAL_GetTick();
 80037fe:	f7fe f9eb 	bl	8001bd8 <HAL_GetTick>
 8003802:	6178      	str	r0, [r7, #20]

		huart->TxXferSize = Size;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	88fa      	ldrh	r2, [r7, #6]
 8003808:	849a      	strh	r2, [r3, #36]	; 0x24
		huart->TxXferCount = Size;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	88fa      	ldrh	r2, [r7, #6]
 800380e:	84da      	strh	r2, [r3, #38]	; 0x26

		/* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
		if ((huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003818:	d108      	bne.n	800382c <HAL_UART_Transmit+0x82>
				&& (huart->Init.Parity == UART_PARITY_NONE)) {
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d104      	bne.n	800382c <HAL_UART_Transmit+0x82>
			pdata8bits = NULL;
 8003822:	2300      	movs	r3, #0
 8003824:	61fb      	str	r3, [r7, #28]
			pdata16bits = (const uint16_t*) pData;
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	61bb      	str	r3, [r7, #24]
 800382a:	e003      	b.n	8003834 <HAL_UART_Transmit+0x8a>
		} else {
			pdata8bits = pData;
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	61fb      	str	r3, [r7, #28]
			pdata16bits = NULL;
 8003830:	2300      	movs	r3, #0
 8003832:	61bb      	str	r3, [r7, #24]
		}

		/* Process Unlocked */
		__HAL_UNLOCK(huart);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2200      	movs	r2, #0
 8003838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

		while (huart->TxXferCount > 0U) {
 800383c:	e02a      	b.n	8003894 <HAL_UART_Transmit+0xea>
			if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET,
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	9300      	str	r3, [sp, #0]
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	2200      	movs	r2, #0
 8003846:	2180      	movs	r1, #128	; 0x80
 8003848:	68f8      	ldr	r0, [r7, #12]
 800384a:	f000 f840 	bl	80038ce <UART_WaitOnFlagUntilTimeout>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d001      	beq.n	8003858 <HAL_UART_Transmit+0xae>
					tickstart, Timeout) != HAL_OK) {
				return HAL_TIMEOUT;
 8003854:	2303      	movs	r3, #3
 8003856:	e036      	b.n	80038c6 <HAL_UART_Transmit+0x11c>
			}
			if (pdata8bits == NULL) {
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d10b      	bne.n	8003876 <HAL_UART_Transmit+0xcc>
				huart->Instance->DR = (uint16_t) (*pdata16bits & 0x01FFU);
 800385e:	69bb      	ldr	r3, [r7, #24]
 8003860:	881b      	ldrh	r3, [r3, #0]
 8003862:	461a      	mov	r2, r3
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800386c:	605a      	str	r2, [r3, #4]
				pdata16bits++;
 800386e:	69bb      	ldr	r3, [r7, #24]
 8003870:	3302      	adds	r3, #2
 8003872:	61bb      	str	r3, [r7, #24]
 8003874:	e007      	b.n	8003886 <HAL_UART_Transmit+0xdc>
			} else {
				huart->Instance->DR = (uint8_t) (*pdata8bits & 0xFFU);
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	781a      	ldrb	r2, [r3, #0]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	605a      	str	r2, [r3, #4]
				pdata8bits++;
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	3301      	adds	r3, #1
 8003884:	61fb      	str	r3, [r7, #28]
			}
			huart->TxXferCount--;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800388a:	b29b      	uxth	r3, r3
 800388c:	3b01      	subs	r3, #1
 800388e:	b29a      	uxth	r2, r3
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	84da      	strh	r2, [r3, #38]	; 0x26
		while (huart->TxXferCount > 0U) {
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003898:	b29b      	uxth	r3, r3
 800389a:	2b00      	cmp	r3, #0
 800389c:	d1cf      	bne.n	800383e <HAL_UART_Transmit+0x94>
		}

		if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart,
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	9300      	str	r3, [sp, #0]
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	2200      	movs	r2, #0
 80038a6:	2140      	movs	r1, #64	; 0x40
 80038a8:	68f8      	ldr	r0, [r7, #12]
 80038aa:	f000 f810 	bl	80038ce <UART_WaitOnFlagUntilTimeout>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d001      	beq.n	80038b8 <HAL_UART_Transmit+0x10e>
				Timeout) != HAL_OK) {
			return HAL_TIMEOUT;
 80038b4:	2303      	movs	r3, #3
 80038b6:	e006      	b.n	80038c6 <HAL_UART_Transmit+0x11c>
		}

		/* At end of Tx process, restore huart->gState to Ready */
		huart->gState = HAL_UART_STATE_READY;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2220      	movs	r2, #32
 80038bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

		return HAL_OK;
 80038c0:	2300      	movs	r3, #0
 80038c2:	e000      	b.n	80038c6 <HAL_UART_Transmit+0x11c>
	} else {
		return HAL_BUSY;
 80038c4:	2302      	movs	r3, #2
	}
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3720      	adds	r7, #32
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}

080038ce <UART_WaitOnFlagUntilTimeout>:
 * @param  Tickstart Tick start value
 * @param  Timeout Timeout duration
 * @retval HAL status
 */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart,
		uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout) {
 80038ce:	b580      	push	{r7, lr}
 80038d0:	b090      	sub	sp, #64	; 0x40
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	60f8      	str	r0, [r7, #12]
 80038d6:	60b9      	str	r1, [r7, #8]
 80038d8:	603b      	str	r3, [r7, #0]
 80038da:	4613      	mov	r3, r2
 80038dc:	71fb      	strb	r3, [r7, #7]
	/* Wait until flag is set */
	while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) {
 80038de:	e050      	b.n	8003982 <UART_WaitOnFlagUntilTimeout+0xb4>
		/* Check for the Timeout */
		if (Timeout != HAL_MAX_DELAY) {
 80038e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038e6:	d04c      	beq.n	8003982 <UART_WaitOnFlagUntilTimeout+0xb4>
			if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout)) {
 80038e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d007      	beq.n	80038fe <UART_WaitOnFlagUntilTimeout+0x30>
 80038ee:	f7fe f973 	bl	8001bd8 <HAL_GetTick>
 80038f2:	4602      	mov	r2, r0
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d241      	bcs.n	8003982 <UART_WaitOnFlagUntilTimeout+0xb4>
				/* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
				ATOMIC_CLEAR_BIT(huart->Instance->CR1,
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	330c      	adds	r3, #12
 8003904:	62bb      	str	r3, [r7, #40]	; 0x28
 \return        value of type uint32_t at (*ptr)
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr) {
	uint32_t result;

	__ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003908:	e853 3f00 	ldrex	r3, [r3]
 800390c:	627b      	str	r3, [r7, #36]	; 0x24
	return (result);
 800390e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003910:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003914:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	330c      	adds	r3, #12
 800391c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800391e:	637a      	str	r2, [r7, #52]	; 0x34
 8003920:	633b      	str	r3, [r7, #48]	; 0x30
 \return          1  Function failed
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr) {
	uint32_t result;

	__ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003922:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003924:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003926:	e841 2300 	strex	r3, r2, [r1]
 800392a:	62fb      	str	r3, [r7, #44]	; 0x2c
	return (result);
 800392c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800392e:	2b00      	cmp	r3, #0
 8003930:	d1e5      	bne.n	80038fe <UART_WaitOnFlagUntilTimeout+0x30>
						(USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
				ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	3314      	adds	r3, #20
 8003938:	617b      	str	r3, [r7, #20]
	__ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	e853 3f00 	ldrex	r3, [r3]
 8003940:	613b      	str	r3, [r7, #16]
	return (result);
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	f023 0301 	bic.w	r3, r3, #1
 8003948:	63bb      	str	r3, [r7, #56]	; 0x38
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	3314      	adds	r3, #20
 8003950:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003952:	623a      	str	r2, [r7, #32]
 8003954:	61fb      	str	r3, [r7, #28]
	__ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003956:	69f9      	ldr	r1, [r7, #28]
 8003958:	6a3a      	ldr	r2, [r7, #32]
 800395a:	e841 2300 	strex	r3, r2, [r1]
 800395e:	61bb      	str	r3, [r7, #24]
	return (result);
 8003960:	69bb      	ldr	r3, [r7, #24]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d1e5      	bne.n	8003932 <UART_WaitOnFlagUntilTimeout+0x64>

				huart->gState = HAL_UART_STATE_READY;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2220      	movs	r2, #32
 800396a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
				huart->RxState = HAL_UART_STATE_READY;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2220      	movs	r2, #32
 8003972:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

				/* Process Unlocked */
				__HAL_UNLOCK(huart);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2200      	movs	r2, #0
 800397a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

				return HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	e00f      	b.n	80039a2 <UART_WaitOnFlagUntilTimeout+0xd4>
	while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) {
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	4013      	ands	r3, r2
 800398c:	68ba      	ldr	r2, [r7, #8]
 800398e:	429a      	cmp	r2, r3
 8003990:	bf0c      	ite	eq
 8003992:	2301      	moveq	r3, #1
 8003994:	2300      	movne	r3, #0
 8003996:	b2db      	uxtb	r3, r3
 8003998:	461a      	mov	r2, r3
 800399a:	79fb      	ldrb	r3, [r7, #7]
 800399c:	429a      	cmp	r2, r3
 800399e:	d09f      	beq.n	80038e0 <UART_WaitOnFlagUntilTimeout+0x12>
			}
		}
	}
	return HAL_OK;
 80039a0:	2300      	movs	r3, #0
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3740      	adds	r7, #64	; 0x40
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
	...

080039ac <UART_SetConfig>:
 * @brief  Configures the UART peripheral.
 * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 *                the configuration information for the specified UART module.
 * @retval None
 */
static void UART_SetConfig(UART_HandleTypeDef *huart) {
 80039ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039b0:	b0c0      	sub	sp, #256	; 0x100
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
	assert_param(IS_UART_MODE(huart->Init.Mode));

	/*-------------------------- USART CR2 Configuration -----------------------*/
	/* Configure the UART Stop Bits: Set STOP[13:12] bits
	 according to huart->Init.StopBits value */
	MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	691b      	ldr	r3, [r3, #16]
 80039c0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80039c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039c8:	68d9      	ldr	r1, [r3, #12]
 80039ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	ea40 0301 	orr.w	r3, r0, r1
 80039d4:	6113      	str	r3, [r2, #16]
	 Set the M bits according to huart->Init.WordLength value
	 Set PCE and PS bits according to huart->Init.Parity value
	 Set TE and RE bits according to huart->Init.Mode value
	 Set OVER8 bit according to huart->Init.OverSampling value */

	tmpreg = (uint32_t) huart->Init.WordLength | huart->Init.Parity
 80039d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039da:	689a      	ldr	r2, [r3, #8]
 80039dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039e0:	691b      	ldr	r3, [r3, #16]
 80039e2:	431a      	orrs	r2, r3
			| huart->Init.Mode | huart->Init.OverSampling;
 80039e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039e8:	695b      	ldr	r3, [r3, #20]
 80039ea:	431a      	orrs	r2, r3
 80039ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039f0:	69db      	ldr	r3, [r3, #28]
	tmpreg = (uint32_t) huart->Init.WordLength | huart->Init.Parity
 80039f2:	4313      	orrs	r3, r2
 80039f4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
	MODIFY_REG(huart->Instance->CR1,
 80039f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003a04:	f021 010c 	bic.w	r1, r1, #12
 8003a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003a12:	430b      	orrs	r3, r1
 8003a14:	60d3      	str	r3, [r2, #12]
			(uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
			tmpreg);

	/*-------------------------- USART CR3 Configuration -----------------------*/
	/* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
	MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE),
 8003a16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	695b      	ldr	r3, [r3, #20]
 8003a1e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003a22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a26:	6999      	ldr	r1, [r3, #24]
 8003a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	ea40 0301 	orr.w	r3, r0, r1
 8003a32:	6153      	str	r3, [r2, #20]
			huart->Init.HwFlowCtl);

#if defined(USART6) && defined(UART9) && defined(UART10)
	if ((huart->Instance == USART1) || (huart->Instance == USART6)
 8003a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	4b95      	ldr	r3, [pc, #596]	; (8003c90 <UART_SetConfig+0x2e4>)
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d011      	beq.n	8003a64 <UART_SetConfig+0xb8>
 8003a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	4b93      	ldr	r3, [pc, #588]	; (8003c94 <UART_SetConfig+0x2e8>)
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d00b      	beq.n	8003a64 <UART_SetConfig+0xb8>
			|| (huart->Instance == UART9) || (huart->Instance == UART10)) {
 8003a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	4b91      	ldr	r3, [pc, #580]	; (8003c98 <UART_SetConfig+0x2ec>)
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d005      	beq.n	8003a64 <UART_SetConfig+0xb8>
 8003a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	4b8f      	ldr	r3, [pc, #572]	; (8003c9c <UART_SetConfig+0x2f0>)
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d104      	bne.n	8003a6e <UART_SetConfig+0xc2>
		pclk = HAL_RCC_GetPCLK2Freq();
 8003a64:	f7fe fea0 	bl	80027a8 <HAL_RCC_GetPCLK2Freq>
 8003a68:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003a6c:	e003      	b.n	8003a76 <UART_SetConfig+0xca>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
	else {
		pclk = HAL_RCC_GetPCLK1Freq();
 8003a6e:	f7fe fe87 	bl	8002780 <HAL_RCC_GetPCLK1Freq>
 8003a72:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
	}
	/*-------------------------- USART BRR Configuration ---------------------*/
	if (huart->Init.OverSampling == UART_OVERSAMPLING_8) {
 8003a76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a7a:	69db      	ldr	r3, [r3, #28]
 8003a7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a80:	f040 8110 	bne.w	8003ca4 <UART_SetConfig+0x2f8>
		huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003a8e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003a92:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003a96:	4622      	mov	r2, r4
 8003a98:	462b      	mov	r3, r5
 8003a9a:	1891      	adds	r1, r2, r2
 8003a9c:	65b9      	str	r1, [r7, #88]	; 0x58
 8003a9e:	415b      	adcs	r3, r3
 8003aa0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003aa2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003aa6:	4621      	mov	r1, r4
 8003aa8:	eb12 0801 	adds.w	r8, r2, r1
 8003aac:	4629      	mov	r1, r5
 8003aae:	eb43 0901 	adc.w	r9, r3, r1
 8003ab2:	f04f 0200 	mov.w	r2, #0
 8003ab6:	f04f 0300 	mov.w	r3, #0
 8003aba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003abe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ac2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ac6:	4690      	mov	r8, r2
 8003ac8:	4699      	mov	r9, r3
 8003aca:	4623      	mov	r3, r4
 8003acc:	eb18 0303 	adds.w	r3, r8, r3
 8003ad0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003ad4:	462b      	mov	r3, r5
 8003ad6:	eb49 0303 	adc.w	r3, r9, r3
 8003ada:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003ade:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003aea:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003aee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003af2:	460b      	mov	r3, r1
 8003af4:	18db      	adds	r3, r3, r3
 8003af6:	653b      	str	r3, [r7, #80]	; 0x50
 8003af8:	4613      	mov	r3, r2
 8003afa:	eb42 0303 	adc.w	r3, r2, r3
 8003afe:	657b      	str	r3, [r7, #84]	; 0x54
 8003b00:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003b04:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003b08:	f7fd f88e 	bl	8000c28 <__aeabi_uldivmod>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	460b      	mov	r3, r1
 8003b10:	4b63      	ldr	r3, [pc, #396]	; (8003ca0 <UART_SetConfig+0x2f4>)
 8003b12:	fba3 2302 	umull	r2, r3, r3, r2
 8003b16:	095b      	lsrs	r3, r3, #5
 8003b18:	011c      	lsls	r4, r3, #4
 8003b1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003b24:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003b28:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003b2c:	4642      	mov	r2, r8
 8003b2e:	464b      	mov	r3, r9
 8003b30:	1891      	adds	r1, r2, r2
 8003b32:	64b9      	str	r1, [r7, #72]	; 0x48
 8003b34:	415b      	adcs	r3, r3
 8003b36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b38:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003b3c:	4641      	mov	r1, r8
 8003b3e:	eb12 0a01 	adds.w	sl, r2, r1
 8003b42:	4649      	mov	r1, r9
 8003b44:	eb43 0b01 	adc.w	fp, r3, r1
 8003b48:	f04f 0200 	mov.w	r2, #0
 8003b4c:	f04f 0300 	mov.w	r3, #0
 8003b50:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003b54:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003b58:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b5c:	4692      	mov	sl, r2
 8003b5e:	469b      	mov	fp, r3
 8003b60:	4643      	mov	r3, r8
 8003b62:	eb1a 0303 	adds.w	r3, sl, r3
 8003b66:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003b6a:	464b      	mov	r3, r9
 8003b6c:	eb4b 0303 	adc.w	r3, fp, r3
 8003b70:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003b80:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003b84:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003b88:	460b      	mov	r3, r1
 8003b8a:	18db      	adds	r3, r3, r3
 8003b8c:	643b      	str	r3, [r7, #64]	; 0x40
 8003b8e:	4613      	mov	r3, r2
 8003b90:	eb42 0303 	adc.w	r3, r2, r3
 8003b94:	647b      	str	r3, [r7, #68]	; 0x44
 8003b96:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003b9a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003b9e:	f7fd f843 	bl	8000c28 <__aeabi_uldivmod>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	460b      	mov	r3, r1
 8003ba6:	4611      	mov	r1, r2
 8003ba8:	4b3d      	ldr	r3, [pc, #244]	; (8003ca0 <UART_SetConfig+0x2f4>)
 8003baa:	fba3 2301 	umull	r2, r3, r3, r1
 8003bae:	095b      	lsrs	r3, r3, #5
 8003bb0:	2264      	movs	r2, #100	; 0x64
 8003bb2:	fb02 f303 	mul.w	r3, r2, r3
 8003bb6:	1acb      	subs	r3, r1, r3
 8003bb8:	00db      	lsls	r3, r3, #3
 8003bba:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003bbe:	4b38      	ldr	r3, [pc, #224]	; (8003ca0 <UART_SetConfig+0x2f4>)
 8003bc0:	fba3 2302 	umull	r2, r3, r3, r2
 8003bc4:	095b      	lsrs	r3, r3, #5
 8003bc6:	005b      	lsls	r3, r3, #1
 8003bc8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003bcc:	441c      	add	r4, r3
 8003bce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003bd8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003bdc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003be0:	4642      	mov	r2, r8
 8003be2:	464b      	mov	r3, r9
 8003be4:	1891      	adds	r1, r2, r2
 8003be6:	63b9      	str	r1, [r7, #56]	; 0x38
 8003be8:	415b      	adcs	r3, r3
 8003bea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003bf0:	4641      	mov	r1, r8
 8003bf2:	1851      	adds	r1, r2, r1
 8003bf4:	6339      	str	r1, [r7, #48]	; 0x30
 8003bf6:	4649      	mov	r1, r9
 8003bf8:	414b      	adcs	r3, r1
 8003bfa:	637b      	str	r3, [r7, #52]	; 0x34
 8003bfc:	f04f 0200 	mov.w	r2, #0
 8003c00:	f04f 0300 	mov.w	r3, #0
 8003c04:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003c08:	4659      	mov	r1, fp
 8003c0a:	00cb      	lsls	r3, r1, #3
 8003c0c:	4651      	mov	r1, sl
 8003c0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c12:	4651      	mov	r1, sl
 8003c14:	00ca      	lsls	r2, r1, #3
 8003c16:	4610      	mov	r0, r2
 8003c18:	4619      	mov	r1, r3
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	4642      	mov	r2, r8
 8003c1e:	189b      	adds	r3, r3, r2
 8003c20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003c24:	464b      	mov	r3, r9
 8003c26:	460a      	mov	r2, r1
 8003c28:	eb42 0303 	adc.w	r3, r2, r3
 8003c2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003c3c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003c40:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003c44:	460b      	mov	r3, r1
 8003c46:	18db      	adds	r3, r3, r3
 8003c48:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c4a:	4613      	mov	r3, r2
 8003c4c:	eb42 0303 	adc.w	r3, r2, r3
 8003c50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c52:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003c56:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003c5a:	f7fc ffe5 	bl	8000c28 <__aeabi_uldivmod>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	460b      	mov	r3, r1
 8003c62:	4b0f      	ldr	r3, [pc, #60]	; (8003ca0 <UART_SetConfig+0x2f4>)
 8003c64:	fba3 1302 	umull	r1, r3, r3, r2
 8003c68:	095b      	lsrs	r3, r3, #5
 8003c6a:	2164      	movs	r1, #100	; 0x64
 8003c6c:	fb01 f303 	mul.w	r3, r1, r3
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	00db      	lsls	r3, r3, #3
 8003c74:	3332      	adds	r3, #50	; 0x32
 8003c76:	4a0a      	ldr	r2, [pc, #40]	; (8003ca0 <UART_SetConfig+0x2f4>)
 8003c78:	fba2 2303 	umull	r2, r3, r2, r3
 8003c7c:	095b      	lsrs	r3, r3, #5
 8003c7e:	f003 0207 	and.w	r2, r3, #7
 8003c82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4422      	add	r2, r4
 8003c8a:	609a      	str	r2, [r3, #8]
	} else {
		huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
	}
}
 8003c8c:	e109      	b.n	8003ea2 <UART_SetConfig+0x4f6>
 8003c8e:	bf00      	nop
 8003c90:	40011000 	.word	0x40011000
 8003c94:	40011400 	.word	0x40011400
 8003c98:	40011800 	.word	0x40011800
 8003c9c:	40011c00 	.word	0x40011c00
 8003ca0:	51eb851f 	.word	0x51eb851f
		huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ca4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003cae:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003cb2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003cb6:	4642      	mov	r2, r8
 8003cb8:	464b      	mov	r3, r9
 8003cba:	1891      	adds	r1, r2, r2
 8003cbc:	6239      	str	r1, [r7, #32]
 8003cbe:	415b      	adcs	r3, r3
 8003cc0:	627b      	str	r3, [r7, #36]	; 0x24
 8003cc2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003cc6:	4641      	mov	r1, r8
 8003cc8:	1854      	adds	r4, r2, r1
 8003cca:	4649      	mov	r1, r9
 8003ccc:	eb43 0501 	adc.w	r5, r3, r1
 8003cd0:	f04f 0200 	mov.w	r2, #0
 8003cd4:	f04f 0300 	mov.w	r3, #0
 8003cd8:	00eb      	lsls	r3, r5, #3
 8003cda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003cde:	00e2      	lsls	r2, r4, #3
 8003ce0:	4614      	mov	r4, r2
 8003ce2:	461d      	mov	r5, r3
 8003ce4:	4643      	mov	r3, r8
 8003ce6:	18e3      	adds	r3, r4, r3
 8003ce8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003cec:	464b      	mov	r3, r9
 8003cee:	eb45 0303 	adc.w	r3, r5, r3
 8003cf2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003cf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003d02:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003d06:	f04f 0200 	mov.w	r2, #0
 8003d0a:	f04f 0300 	mov.w	r3, #0
 8003d0e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003d12:	4629      	mov	r1, r5
 8003d14:	008b      	lsls	r3, r1, #2
 8003d16:	4621      	mov	r1, r4
 8003d18:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d1c:	4621      	mov	r1, r4
 8003d1e:	008a      	lsls	r2, r1, #2
 8003d20:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003d24:	f7fc ff80 	bl	8000c28 <__aeabi_uldivmod>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	460b      	mov	r3, r1
 8003d2c:	4b60      	ldr	r3, [pc, #384]	; (8003eb0 <UART_SetConfig+0x504>)
 8003d2e:	fba3 2302 	umull	r2, r3, r3, r2
 8003d32:	095b      	lsrs	r3, r3, #5
 8003d34:	011c      	lsls	r4, r3, #4
 8003d36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003d40:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003d44:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003d48:	4642      	mov	r2, r8
 8003d4a:	464b      	mov	r3, r9
 8003d4c:	1891      	adds	r1, r2, r2
 8003d4e:	61b9      	str	r1, [r7, #24]
 8003d50:	415b      	adcs	r3, r3
 8003d52:	61fb      	str	r3, [r7, #28]
 8003d54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d58:	4641      	mov	r1, r8
 8003d5a:	1851      	adds	r1, r2, r1
 8003d5c:	6139      	str	r1, [r7, #16]
 8003d5e:	4649      	mov	r1, r9
 8003d60:	414b      	adcs	r3, r1
 8003d62:	617b      	str	r3, [r7, #20]
 8003d64:	f04f 0200 	mov.w	r2, #0
 8003d68:	f04f 0300 	mov.w	r3, #0
 8003d6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d70:	4659      	mov	r1, fp
 8003d72:	00cb      	lsls	r3, r1, #3
 8003d74:	4651      	mov	r1, sl
 8003d76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d7a:	4651      	mov	r1, sl
 8003d7c:	00ca      	lsls	r2, r1, #3
 8003d7e:	4610      	mov	r0, r2
 8003d80:	4619      	mov	r1, r3
 8003d82:	4603      	mov	r3, r0
 8003d84:	4642      	mov	r2, r8
 8003d86:	189b      	adds	r3, r3, r2
 8003d88:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003d8c:	464b      	mov	r3, r9
 8003d8e:	460a      	mov	r2, r1
 8003d90:	eb42 0303 	adc.w	r3, r2, r3
 8003d94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	67bb      	str	r3, [r7, #120]	; 0x78
 8003da2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003da4:	f04f 0200 	mov.w	r2, #0
 8003da8:	f04f 0300 	mov.w	r3, #0
 8003dac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003db0:	4649      	mov	r1, r9
 8003db2:	008b      	lsls	r3, r1, #2
 8003db4:	4641      	mov	r1, r8
 8003db6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003dba:	4641      	mov	r1, r8
 8003dbc:	008a      	lsls	r2, r1, #2
 8003dbe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003dc2:	f7fc ff31 	bl	8000c28 <__aeabi_uldivmod>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	460b      	mov	r3, r1
 8003dca:	4b39      	ldr	r3, [pc, #228]	; (8003eb0 <UART_SetConfig+0x504>)
 8003dcc:	fba3 1302 	umull	r1, r3, r3, r2
 8003dd0:	095b      	lsrs	r3, r3, #5
 8003dd2:	2164      	movs	r1, #100	; 0x64
 8003dd4:	fb01 f303 	mul.w	r3, r1, r3
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	011b      	lsls	r3, r3, #4
 8003ddc:	3332      	adds	r3, #50	; 0x32
 8003dde:	4a34      	ldr	r2, [pc, #208]	; (8003eb0 <UART_SetConfig+0x504>)
 8003de0:	fba2 2303 	umull	r2, r3, r2, r3
 8003de4:	095b      	lsrs	r3, r3, #5
 8003de6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003dea:	441c      	add	r4, r3
 8003dec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003df0:	2200      	movs	r2, #0
 8003df2:	673b      	str	r3, [r7, #112]	; 0x70
 8003df4:	677a      	str	r2, [r7, #116]	; 0x74
 8003df6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003dfa:	4642      	mov	r2, r8
 8003dfc:	464b      	mov	r3, r9
 8003dfe:	1891      	adds	r1, r2, r2
 8003e00:	60b9      	str	r1, [r7, #8]
 8003e02:	415b      	adcs	r3, r3
 8003e04:	60fb      	str	r3, [r7, #12]
 8003e06:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e0a:	4641      	mov	r1, r8
 8003e0c:	1851      	adds	r1, r2, r1
 8003e0e:	6039      	str	r1, [r7, #0]
 8003e10:	4649      	mov	r1, r9
 8003e12:	414b      	adcs	r3, r1
 8003e14:	607b      	str	r3, [r7, #4]
 8003e16:	f04f 0200 	mov.w	r2, #0
 8003e1a:	f04f 0300 	mov.w	r3, #0
 8003e1e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003e22:	4659      	mov	r1, fp
 8003e24:	00cb      	lsls	r3, r1, #3
 8003e26:	4651      	mov	r1, sl
 8003e28:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e2c:	4651      	mov	r1, sl
 8003e2e:	00ca      	lsls	r2, r1, #3
 8003e30:	4610      	mov	r0, r2
 8003e32:	4619      	mov	r1, r3
 8003e34:	4603      	mov	r3, r0
 8003e36:	4642      	mov	r2, r8
 8003e38:	189b      	adds	r3, r3, r2
 8003e3a:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e3c:	464b      	mov	r3, r9
 8003e3e:	460a      	mov	r2, r1
 8003e40:	eb42 0303 	adc.w	r3, r2, r3
 8003e44:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003e46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	663b      	str	r3, [r7, #96]	; 0x60
 8003e50:	667a      	str	r2, [r7, #100]	; 0x64
 8003e52:	f04f 0200 	mov.w	r2, #0
 8003e56:	f04f 0300 	mov.w	r3, #0
 8003e5a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003e5e:	4649      	mov	r1, r9
 8003e60:	008b      	lsls	r3, r1, #2
 8003e62:	4641      	mov	r1, r8
 8003e64:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e68:	4641      	mov	r1, r8
 8003e6a:	008a      	lsls	r2, r1, #2
 8003e6c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003e70:	f7fc feda 	bl	8000c28 <__aeabi_uldivmod>
 8003e74:	4602      	mov	r2, r0
 8003e76:	460b      	mov	r3, r1
 8003e78:	4b0d      	ldr	r3, [pc, #52]	; (8003eb0 <UART_SetConfig+0x504>)
 8003e7a:	fba3 1302 	umull	r1, r3, r3, r2
 8003e7e:	095b      	lsrs	r3, r3, #5
 8003e80:	2164      	movs	r1, #100	; 0x64
 8003e82:	fb01 f303 	mul.w	r3, r1, r3
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	011b      	lsls	r3, r3, #4
 8003e8a:	3332      	adds	r3, #50	; 0x32
 8003e8c:	4a08      	ldr	r2, [pc, #32]	; (8003eb0 <UART_SetConfig+0x504>)
 8003e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e92:	095b      	lsrs	r3, r3, #5
 8003e94:	f003 020f 	and.w	r2, r3, #15
 8003e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4422      	add	r2, r4
 8003ea0:	609a      	str	r2, [r3, #8]
}
 8003ea2:	bf00      	nop
 8003ea4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003eae:	bf00      	nop
 8003eb0:	51eb851f 	.word	0x51eb851f

08003eb4 <makeFreeRtosPriority>:
#endif

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority(osPriority priority) {
 8003eb4:	b480      	push	{r7}
 8003eb6:	b085      	sub	sp, #20
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	4603      	mov	r3, r0
 8003ebc:	80fb      	strh	r3, [r7, #6]
	unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	60fb      	str	r3, [r7, #12]

	if (priority != osPriorityError) {
 8003ec2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ec6:	2b84      	cmp	r3, #132	; 0x84
 8003ec8:	d005      	beq.n	8003ed6 <makeFreeRtosPriority+0x22>
		fpriority += (priority - osPriorityIdle);
 8003eca:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	4413      	add	r3, r2
 8003ed2:	3303      	adds	r3, #3
 8003ed4:	60fb      	str	r3, [r7, #12]
	}

	return fpriority;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3714      	adds	r7, #20
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <inHandlerMode>:
	return priority;
}
#endif

/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode(void) {
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
	__ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003eea:	f3ef 8305 	mrs	r3, IPSR
 8003eee:	607b      	str	r3, [r7, #4]
	return (result);
 8003ef0:	687b      	ldr	r3, [r7, #4]
	return __get_IPSR() != 0;
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	bf14      	ite	ne
 8003ef6:	2301      	movne	r3, #1
 8003ef8:	2300      	moveq	r3, #0
 8003efa:	b2db      	uxtb	r3, r3
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	370c      	adds	r7, #12
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr

08003f08 <osKernelStart>:
 * @param  thread_def    thread definition referenced with \ref osThread.
 * @param  argument      pointer that is passed to the thread function as start argument.
 * @retval status code that indicates the execution status of the function
 * @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
 */
osStatus osKernelStart(void) {
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	af00      	add	r7, sp, #0
	vTaskStartScheduler();
 8003f0c:	f001 f994 	bl	8005238 <vTaskStartScheduler>

	return osOK;
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	bd80      	pop	{r7, pc}

08003f16 <osThreadCreate>:
 * @param  thread_def    thread definition referenced with \ref osThread.
 * @param  argument      pointer that is passed to the thread function as start argument.
 * @retval thread ID for reference by other functions or NULL in case of error.
 * @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
 */
osThreadId osThreadCreate(const osThreadDef_t *thread_def, void *argument) {
 8003f16:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f18:	b089      	sub	sp, #36	; 0x24
 8003f1a:	af04      	add	r7, sp, #16
 8003f1c:	6078      	str	r0, [r7, #4]
 8003f1e:	6039      	str	r1, [r7, #0]
	TaskHandle_t handle;

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
	if ((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	695b      	ldr	r3, [r3, #20]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d020      	beq.n	8003f6a <osThreadCreate+0x54>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	699b      	ldr	r3, [r3, #24]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d01c      	beq.n	8003f6a <osThreadCreate+0x54>
		handle = xTaskCreateStatic((TaskFunction_t) thread_def->pthread,
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	685c      	ldr	r4, [r3, #4]
				(const portCHAR*) thread_def->name, thread_def->stacksize,
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681d      	ldr	r5, [r3, #0]
		handle = xTaskCreateStatic((TaskFunction_t) thread_def->pthread,
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	691e      	ldr	r6, [r3, #16]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003f42:	4618      	mov	r0, r3
 8003f44:	f7ff ffb6 	bl	8003eb4 <makeFreeRtosPriority>
 8003f48:	4601      	mov	r1, r0
				argument, makeFreeRtosPriority(thread_def->tpriority),
				thread_def->buffer, thread_def->controlblock);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	695b      	ldr	r3, [r3, #20]
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	6992      	ldr	r2, [r2, #24]
		handle = xTaskCreateStatic((TaskFunction_t) thread_def->pthread,
 8003f52:	9202      	str	r2, [sp, #8]
 8003f54:	9301      	str	r3, [sp, #4]
 8003f56:	9100      	str	r1, [sp, #0]
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	4632      	mov	r2, r6
 8003f5c:	4629      	mov	r1, r5
 8003f5e:	4620      	mov	r0, r4
 8003f60:	f000 ff0e 	bl	8004d80 <xTaskCreateStatic>
 8003f64:	4603      	mov	r3, r0
 8003f66:	60fb      	str	r3, [r7, #12]
 8003f68:	e01c      	b.n	8003fa4 <osThreadCreate+0x8e>
	} else {
		if (xTaskCreate((TaskFunction_t) thread_def->pthread,
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685c      	ldr	r4, [r3, #4]
				(const portCHAR*) thread_def->name, thread_def->stacksize,
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681d      	ldr	r5, [r3, #0]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	691b      	ldr	r3, [r3, #16]
		if (xTaskCreate((TaskFunction_t) thread_def->pthread,
 8003f76:	b29e      	uxth	r6, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f7ff ff98 	bl	8003eb4 <makeFreeRtosPriority>
 8003f84:	4602      	mov	r2, r0
 8003f86:	f107 030c 	add.w	r3, r7, #12
 8003f8a:	9301      	str	r3, [sp, #4]
 8003f8c:	9200      	str	r2, [sp, #0]
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	4632      	mov	r2, r6
 8003f92:	4629      	mov	r1, r5
 8003f94:	4620      	mov	r0, r4
 8003f96:	f000 ff50 	bl	8004e3a <xTaskCreate>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d001      	beq.n	8003fa4 <osThreadCreate+0x8e>
				argument, makeFreeRtosPriority(thread_def->tpriority),
				&handle) != pdPASS) {
			return NULL;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	e000      	b.n	8003fa6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif

	return handle;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3714      	adds	r7, #20
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003fae <osDelay>:
/**
 * @brief   Wait for Timeout (Time Delay)
 * @param   millisec      time delay value
 * @retval  status code that indicates the execution status of the function.
 */
osStatus osDelay(uint32_t millisec) {
 8003fae:	b580      	push	{r7, lr}
 8003fb0:	b084      	sub	sp, #16
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
	TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	60fb      	str	r3, [r7, #12]

	vTaskDelay(ticks ? ticks : 1); /* Minimum delay = 1 tick */
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d001      	beq.n	8003fc4 <osDelay+0x16>
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	e000      	b.n	8003fc6 <osDelay+0x18>
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f001 f902 	bl	80051d0 <vTaskDelay>

	return osOK;
 8003fcc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3710      	adds	r7, #16
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}

08003fd6 <osMessageCreate>:
 * @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
 * @retval  message queue ID for reference by other functions or NULL in case of error.
 * @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
 */
osMessageQId osMessageCreate(const osMessageQDef_t *queue_def,
		osThreadId thread_id) {
 8003fd6:	b590      	push	{r4, r7, lr}
 8003fd8:	b085      	sub	sp, #20
 8003fda:	af02      	add	r7, sp, #8
 8003fdc:	6078      	str	r0, [r7, #4]
 8003fde:	6039      	str	r1, [r7, #0]
	(void) thread_id;

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d011      	beq.n	800400c <osMessageCreate+0x36>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d00d      	beq.n	800400c <osMessageCreate+0x36>
		return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz,
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6818      	ldr	r0, [r3, #0]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6859      	ldr	r1, [r3, #4]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	689a      	ldr	r2, [r3, #8]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	2400      	movs	r4, #0
 8004002:	9400      	str	r4, [sp, #0]
 8004004:	f000 f9e0 	bl	80043c8 <xQueueGenericCreateStatic>
 8004008:	4603      	mov	r3, r0
 800400a:	e008      	b.n	800401e <osMessageCreate+0x48>
				queue_def->buffer, queue_def->controlblock);
	} else {
		return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6818      	ldr	r0, [r3, #0]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	4619      	mov	r1, r3
 8004018:	f000 fa4e 	bl	80044b8 <xQueueGenericCreate>
 800401c:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800401e:	4618      	mov	r0, r3
 8004020:	370c      	adds	r7, #12
 8004022:	46bd      	mov	sp, r7
 8004024:	bd90      	pop	{r4, r7, pc}
	...

08004028 <osMessagePut>:
 * @param  info      message information.
 * @param  millisec  timeout value or 0 in case of no time-out.
 * @retval status code that indicates the execution status of the function.
 * @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
 */
osStatus osMessagePut(osMessageQId queue_id, uint32_t info, uint32_t millisec) {
 8004028:	b580      	push	{r7, lr}
 800402a:	b086      	sub	sp, #24
 800402c:	af00      	add	r7, sp, #0
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	60b9      	str	r1, [r7, #8]
 8004032:	607a      	str	r2, [r7, #4]
	portBASE_TYPE taskWoken = pdFALSE;
 8004034:	2300      	movs	r3, #0
 8004036:	613b      	str	r3, [r7, #16]
	TickType_t ticks;

	ticks = millisec / portTICK_PERIOD_MS;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	617b      	str	r3, [r7, #20]
	if (ticks == 0) {
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d101      	bne.n	8004046 <osMessagePut+0x1e>
		ticks = 1;
 8004042:	2301      	movs	r3, #1
 8004044:	617b      	str	r3, [r7, #20]
	}

	if (inHandlerMode()) {
 8004046:	f7ff ff4d 	bl	8003ee4 <inHandlerMode>
 800404a:	4603      	mov	r3, r0
 800404c:	2b00      	cmp	r3, #0
 800404e:	d018      	beq.n	8004082 <osMessagePut+0x5a>
		if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8004050:	f107 0210 	add.w	r2, r7, #16
 8004054:	f107 0108 	add.w	r1, r7, #8
 8004058:	2300      	movs	r3, #0
 800405a:	68f8      	ldr	r0, [r7, #12]
 800405c:	f000 fb84 	bl	8004768 <xQueueGenericSendFromISR>
 8004060:	4603      	mov	r3, r0
 8004062:	2b01      	cmp	r3, #1
 8004064:	d001      	beq.n	800406a <osMessagePut+0x42>
			return osErrorOS;
 8004066:	23ff      	movs	r3, #255	; 0xff
 8004068:	e018      	b.n	800409c <osMessagePut+0x74>
		}
		portEND_SWITCHING_ISR(taskWoken);
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d014      	beq.n	800409a <osMessagePut+0x72>
 8004070:	4b0c      	ldr	r3, [pc, #48]	; (80040a4 <osMessagePut+0x7c>)
 8004072:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004076:	601a      	str	r2, [r3, #0]
 8004078:	f3bf 8f4f 	dsb	sy
 800407c:	f3bf 8f6f 	isb	sy
 8004080:	e00b      	b.n	800409a <osMessagePut+0x72>
	} else {
		if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8004082:	f107 0108 	add.w	r1, r7, #8
 8004086:	2300      	movs	r3, #0
 8004088:	697a      	ldr	r2, [r7, #20]
 800408a:	68f8      	ldr	r0, [r7, #12]
 800408c:	f000 fa6e 	bl	800456c <xQueueGenericSend>
 8004090:	4603      	mov	r3, r0
 8004092:	2b01      	cmp	r3, #1
 8004094:	d001      	beq.n	800409a <osMessagePut+0x72>
			return osErrorOS;
 8004096:	23ff      	movs	r3, #255	; 0xff
 8004098:	e000      	b.n	800409c <osMessagePut+0x74>
		}
	}

	return osOK;
 800409a:	2300      	movs	r3, #0
}
 800409c:	4618      	mov	r0, r3
 800409e:	3718      	adds	r7, #24
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}
 80040a4:	e000ed04 	.word	0xe000ed04

080040a8 <osMessageGet>:
 * @param  queue_id  message queue ID obtained with \ref osMessageCreate.
 * @param  millisec  timeout value or 0 in case of no time-out.
 * @retval event information that includes status code.
 * @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
 */
osEvent osMessageGet(osMessageQId queue_id, uint32_t millisec) {
 80040a8:	b590      	push	{r4, r7, lr}
 80040aa:	b08b      	sub	sp, #44	; 0x2c
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	60b9      	str	r1, [r7, #8]
 80040b2:	607a      	str	r2, [r7, #4]
	portBASE_TYPE taskWoken;
	TickType_t ticks;
	osEvent event;

	event.def.message_id = queue_id;
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	61fb      	str	r3, [r7, #28]
	event.value.v = 0;
 80040b8:	2300      	movs	r3, #0
 80040ba:	61bb      	str	r3, [r7, #24]

	if (queue_id == NULL) {
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d10a      	bne.n	80040d8 <osMessageGet+0x30>
		event.status = osErrorParameter;
 80040c2:	2380      	movs	r3, #128	; 0x80
 80040c4:	617b      	str	r3, [r7, #20]
		return event;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	461c      	mov	r4, r3
 80040ca:	f107 0314 	add.w	r3, r7, #20
 80040ce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80040d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80040d6:	e054      	b.n	8004182 <osMessageGet+0xda>
	}

	taskWoken = pdFALSE;
 80040d8:	2300      	movs	r3, #0
 80040da:	623b      	str	r3, [r7, #32]

	ticks = 0;
 80040dc:	2300      	movs	r3, #0
 80040de:	627b      	str	r3, [r7, #36]	; 0x24
	if (millisec == osWaitForever) {
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040e6:	d103      	bne.n	80040f0 <osMessageGet+0x48>
		ticks = portMAX_DELAY;
 80040e8:	f04f 33ff 	mov.w	r3, #4294967295
 80040ec:	627b      	str	r3, [r7, #36]	; 0x24
 80040ee:	e009      	b.n	8004104 <osMessageGet+0x5c>
	} else if (millisec != 0) {
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d006      	beq.n	8004104 <osMessageGet+0x5c>
		ticks = millisec / portTICK_PERIOD_MS;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	627b      	str	r3, [r7, #36]	; 0x24
		if (ticks == 0) {
 80040fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d101      	bne.n	8004104 <osMessageGet+0x5c>
			ticks = 1;
 8004100:	2301      	movs	r3, #1
 8004102:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}

	if (inHandlerMode()) {
 8004104:	f7ff feee 	bl	8003ee4 <inHandlerMode>
 8004108:	4603      	mov	r3, r0
 800410a:	2b00      	cmp	r3, #0
 800410c:	d01c      	beq.n	8004148 <osMessageGet+0xa0>
		if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800410e:	f107 0220 	add.w	r2, r7, #32
 8004112:	f107 0314 	add.w	r3, r7, #20
 8004116:	3304      	adds	r3, #4
 8004118:	4619      	mov	r1, r3
 800411a:	68b8      	ldr	r0, [r7, #8]
 800411c:	f000 fca0 	bl	8004a60 <xQueueReceiveFromISR>
 8004120:	4603      	mov	r3, r0
 8004122:	2b01      	cmp	r3, #1
 8004124:	d102      	bne.n	800412c <osMessageGet+0x84>
			/* We have mail */
			event.status = osEventMessage;
 8004126:	2310      	movs	r3, #16
 8004128:	617b      	str	r3, [r7, #20]
 800412a:	e001      	b.n	8004130 <osMessageGet+0x88>
		} else {
			event.status = osOK;
 800412c:	2300      	movs	r3, #0
 800412e:	617b      	str	r3, [r7, #20]
		}
		portEND_SWITCHING_ISR(taskWoken);
 8004130:	6a3b      	ldr	r3, [r7, #32]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d01d      	beq.n	8004172 <osMessageGet+0xca>
 8004136:	4b15      	ldr	r3, [pc, #84]	; (800418c <osMessageGet+0xe4>)
 8004138:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800413c:	601a      	str	r2, [r3, #0]
 800413e:	f3bf 8f4f 	dsb	sy
 8004142:	f3bf 8f6f 	isb	sy
 8004146:	e014      	b.n	8004172 <osMessageGet+0xca>
	} else {
		if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8004148:	f107 0314 	add.w	r3, r7, #20
 800414c:	3304      	adds	r3, #4
 800414e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004150:	4619      	mov	r1, r3
 8004152:	68b8      	ldr	r0, [r7, #8]
 8004154:	f000 fba4 	bl	80048a0 <xQueueReceive>
 8004158:	4603      	mov	r3, r0
 800415a:	2b01      	cmp	r3, #1
 800415c:	d102      	bne.n	8004164 <osMessageGet+0xbc>
			/* We have mail */
			event.status = osEventMessage;
 800415e:	2310      	movs	r3, #16
 8004160:	617b      	str	r3, [r7, #20]
 8004162:	e006      	b.n	8004172 <osMessageGet+0xca>
		} else {
			event.status = (ticks == 0) ? osOK : osEventTimeout;
 8004164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004166:	2b00      	cmp	r3, #0
 8004168:	d101      	bne.n	800416e <osMessageGet+0xc6>
 800416a:	2300      	movs	r3, #0
 800416c:	e000      	b.n	8004170 <osMessageGet+0xc8>
 800416e:	2340      	movs	r3, #64	; 0x40
 8004170:	617b      	str	r3, [r7, #20]
		}
	}

	return event;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	461c      	mov	r4, r3
 8004176:	f107 0314 	add.w	r3, r7, #20
 800417a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800417e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8004182:	68f8      	ldr	r0, [r7, #12]
 8004184:	372c      	adds	r7, #44	; 0x2c
 8004186:	46bd      	mov	sp, r7
 8004188:	bd90      	pop	{r4, r7, pc}
 800418a:	bf00      	nop
 800418c:	e000ed04 	.word	0xe000ed04

08004190 <vListInitialise>:

/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise(List_t *const pxList) {
 8004190:	b480      	push	{r7}
 8004192:	b083      	sub	sp, #12
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	 end of the list.  To initialise the list the list end is inserted
	 as the only list entry. */
	pxList->pxIndex = (ListItem_t*) &(pxList->xListEnd); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f103 0208 	add.w	r2, r3, #8
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	 ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f04f 32ff 	mov.w	r2, #4294967295
 80041a8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	 when the list is empty. */
	pxList->xListEnd.pxNext = (ListItem_t*) &(pxList->xListEnd); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f103 0208 	add.w	r2, r3, #8
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = (ListItem_t*) &(pxList->xListEnd);/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f103 0208 	add.w	r2, r3, #8
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = (UBaseType_t) 0U;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	 configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList ); listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80041c4:	bf00      	nop
 80041c6:	370c      	adds	r7, #12
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr

080041d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem(ListItem_t *const pxItem) {
 80041d0:	b480      	push	{r7}
 80041d2:	b083      	sub	sp, #12
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	 configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem ); listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80041de:	bf00      	nop
 80041e0:	370c      	adds	r7, #12
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr

080041ea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd(List_t *const pxList, ListItem_t *const pxNewListItem) {
 80041ea:	b480      	push	{r7}
 80041ec:	b085      	sub	sp, #20
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	6078      	str	r0, [r7, #4]
 80041f2:	6039      	str	r1, [r7, #0]
	ListItem_t *const pxIndex = pxList->pxIndex;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_INTEGRITY( pxList ); listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	 makes the new list item the last item to be removed by a call to
	 listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	68fa      	ldr	r2, [r7, #12]
 80041fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	689a      	ldr	r2, [r3, #8]
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	683a      	ldr	r2, [r7, #0]
 800420e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	683a      	ldr	r2, [r7, #0]
 8004214:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	611a      	str	r2, [r3, #16]

	(pxList->uxNumberOfItems)++;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	1c5a      	adds	r2, r3, #1
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	601a      	str	r2, [r3, #0]
}
 8004226:	bf00      	nop
 8004228:	3714      	adds	r7, #20
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr

08004232 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert(List_t *const pxList, ListItem_t *const pxNewListItem) {
 8004232:	b480      	push	{r7}
 8004234:	b085      	sub	sp, #20
 8004236:	af00      	add	r7, sp, #0
 8004238:	6078      	str	r0, [r7, #4]
 800423a:	6039      	str	r1, [r7, #0]
	ListItem_t *pxIterator;
	const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	60bb      	str	r3, [r7, #8]
	 new list item should be placed after it.  This ensures that TCBs which are
	 stored in ready lists (all of which have the same xItemValue value) get a
	 share of the CPU.  However, if the xItemValue is the same as the back marker
	 the iteration loop below will not end.  Therefore the value is checked
	 first, and the algorithm slightly modified if necessary. */
	if (xValueOfInsertion == portMAX_DELAY) {
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004248:	d103      	bne.n	8004252 <vListInsert+0x20>
		pxIterator = pxList->xListEnd.pxPrevious;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	691b      	ldr	r3, [r3, #16]
 800424e:	60fb      	str	r3, [r7, #12]
 8004250:	e00c      	b.n	800426c <vListInsert+0x3a>
		 4) Using a queue or semaphore before it has been initialised or
		 before the scheduler has been started (are interrupts firing
		 before vTaskStartScheduler() has been called?).
		 **********************************************************************/

		for (pxIterator = (ListItem_t*) &(pxList->xListEnd);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	3308      	adds	r3, #8
 8004256:	60fb      	str	r3, [r7, #12]
 8004258:	e002      	b.n	8004260 <vListInsert+0x2e>
				pxIterator->pxNext->xItemValue <= xValueOfInsertion;
				pxIterator = pxIterator->pxNext) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	60fb      	str	r3, [r7, #12]
				pxIterator->pxNext->xItemValue <= xValueOfInsertion;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
		for (pxIterator = (ListItem_t*) &(pxList->xListEnd);
 8004266:	68ba      	ldr	r2, [r7, #8]
 8004268:	429a      	cmp	r2, r3
 800426a:	d2f6      	bcs.n	800425a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			 insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	685a      	ldr	r2, [r3, #4]
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	683a      	ldr	r2, [r7, #0]
 800427a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	68fa      	ldr	r2, [r7, #12]
 8004280:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	683a      	ldr	r2, [r7, #0]
 8004286:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	 item later. */
	pxNewListItem->pxContainer = pxList;
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	611a      	str	r2, [r3, #16]

	(pxList->uxNumberOfItems)++;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	1c5a      	adds	r2, r3, #1
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	601a      	str	r2, [r3, #0]
}
 8004298:	bf00      	nop
 800429a:	3714      	adds	r7, #20
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr

080042a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove(ListItem_t *const pxItemToRemove) {
 80042a4:	b480      	push	{r7}
 80042a6:	b085      	sub	sp, #20
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
	/* The list item knows which list it is in.  Obtain the list from the list
	 item. */
	List_t *const pxList = pxItemToRemove->pxContainer;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	691b      	ldr	r3, [r3, #16]
 80042b0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	6892      	ldr	r2, [r2, #8]
 80042ba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	6852      	ldr	r2, [r2, #4]
 80042c4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if (pxList->pxIndex == pxItemToRemove) {
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d103      	bne.n	80042d8 <uxListRemove+0x34>
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	689a      	ldr	r2, [r3, #8]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	605a      	str	r2, [r3, #4]
	} else {
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	611a      	str	r2, [r3, #16]
	(pxList->uxNumberOfItems)--;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	1e5a      	subs	r2, r3, #1
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3714      	adds	r7, #20
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr

080042f8 <xQueueGenericReset>:
		}													\
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset(QueueHandle_t xQueue, BaseType_t xNewQueue) {
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b084      	sub	sp, #16
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	6039      	str	r1, [r7, #0]
	Queue_t *const pxQueue = xQueue;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	60fb      	str	r3, [r7, #12]

	configASSERT(pxQueue);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d10a      	bne.n	8004322 <xQueueGenericReset+0x2a>
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortRaiseBASEPRI(void) {
	uint32_t ulNewBASEPRI;

	__asm volatile
 800430c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004310:	f383 8811 	msr	BASEPRI, r3
 8004314:	f3bf 8f6f 	isb	sy
 8004318:	f3bf 8f4f 	dsb	sy
 800431c:	60bb      	str	r3, [r7, #8]
			"	msr basepri, %0											\n"
			"	isb														\n"
			"	dsb														\n"
			:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800431e:	bf00      	nop
 8004320:	e7fe      	b.n	8004320 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004322:	f001 fddf 	bl	8005ee4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681a      	ldr	r2, [r3, #0]
				+ (pxQueue->uxLength * pxQueue->uxItemSize); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800432e:	68f9      	ldr	r1, [r7, #12]
 8004330:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004332:	fb01 f303 	mul.w	r3, r1, r3
 8004336:	441a      	add	r2, r3
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = (UBaseType_t) 0U;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2200      	movs	r2, #0
 8004340:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681a      	ldr	r2, [r3, #0]
				+ ((pxQueue->uxLength - 1U) * pxQueue->uxItemSize); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004352:	3b01      	subs	r3, #1
 8004354:	68f9      	ldr	r1, [r7, #12]
 8004356:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004358:	fb01 f303 	mul.w	r3, r1, r3
 800435c:	441a      	add	r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	22ff      	movs	r2, #255	; 0xff
 8004366:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	22ff      	movs	r2, #255	; 0xff
 800436e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if (xNewQueue == pdFALSE) {
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d114      	bne.n	80043a2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			 the tasks will remain blocked as after this function exits the queue
			 will still be empty.  If there are tasks blocked waiting to write to
			 the queue, then one should be unblocked as after this function exits
			 it will be possible to write to it. */
			if ( listLIST_IS_EMPTY(
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	691b      	ldr	r3, [r3, #16]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d01a      	beq.n	80043b6 <xQueueGenericReset+0xbe>
					&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
				if (xTaskRemoveFromEventList(
						&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	3310      	adds	r3, #16
				if (xTaskRemoveFromEventList(
 8004384:	4618      	mov	r0, r3
 8004386:	f001 f9b9 	bl	80056fc <xTaskRemoveFromEventList>
 800438a:	4603      	mov	r3, r0
 800438c:	2b00      	cmp	r3, #0
 800438e:	d012      	beq.n	80043b6 <xQueueGenericReset+0xbe>
					queueYIELD_IF_USING_PREEMPTION();
 8004390:	4b0c      	ldr	r3, [pc, #48]	; (80043c4 <xQueueGenericReset+0xcc>)
 8004392:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004396:	601a      	str	r2, [r3, #0]
 8004398:	f3bf 8f4f 	dsb	sy
 800439c:	f3bf 8f6f 	isb	sy
 80043a0:	e009      	b.n	80043b6 <xQueueGenericReset+0xbe>
			} else {
				mtCOVERAGE_TEST_MARKER();
			}
		} else {
			/* Ensure the event queues start in the correct state. */
			vListInitialise(&(pxQueue->xTasksWaitingToSend));
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	3310      	adds	r3, #16
 80043a6:	4618      	mov	r0, r3
 80043a8:	f7ff fef2 	bl	8004190 <vListInitialise>
			vListInitialise(&(pxQueue->xTasksWaitingToReceive));
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	3324      	adds	r3, #36	; 0x24
 80043b0:	4618      	mov	r0, r3
 80043b2:	f7ff feed 	bl	8004190 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80043b6:	f001 fdc5 	bl	8005f44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	 versions. */
	return pdPASS;
 80043ba:	2301      	movs	r3, #1
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3710      	adds	r7, #16
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}
 80043c4:	e000ed04 	.word	0xe000ed04

080043c8 <xQueueGenericCreateStatic>:

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

QueueHandle_t xQueueGenericCreateStatic(const UBaseType_t uxQueueLength,
		const UBaseType_t uxItemSize, uint8_t *pucQueueStorage,
		StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType) {
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b08e      	sub	sp, #56	; 0x38
 80043cc:	af02      	add	r7, sp, #8
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	60b9      	str	r1, [r7, #8]
 80043d2:	607a      	str	r2, [r7, #4]
 80043d4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

	configASSERT(uxQueueLength > (UBaseType_t ) 0);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d10a      	bne.n	80043f2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80043dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e0:	f383 8811 	msr	BASEPRI, r3
 80043e4:	f3bf 8f6f 	isb	sy
 80043e8:	f3bf 8f4f 	dsb	sy
 80043ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80043ee:	bf00      	nop
 80043f0:	e7fe      	b.n	80043f0 <xQueueGenericCreateStatic+0x28>

	/* The StaticQueue_t structure and the queue storage area must be
	 supplied. */
	configASSERT(pxStaticQueue != NULL);
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d10a      	bne.n	800440e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80043f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043fc:	f383 8811 	msr	BASEPRI, r3
 8004400:	f3bf 8f6f 	isb	sy
 8004404:	f3bf 8f4f 	dsb	sy
 8004408:	627b      	str	r3, [r7, #36]	; 0x24
}
 800440a:	bf00      	nop
 800440c:	e7fe      	b.n	800440c <xQueueGenericCreateStatic+0x44>

	/* A queue storage area should be provided if the item size is not 0, and
	 should not be provided if the item size is 0. */
	configASSERT(!( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ));
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d002      	beq.n	800441a <xQueueGenericCreateStatic+0x52>
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d001      	beq.n	800441e <xQueueGenericCreateStatic+0x56>
 800441a:	2301      	movs	r3, #1
 800441c:	e000      	b.n	8004420 <xQueueGenericCreateStatic+0x58>
 800441e:	2300      	movs	r3, #0
 8004420:	2b00      	cmp	r3, #0
 8004422:	d10a      	bne.n	800443a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004428:	f383 8811 	msr	BASEPRI, r3
 800442c:	f3bf 8f6f 	isb	sy
 8004430:	f3bf 8f4f 	dsb	sy
 8004434:	623b      	str	r3, [r7, #32]
}
 8004436:	bf00      	nop
 8004438:	e7fe      	b.n	8004438 <xQueueGenericCreateStatic+0x70>
	configASSERT(!( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ));
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d102      	bne.n	8004446 <xQueueGenericCreateStatic+0x7e>
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d101      	bne.n	800444a <xQueueGenericCreateStatic+0x82>
 8004446:	2301      	movs	r3, #1
 8004448:	e000      	b.n	800444c <xQueueGenericCreateStatic+0x84>
 800444a:	2300      	movs	r3, #0
 800444c:	2b00      	cmp	r3, #0
 800444e:	d10a      	bne.n	8004466 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004454:	f383 8811 	msr	BASEPRI, r3
 8004458:	f3bf 8f6f 	isb	sy
 800445c:	f3bf 8f4f 	dsb	sy
 8004460:	61fb      	str	r3, [r7, #28]
}
 8004462:	bf00      	nop
 8004464:	e7fe      	b.n	8004464 <xQueueGenericCreateStatic+0x9c>
#if( configASSERT_DEFINED == 1 )
	{
		/* Sanity check that the size of the structure used to declare a
		 variable of type StaticQueue_t or StaticSemaphore_t equals the size of
		 the real queue and semaphore structures. */
		volatile size_t xSize = sizeof(StaticQueue_t);
 8004466:	2348      	movs	r3, #72	; 0x48
 8004468:	617b      	str	r3, [r7, #20]
		configASSERT(xSize == sizeof(Queue_t));
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	2b48      	cmp	r3, #72	; 0x48
 800446e:	d00a      	beq.n	8004486 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004474:	f383 8811 	msr	BASEPRI, r3
 8004478:	f3bf 8f6f 	isb	sy
 800447c:	f3bf 8f4f 	dsb	sy
 8004480:	61bb      	str	r3, [r7, #24]
}
 8004482:	bf00      	nop
 8004484:	e7fe      	b.n	8004484 <xQueueGenericCreateStatic+0xbc>
		(void) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004486:	697b      	ldr	r3, [r7, #20]
#endif /* configASSERT_DEFINED */

	/* The address of a statically allocated queue was passed in, use it.
	 The address of a statically allocated storage area was also passed in
	 but is already set. */
	pxNewQueue = (Queue_t*) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (pxNewQueue != NULL) {
 800448c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800448e:	2b00      	cmp	r3, #0
 8004490:	d00d      	beq.n	80044ae <xQueueGenericCreateStatic+0xe6>
#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
		{
			/* Queues can be allocated wither statically or dynamically, so
			 note this queue was allocated statically in case the queue is
			 later deleted. */
			pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004494:	2201      	movs	r2, #1
 8004496:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
		}
#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

		prvInitialiseNewQueue(uxQueueLength, uxItemSize, pucQueueStorage,
 800449a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800449e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044a0:	9300      	str	r3, [sp, #0]
 80044a2:	4613      	mov	r3, r2
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	68b9      	ldr	r1, [r7, #8]
 80044a8:	68f8      	ldr	r0, [r7, #12]
 80044aa:	f000 f83f 	bl	800452c <prvInitialiseNewQueue>
				ucQueueType, pxNewQueue);
	} else {
		traceQUEUE_CREATE_FAILED( ucQueueType ); mtCOVERAGE_TEST_MARKER();
	}

	return pxNewQueue;
 80044ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3730      	adds	r7, #48	; 0x30
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}

080044b8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

QueueHandle_t xQueueGenericCreate(const UBaseType_t uxQueueLength,
		const UBaseType_t uxItemSize, const uint8_t ucQueueType) {
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b08a      	sub	sp, #40	; 0x28
 80044bc:	af02      	add	r7, sp, #8
 80044be:	60f8      	str	r0, [r7, #12]
 80044c0:	60b9      	str	r1, [r7, #8]
 80044c2:	4613      	mov	r3, r2
 80044c4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

	configASSERT(uxQueueLength > (UBaseType_t ) 0);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d10a      	bne.n	80044e2 <xQueueGenericCreate+0x2a>
	__asm volatile
 80044cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d0:	f383 8811 	msr	BASEPRI, r3
 80044d4:	f3bf 8f6f 	isb	sy
 80044d8:	f3bf 8f4f 	dsb	sy
 80044dc:	613b      	str	r3, [r7, #16]
}
 80044de:	bf00      	nop
 80044e0:	e7fe      	b.n	80044e0 <xQueueGenericCreate+0x28>

	/* Allocate enough space to hold the maximum number of items that
	 can be in the queue at any time.  It is valid for uxItemSize to be
	 zero in the case the queue is used as a semaphore. */
	xQueueSizeInBytes = (size_t) (uxQueueLength * uxItemSize); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	68ba      	ldr	r2, [r7, #8]
 80044e6:	fb02 f303 	mul.w	r3, r2, r3
 80044ea:	61fb      	str	r3, [r7, #28]
	 alignment requirements of the Queue_t structure - which in this case
	 is an int8_t *.  Therefore, whenever the stack alignment requirements
	 are greater than or equal to the pointer to char requirements the cast
	 is safe.  In other cases alignment requirements are not strict (one or
	 two bytes). */
	pxNewQueue = (Queue_t*) pvPortMalloc(sizeof(Queue_t) + xQueueSizeInBytes); /*lint !e9087 !e9079 see comment above. */
 80044ec:	69fb      	ldr	r3, [r7, #28]
 80044ee:	3348      	adds	r3, #72	; 0x48
 80044f0:	4618      	mov	r0, r3
 80044f2:	f001 fe19 	bl	8006128 <pvPortMalloc>
 80044f6:	61b8      	str	r0, [r7, #24]

	if (pxNewQueue != NULL) {
 80044f8:	69bb      	ldr	r3, [r7, #24]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d011      	beq.n	8004522 <xQueueGenericCreate+0x6a>
		/* Jump past the queue structure to find the location of the queue
		 storage area. */
		pucQueueStorage = (uint8_t*) pxNewQueue;
 80044fe:	69bb      	ldr	r3, [r7, #24]
 8004500:	617b      	str	r3, [r7, #20]
		pucQueueStorage += sizeof(Queue_t); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	3348      	adds	r3, #72	; 0x48
 8004506:	617b      	str	r3, [r7, #20]
#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			/* Queues can be created either statically or dynamically, so
			 note this task was created dynamically in case it is later
			 deleted. */
			pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004508:	69bb      	ldr	r3, [r7, #24]
 800450a:	2200      	movs	r2, #0
 800450c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
		}
#endif /* configSUPPORT_STATIC_ALLOCATION */

		prvInitialiseNewQueue(uxQueueLength, uxItemSize, pucQueueStorage,
 8004510:	79fa      	ldrb	r2, [r7, #7]
 8004512:	69bb      	ldr	r3, [r7, #24]
 8004514:	9300      	str	r3, [sp, #0]
 8004516:	4613      	mov	r3, r2
 8004518:	697a      	ldr	r2, [r7, #20]
 800451a:	68b9      	ldr	r1, [r7, #8]
 800451c:	68f8      	ldr	r0, [r7, #12]
 800451e:	f000 f805 	bl	800452c <prvInitialiseNewQueue>
				ucQueueType, pxNewQueue);
	} else {
		traceQUEUE_CREATE_FAILED( ucQueueType ); mtCOVERAGE_TEST_MARKER();
	}

	return pxNewQueue;
 8004522:	69bb      	ldr	r3, [r7, #24]
}
 8004524:	4618      	mov	r0, r3
 8004526:	3720      	adds	r7, #32
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}

0800452c <prvInitialiseNewQueue>:
#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue(const UBaseType_t uxQueueLength,
		const UBaseType_t uxItemSize, uint8_t *pucQueueStorage,
		const uint8_t ucQueueType, Queue_t *pxNewQueue) {
 800452c:	b580      	push	{r7, lr}
 800452e:	b084      	sub	sp, #16
 8004530:	af00      	add	r7, sp, #0
 8004532:	60f8      	str	r0, [r7, #12]
 8004534:	60b9      	str	r1, [r7, #8]
 8004536:	607a      	str	r2, [r7, #4]
 8004538:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	 configUSE_TRACE_FACILITY not be set to 1. */
	(void) ucQueueType;

	if (uxItemSize == (UBaseType_t) 0) {
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d103      	bne.n	8004548 <prvInitialiseNewQueue+0x1c>
		/* No RAM was allocated for the queue storage area, but PC head cannot
		 be set to NULL because NULL is used as a key to say the queue is used as
		 a mutex.  Therefore just set pcHead to point to the queue as a benign
		 value that is known to be within the memory map. */
		pxNewQueue->pcHead = (int8_t*) pxNewQueue;
 8004540:	69bb      	ldr	r3, [r7, #24]
 8004542:	69ba      	ldr	r2, [r7, #24]
 8004544:	601a      	str	r2, [r3, #0]
 8004546:	e002      	b.n	800454e <prvInitialiseNewQueue+0x22>
	} else {
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = (int8_t*) pucQueueStorage;
 8004548:	69bb      	ldr	r3, [r7, #24]
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	 defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800454e:	69bb      	ldr	r3, [r7, #24]
 8004550:	68fa      	ldr	r2, [r7, #12]
 8004552:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004554:	69bb      	ldr	r3, [r7, #24]
 8004556:	68ba      	ldr	r2, [r7, #8]
 8004558:	641a      	str	r2, [r3, #64]	; 0x40
	(void) xQueueGenericReset(pxNewQueue, pdTRUE);
 800455a:	2101      	movs	r1, #1
 800455c:	69b8      	ldr	r0, [r7, #24]
 800455e:	f7ff fecb 	bl	80042f8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004562:	bf00      	nop
 8004564:	3710      	adds	r7, #16
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
	...

0800456c <xQueueGenericSend>:
#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend(QueueHandle_t xQueue,
		const void *const pvItemToQueue, TickType_t xTicksToWait,
		const BaseType_t xCopyPosition) {
 800456c:	b580      	push	{r7, lr}
 800456e:	b08e      	sub	sp, #56	; 0x38
 8004570:	af00      	add	r7, sp, #0
 8004572:	60f8      	str	r0, [r7, #12]
 8004574:	60b9      	str	r1, [r7, #8]
 8004576:	607a      	str	r2, [r7, #4]
 8004578:	603b      	str	r3, [r7, #0]
	BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800457a:	2300      	movs	r3, #0
 800457c:	637b      	str	r3, [r7, #52]	; 0x34
	TimeOut_t xTimeOut;
	Queue_t *const pxQueue = xQueue;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT(pxQueue);
 8004582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004584:	2b00      	cmp	r3, #0
 8004586:	d10a      	bne.n	800459e <xQueueGenericSend+0x32>
	__asm volatile
 8004588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800458c:	f383 8811 	msr	BASEPRI, r3
 8004590:	f3bf 8f6f 	isb	sy
 8004594:	f3bf 8f4f 	dsb	sy
 8004598:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800459a:	bf00      	nop
 800459c:	e7fe      	b.n	800459c <xQueueGenericSend+0x30>
	configASSERT(
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d103      	bne.n	80045ac <xQueueGenericSend+0x40>
 80045a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d101      	bne.n	80045b0 <xQueueGenericSend+0x44>
 80045ac:	2301      	movs	r3, #1
 80045ae:	e000      	b.n	80045b2 <xQueueGenericSend+0x46>
 80045b0:	2300      	movs	r3, #0
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d10a      	bne.n	80045cc <xQueueGenericSend+0x60>
	__asm volatile
 80045b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ba:	f383 8811 	msr	BASEPRI, r3
 80045be:	f3bf 8f6f 	isb	sy
 80045c2:	f3bf 8f4f 	dsb	sy
 80045c6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80045c8:	bf00      	nop
 80045ca:	e7fe      	b.n	80045ca <xQueueGenericSend+0x5e>
			!( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ));
	configASSERT(
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	2b02      	cmp	r3, #2
 80045d0:	d103      	bne.n	80045da <xQueueGenericSend+0x6e>
 80045d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d101      	bne.n	80045de <xQueueGenericSend+0x72>
 80045da:	2301      	movs	r3, #1
 80045dc:	e000      	b.n	80045e0 <xQueueGenericSend+0x74>
 80045de:	2300      	movs	r3, #0
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d10a      	bne.n	80045fa <xQueueGenericSend+0x8e>
	__asm volatile
 80045e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e8:	f383 8811 	msr	BASEPRI, r3
 80045ec:	f3bf 8f6f 	isb	sy
 80045f0:	f3bf 8f4f 	dsb	sy
 80045f4:	623b      	str	r3, [r7, #32]
}
 80045f6:	bf00      	nop
 80045f8:	e7fe      	b.n	80045f8 <xQueueGenericSend+0x8c>
			!( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ));
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT(
 80045fa:	f001 fa3f 	bl	8005a7c <xTaskGetSchedulerState>
 80045fe:	4603      	mov	r3, r0
 8004600:	2b00      	cmp	r3, #0
 8004602:	d102      	bne.n	800460a <xQueueGenericSend+0x9e>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d101      	bne.n	800460e <xQueueGenericSend+0xa2>
 800460a:	2301      	movs	r3, #1
 800460c:	e000      	b.n	8004610 <xQueueGenericSend+0xa4>
 800460e:	2300      	movs	r3, #0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d10a      	bne.n	800462a <xQueueGenericSend+0xbe>
	__asm volatile
 8004614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004618:	f383 8811 	msr	BASEPRI, r3
 800461c:	f3bf 8f6f 	isb	sy
 8004620:	f3bf 8f4f 	dsb	sy
 8004624:	61fb      	str	r3, [r7, #28]
}
 8004626:	bf00      	nop
 8004628:	e7fe      	b.n	8004628 <xQueueGenericSend+0xbc>

	/*lint -save -e904 This function relaxes the coding standard somewhat to
	 allow return statements within the function itself.  This is done in the
	 interest of execution time efficiency. */
	for (;;) {
		taskENTER_CRITICAL();
 800462a:	f001 fc5b 	bl	8005ee4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			 highest priority task wanting to access the queue.  If the head item
			 in the queue is to be overwritten then it does not matter if the
			 queue is full. */
			if ((pxQueue->uxMessagesWaiting < pxQueue->uxLength)
 800462e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004630:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004636:	429a      	cmp	r2, r3
 8004638:	d302      	bcc.n	8004640 <xQueueGenericSend+0xd4>
					|| (xCopyPosition == queueOVERWRITE)) {
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	2b02      	cmp	r3, #2
 800463e:	d129      	bne.n	8004694 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue(pxQueue, pvItemToQueue,
 8004640:	683a      	ldr	r2, [r7, #0]
 8004642:	68b9      	ldr	r1, [r7, #8]
 8004644:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004646:	f000 fa8b 	bl	8004b60 <prvCopyDataToQueue>
 800464a:	62f8      	str	r0, [r7, #44]	; 0x2c
							xCopyPosition);

					/* If there was a task waiting for data to arrive on the
					 queue then unblock it now. */
					if ( listLIST_IS_EMPTY(
 800464c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800464e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004650:	2b00      	cmp	r3, #0
 8004652:	d010      	beq.n	8004676 <xQueueGenericSend+0x10a>
							&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
						if (xTaskRemoveFromEventList(
								&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
 8004654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004656:	3324      	adds	r3, #36	; 0x24
						if (xTaskRemoveFromEventList(
 8004658:	4618      	mov	r0, r3
 800465a:	f001 f84f 	bl	80056fc <xTaskRemoveFromEventList>
 800465e:	4603      	mov	r3, r0
 8004660:	2b00      	cmp	r3, #0
 8004662:	d013      	beq.n	800468c <xQueueGenericSend+0x120>
							/* The unblocked task has a priority higher than
							 our own so yield immediately.  Yes it is ok to do
							 this from within the critical section - the kernel
							 takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004664:	4b3f      	ldr	r3, [pc, #252]	; (8004764 <xQueueGenericSend+0x1f8>)
 8004666:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800466a:	601a      	str	r2, [r3, #0]
 800466c:	f3bf 8f4f 	dsb	sy
 8004670:	f3bf 8f6f 	isb	sy
 8004674:	e00a      	b.n	800468c <xQueueGenericSend+0x120>
						} else {
							mtCOVERAGE_TEST_MARKER();
						}
					} else if (xYieldRequired != pdFALSE) {
 8004676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004678:	2b00      	cmp	r3, #0
 800467a:	d007      	beq.n	800468c <xQueueGenericSend+0x120>
						/* This path is a special case that will only get
						 executed if the task was holding multiple mutexes and
						 the mutexes were given back in an order that is
						 different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800467c:	4b39      	ldr	r3, [pc, #228]	; (8004764 <xQueueGenericSend+0x1f8>)
 800467e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004682:	601a      	str	r2, [r3, #0]
 8004684:	f3bf 8f4f 	dsb	sy
 8004688:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800468c:	f001 fc5a 	bl	8005f44 <vPortExitCritical>
				return pdPASS;
 8004690:	2301      	movs	r3, #1
 8004692:	e063      	b.n	800475c <xQueueGenericSend+0x1f0>
			} else {
				if (xTicksToWait == (TickType_t) 0) {
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d103      	bne.n	80046a2 <xQueueGenericSend+0x136>
					/* The queue was full and no block time is specified (or
					 the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800469a:	f001 fc53 	bl	8005f44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					 the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800469e:	2300      	movs	r3, #0
 80046a0:	e05c      	b.n	800475c <xQueueGenericSend+0x1f0>
				} else if (xEntryTimeSet == pdFALSE) {
 80046a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d106      	bne.n	80046b6 <xQueueGenericSend+0x14a>
					/* The queue was full and a block time was specified so
					 configure the timeout structure. */
					vTaskInternalSetTimeOutState(&xTimeOut);
 80046a8:	f107 0314 	add.w	r3, r7, #20
 80046ac:	4618      	mov	r0, r3
 80046ae:	f001 f887 	bl	80057c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80046b2:	2301      	movs	r3, #1
 80046b4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80046b6:	f001 fc45 	bl	8005f44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		 now the critical section has been exited. */

		vTaskSuspendAll();
 80046ba:	f000 fe27 	bl	800530c <vTaskSuspendAll>
		prvLockQueue(pxQueue);
 80046be:	f001 fc11 	bl	8005ee4 <vPortEnterCritical>
 80046c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80046c8:	b25b      	sxtb	r3, r3
 80046ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ce:	d103      	bne.n	80046d8 <xQueueGenericSend+0x16c>
 80046d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d2:	2200      	movs	r2, #0
 80046d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80046de:	b25b      	sxtb	r3, r3
 80046e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046e4:	d103      	bne.n	80046ee <xQueueGenericSend+0x182>
 80046e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046e8:	2200      	movs	r2, #0
 80046ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80046ee:	f001 fc29 	bl	8005f44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if (xTaskCheckForTimeOut(&xTimeOut, &xTicksToWait) == pdFALSE) {
 80046f2:	1d3a      	adds	r2, r7, #4
 80046f4:	f107 0314 	add.w	r3, r7, #20
 80046f8:	4611      	mov	r1, r2
 80046fa:	4618      	mov	r0, r3
 80046fc:	f001 f876 	bl	80057ec <xTaskCheckForTimeOut>
 8004700:	4603      	mov	r3, r0
 8004702:	2b00      	cmp	r3, #0
 8004704:	d124      	bne.n	8004750 <xQueueGenericSend+0x1e4>
			if (prvIsQueueFull(pxQueue) != pdFALSE) {
 8004706:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004708:	f000 fb22 	bl	8004d50 <prvIsQueueFull>
 800470c:	4603      	mov	r3, r0
 800470e:	2b00      	cmp	r3, #0
 8004710:	d018      	beq.n	8004744 <xQueueGenericSend+0x1d8>
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList(&(pxQueue->xTasksWaitingToSend),
 8004712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004714:	3310      	adds	r3, #16
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	4611      	mov	r1, r2
 800471a:	4618      	mov	r0, r3
 800471c:	f000 ffca 	bl	80056b4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				 event list.  It is possible that interrupts occurring now
				 remove this task from the event list again - but as the
				 scheduler is suspended the task will go onto the pending
				 ready last instead of the actual ready list. */
				prvUnlockQueue(pxQueue);
 8004720:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004722:	f000 faad 	bl	8004c80 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				 ready list into the ready list - so it is feasible that this
				 task is already in a ready list before it yields - in which
				 case the yield will not cause a context switch unless there
				 is also a higher priority task in the pending ready list. */
				if (xTaskResumeAll() == pdFALSE) {
 8004726:	f000 fdff 	bl	8005328 <xTaskResumeAll>
 800472a:	4603      	mov	r3, r0
 800472c:	2b00      	cmp	r3, #0
 800472e:	f47f af7c 	bne.w	800462a <xQueueGenericSend+0xbe>
					portYIELD_WITHIN_API()
 8004732:	4b0c      	ldr	r3, [pc, #48]	; (8004764 <xQueueGenericSend+0x1f8>)
 8004734:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004738:	601a      	str	r2, [r3, #0]
 800473a:	f3bf 8f4f 	dsb	sy
 800473e:	f3bf 8f6f 	isb	sy
 8004742:	e772      	b.n	800462a <xQueueGenericSend+0xbe>
					;
				}
			} else {
				/* Try again. */
				prvUnlockQueue(pxQueue);
 8004744:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004746:	f000 fa9b 	bl	8004c80 <prvUnlockQueue>
				(void) xTaskResumeAll();
 800474a:	f000 fded 	bl	8005328 <xTaskResumeAll>
 800474e:	e76c      	b.n	800462a <xQueueGenericSend+0xbe>
			}
		} else {
			/* The timeout has expired. */
			prvUnlockQueue(pxQueue);
 8004750:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004752:	f000 fa95 	bl	8004c80 <prvUnlockQueue>
			(void) xTaskResumeAll();
 8004756:	f000 fde7 	bl	8005328 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800475a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800475c:	4618      	mov	r0, r3
 800475e:	3738      	adds	r7, #56	; 0x38
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}
 8004764:	e000ed04 	.word	0xe000ed04

08004768 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR(QueueHandle_t xQueue,
		const void *const pvItemToQueue,
		BaseType_t *const pxHigherPriorityTaskWoken,
		const BaseType_t xCopyPosition) {
 8004768:	b580      	push	{r7, lr}
 800476a:	b090      	sub	sp, #64	; 0x40
 800476c:	af00      	add	r7, sp, #0
 800476e:	60f8      	str	r0, [r7, #12]
 8004770:	60b9      	str	r1, [r7, #8]
 8004772:	607a      	str	r2, [r7, #4]
 8004774:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;
	UBaseType_t uxSavedInterruptStatus;
	Queue_t *const pxQueue = xQueue;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT(pxQueue);
 800477a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800477c:	2b00      	cmp	r3, #0
 800477e:	d10a      	bne.n	8004796 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004784:	f383 8811 	msr	BASEPRI, r3
 8004788:	f3bf 8f6f 	isb	sy
 800478c:	f3bf 8f4f 	dsb	sy
 8004790:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004792:	bf00      	nop
 8004794:	e7fe      	b.n	8004794 <xQueueGenericSendFromISR+0x2c>
	configASSERT(
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d103      	bne.n	80047a4 <xQueueGenericSendFromISR+0x3c>
 800479c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800479e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d101      	bne.n	80047a8 <xQueueGenericSendFromISR+0x40>
 80047a4:	2301      	movs	r3, #1
 80047a6:	e000      	b.n	80047aa <xQueueGenericSendFromISR+0x42>
 80047a8:	2300      	movs	r3, #0
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d10a      	bne.n	80047c4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80047ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b2:	f383 8811 	msr	BASEPRI, r3
 80047b6:	f3bf 8f6f 	isb	sy
 80047ba:	f3bf 8f4f 	dsb	sy
 80047be:	627b      	str	r3, [r7, #36]	; 0x24
}
 80047c0:	bf00      	nop
 80047c2:	e7fe      	b.n	80047c2 <xQueueGenericSendFromISR+0x5a>
			!( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ));
	configASSERT(
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	2b02      	cmp	r3, #2
 80047c8:	d103      	bne.n	80047d2 <xQueueGenericSendFromISR+0x6a>
 80047ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d101      	bne.n	80047d6 <xQueueGenericSendFromISR+0x6e>
 80047d2:	2301      	movs	r3, #1
 80047d4:	e000      	b.n	80047d8 <xQueueGenericSendFromISR+0x70>
 80047d6:	2300      	movs	r3, #0
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d10a      	bne.n	80047f2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80047dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e0:	f383 8811 	msr	BASEPRI, r3
 80047e4:	f3bf 8f6f 	isb	sy
 80047e8:	f3bf 8f4f 	dsb	sy
 80047ec:	623b      	str	r3, [r7, #32]
}
 80047ee:	bf00      	nop
 80047f0:	e7fe      	b.n	80047f0 <xQueueGenericSendFromISR+0x88>
	 that have been assigned a priority at or (logically) below the maximum
	 system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	 safe API to ensure interrupt entry is as fast and as simple as possible.
	 More information (albeit Cortex-M specific) is provided on the following
	 link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80047f2:	f001 fc59 	bl	80060a8 <vPortValidateInterruptPriority>
/*-----------------------------------------------------------*/

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI(void) {
	uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80047f6:	f3ef 8211 	mrs	r2, BASEPRI
 80047fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047fe:	f383 8811 	msr	BASEPRI, r3
 8004802:	f3bf 8f6f 	isb	sy
 8004806:	f3bf 8f4f 	dsb	sy
 800480a:	61fa      	str	r2, [r7, #28]
 800480c:	61bb      	str	r3, [r7, #24]
			:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	 warnings. */
	return ulOriginalBASEPRI;
 800480e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	 in the queue.  Also don't directly wake a task that was blocked on a queue
	 read, instead return a flag to say whether a context switch is required or
	 not (i.e. has a task with a higher priority than us been woken by this
	 post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004810:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if ((pxQueue->uxMessagesWaiting < pxQueue->uxLength)
 8004812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004814:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800481a:	429a      	cmp	r2, r3
 800481c:	d302      	bcc.n	8004824 <xQueueGenericSendFromISR+0xbc>
				|| (xCopyPosition == queueOVERWRITE)) {
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	2b02      	cmp	r3, #2
 8004822:	d12f      	bne.n	8004884 <xQueueGenericSendFromISR+0x11c>
			const int8_t cTxLock = pxQueue->cTxLock;
 8004824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004826:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800482a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting =
 800482e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004832:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			 semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			 in a task disinheriting a priority and prvCopyDataToQueue() can be
			 called here even though the disinherit function does not check if
			 the scheduler is suspended before accessing the ready lists. */
			(void) prvCopyDataToQueue(pxQueue, pvItemToQueue, xCopyPosition);
 8004834:	683a      	ldr	r2, [r7, #0]
 8004836:	68b9      	ldr	r1, [r7, #8]
 8004838:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800483a:	f000 f991 	bl	8004b60 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			 be done when the queue is unlocked later. */
			if (cTxLock == queueUNLOCKED) {
 800483e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004846:	d112      	bne.n	800486e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if ( listLIST_IS_EMPTY(
 8004848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800484a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484c:	2b00      	cmp	r3, #0
 800484e:	d016      	beq.n	800487e <xQueueGenericSendFromISR+0x116>
							&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
						if (xTaskRemoveFromEventList(
								&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
 8004850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004852:	3324      	adds	r3, #36	; 0x24
						if (xTaskRemoveFromEventList(
 8004854:	4618      	mov	r0, r3
 8004856:	f000 ff51 	bl	80056fc <xTaskRemoveFromEventList>
 800485a:	4603      	mov	r3, r0
 800485c:	2b00      	cmp	r3, #0
 800485e:	d00e      	beq.n	800487e <xQueueGenericSendFromISR+0x116>
							/* The task waiting has a higher priority so record that a
							 context	switch is required. */
							if (pxHigherPriorityTaskWoken != NULL) {
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d00b      	beq.n	800487e <xQueueGenericSendFromISR+0x116>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2201      	movs	r2, #1
 800486a:	601a      	str	r2, [r3, #0]
 800486c:	e007      	b.n	800487e <xQueueGenericSendFromISR+0x116>
				}
#endif /* configUSE_QUEUE_SETS */
			} else {
				/* Increment the lock count so the task that unlocks the queue
				 knows that data was posted while it was locked. */
				pxQueue->cTxLock = (int8_t) (cTxLock + 1);
 800486e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004872:	3301      	adds	r3, #1
 8004874:	b2db      	uxtb	r3, r3
 8004876:	b25a      	sxtb	r2, r3
 8004878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800487a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800487e:	2301      	movs	r3, #1
 8004880:	63fb      	str	r3, [r7, #60]	; 0x3c
				|| (xCopyPosition == queueOVERWRITE)) {
 8004882:	e001      	b.n	8004888 <xQueueGenericSendFromISR+0x120>
		} else {
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004884:	2300      	movs	r3, #0
 8004886:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800488a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI(uint32_t ulNewMaskValue) {
	__asm volatile
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	f383 8811 	msr	BASEPRI, r3
	(
			"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004892:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR(uxSavedInterruptStatus);

	return xReturn;
 8004894:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004896:	4618      	mov	r0, r3
 8004898:	3740      	adds	r7, #64	; 0x40
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
	...

080048a0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive(QueueHandle_t xQueue, void *const pvBuffer,
		TickType_t xTicksToWait) {
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b08c      	sub	sp, #48	; 0x30
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	60f8      	str	r0, [r7, #12]
 80048a8:	60b9      	str	r1, [r7, #8]
 80048aa:	607a      	str	r2, [r7, #4]
	BaseType_t xEntryTimeSet = pdFALSE;
 80048ac:	2300      	movs	r3, #0
 80048ae:	62fb      	str	r3, [r7, #44]	; 0x2c
	TimeOut_t xTimeOut;
	Queue_t *const pxQueue = xQueue;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT((pxQueue));
 80048b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d10a      	bne.n	80048d0 <xQueueReceive+0x30>
	__asm volatile
 80048ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048be:	f383 8811 	msr	BASEPRI, r3
 80048c2:	f3bf 8f6f 	isb	sy
 80048c6:	f3bf 8f4f 	dsb	sy
 80048ca:	623b      	str	r3, [r7, #32]
}
 80048cc:	bf00      	nop
 80048ce:	e7fe      	b.n	80048ce <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	 is zero (so no data is copied into the buffer. */
	configASSERT(
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d103      	bne.n	80048de <xQueueReceive+0x3e>
 80048d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d101      	bne.n	80048e2 <xQueueReceive+0x42>
 80048de:	2301      	movs	r3, #1
 80048e0:	e000      	b.n	80048e4 <xQueueReceive+0x44>
 80048e2:	2300      	movs	r3, #0
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d10a      	bne.n	80048fe <xQueueReceive+0x5e>
	__asm volatile
 80048e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ec:	f383 8811 	msr	BASEPRI, r3
 80048f0:	f3bf 8f6f 	isb	sy
 80048f4:	f3bf 8f4f 	dsb	sy
 80048f8:	61fb      	str	r3, [r7, #28]
}
 80048fa:	bf00      	nop
 80048fc:	e7fe      	b.n	80048fc <xQueueReceive+0x5c>
			!( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ));

	/* Cannot block if the scheduler is suspended. */
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT(
 80048fe:	f001 f8bd 	bl	8005a7c <xTaskGetSchedulerState>
 8004902:	4603      	mov	r3, r0
 8004904:	2b00      	cmp	r3, #0
 8004906:	d102      	bne.n	800490e <xQueueReceive+0x6e>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d101      	bne.n	8004912 <xQueueReceive+0x72>
 800490e:	2301      	movs	r3, #1
 8004910:	e000      	b.n	8004914 <xQueueReceive+0x74>
 8004912:	2300      	movs	r3, #0
 8004914:	2b00      	cmp	r3, #0
 8004916:	d10a      	bne.n	800492e <xQueueReceive+0x8e>
	__asm volatile
 8004918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800491c:	f383 8811 	msr	BASEPRI, r3
 8004920:	f3bf 8f6f 	isb	sy
 8004924:	f3bf 8f4f 	dsb	sy
 8004928:	61bb      	str	r3, [r7, #24]
}
 800492a:	bf00      	nop
 800492c:	e7fe      	b.n	800492c <xQueueReceive+0x8c>

	/*lint -save -e904  This function relaxes the coding standard somewhat to
	 allow return statements within the function itself.  This is done in the
	 interest of execution time efficiency. */
	for (;;) {
		taskENTER_CRITICAL();
 800492e:	f001 fad9 	bl	8005ee4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004936:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			 must be the highest priority task wanting to access the queue. */
			if (uxMessagesWaiting > (UBaseType_t) 0) {
 8004938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493a:	2b00      	cmp	r3, #0
 800493c:	d01f      	beq.n	800497e <xQueueReceive+0xde>
				/* Data available, remove one item. */
				prvCopyDataFromQueue(pxQueue, pvBuffer);
 800493e:	68b9      	ldr	r1, [r7, #8]
 8004940:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004942:	f000 f977 	bl	8004c34 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting
						- (UBaseType_t) 1;
 8004946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004948:	1e5a      	subs	r2, r3, #1
				pxQueue->uxMessagesWaiting = uxMessagesWaiting
 800494a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800494c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				 post to the queue?  If so, unblock the highest priority waiting
				 task. */
				if ( listLIST_IS_EMPTY(
 800494e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004950:	691b      	ldr	r3, [r3, #16]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d00f      	beq.n	8004976 <xQueueReceive+0xd6>
						&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
					if (xTaskRemoveFromEventList(
							&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
 8004956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004958:	3310      	adds	r3, #16
					if (xTaskRemoveFromEventList(
 800495a:	4618      	mov	r0, r3
 800495c:	f000 fece 	bl	80056fc <xTaskRemoveFromEventList>
 8004960:	4603      	mov	r3, r0
 8004962:	2b00      	cmp	r3, #0
 8004964:	d007      	beq.n	8004976 <xQueueReceive+0xd6>
						queueYIELD_IF_USING_PREEMPTION();
 8004966:	4b3d      	ldr	r3, [pc, #244]	; (8004a5c <xQueueReceive+0x1bc>)
 8004968:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800496c:	601a      	str	r2, [r3, #0]
 800496e:	f3bf 8f4f 	dsb	sy
 8004972:	f3bf 8f6f 	isb	sy
					}
				} else {
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004976:	f001 fae5 	bl	8005f44 <vPortExitCritical>
				return pdPASS;
 800497a:	2301      	movs	r3, #1
 800497c:	e069      	b.n	8004a52 <xQueueReceive+0x1b2>
			} else {
				if (xTicksToWait == (TickType_t) 0) {
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d103      	bne.n	800498c <xQueueReceive+0xec>
					/* The queue was empty and no block time is specified (or
					 the block time has expired) so leave now. */
					taskEXIT_CRITICAL(); traceQUEUE_RECEIVE_FAILED( pxQueue );
 8004984:	f001 fade 	bl	8005f44 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8004988:	2300      	movs	r3, #0
 800498a:	e062      	b.n	8004a52 <xQueueReceive+0x1b2>
				} else if (xEntryTimeSet == pdFALSE) {
 800498c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800498e:	2b00      	cmp	r3, #0
 8004990:	d106      	bne.n	80049a0 <xQueueReceive+0x100>
					/* The queue was empty and a block time was specified so
					 configure the timeout structure. */
					vTaskInternalSetTimeOutState(&xTimeOut);
 8004992:	f107 0310 	add.w	r3, r7, #16
 8004996:	4618      	mov	r0, r3
 8004998:	f000 ff12 	bl	80057c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800499c:	2301      	movs	r3, #1
 800499e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80049a0:	f001 fad0 	bl	8005f44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		 now the critical section has been exited. */

		vTaskSuspendAll();
 80049a4:	f000 fcb2 	bl	800530c <vTaskSuspendAll>
		prvLockQueue(pxQueue);
 80049a8:	f001 fa9c 	bl	8005ee4 <vPortEnterCritical>
 80049ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80049b2:	b25b      	sxtb	r3, r3
 80049b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049b8:	d103      	bne.n	80049c2 <xQueueReceive+0x122>
 80049ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049bc:	2200      	movs	r2, #0
 80049be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80049c8:	b25b      	sxtb	r3, r3
 80049ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ce:	d103      	bne.n	80049d8 <xQueueReceive+0x138>
 80049d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d2:	2200      	movs	r2, #0
 80049d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80049d8:	f001 fab4 	bl	8005f44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if (xTaskCheckForTimeOut(&xTimeOut, &xTicksToWait) == pdFALSE) {
 80049dc:	1d3a      	adds	r2, r7, #4
 80049de:	f107 0310 	add.w	r3, r7, #16
 80049e2:	4611      	mov	r1, r2
 80049e4:	4618      	mov	r0, r3
 80049e6:	f000 ff01 	bl	80057ec <xTaskCheckForTimeOut>
 80049ea:	4603      	mov	r3, r0
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d123      	bne.n	8004a38 <xQueueReceive+0x198>
			/* The timeout has not expired.  If the queue is still empty place
			 the task on the list of tasks waiting to receive from the queue. */
			if (prvIsQueueEmpty(pxQueue) != pdFALSE) {
 80049f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049f2:	f000 f997 	bl	8004d24 <prvIsQueueEmpty>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d017      	beq.n	8004a2c <xQueueReceive+0x18c>
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList(&(pxQueue->xTasksWaitingToReceive),
 80049fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049fe:	3324      	adds	r3, #36	; 0x24
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	4611      	mov	r1, r2
 8004a04:	4618      	mov	r0, r3
 8004a06:	f000 fe55 	bl	80056b4 <vTaskPlaceOnEventList>
						xTicksToWait);
				prvUnlockQueue(pxQueue);
 8004a0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a0c:	f000 f938 	bl	8004c80 <prvUnlockQueue>
				if (xTaskResumeAll() == pdFALSE) {
 8004a10:	f000 fc8a 	bl	8005328 <xTaskResumeAll>
 8004a14:	4603      	mov	r3, r0
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d189      	bne.n	800492e <xQueueReceive+0x8e>
					portYIELD_WITHIN_API()
 8004a1a:	4b10      	ldr	r3, [pc, #64]	; (8004a5c <xQueueReceive+0x1bc>)
 8004a1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a20:	601a      	str	r2, [r3, #0]
 8004a22:	f3bf 8f4f 	dsb	sy
 8004a26:	f3bf 8f6f 	isb	sy
 8004a2a:	e780      	b.n	800492e <xQueueReceive+0x8e>
					mtCOVERAGE_TEST_MARKER();
				}
			} else {
				/* The queue contains data again.  Loop back to try and read the
				 data. */
				prvUnlockQueue(pxQueue);
 8004a2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a2e:	f000 f927 	bl	8004c80 <prvUnlockQueue>
				(void) xTaskResumeAll();
 8004a32:	f000 fc79 	bl	8005328 <xTaskResumeAll>
 8004a36:	e77a      	b.n	800492e <xQueueReceive+0x8e>
			}
		} else {
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			 back and attempt to read the data. */
			prvUnlockQueue(pxQueue);
 8004a38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a3a:	f000 f921 	bl	8004c80 <prvUnlockQueue>
			(void) xTaskResumeAll();
 8004a3e:	f000 fc73 	bl	8005328 <xTaskResumeAll>

			if (prvIsQueueEmpty(pxQueue) != pdFALSE) {
 8004a42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a44:	f000 f96e 	bl	8004d24 <prvIsQueueEmpty>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	f43f af6f 	beq.w	800492e <xQueueReceive+0x8e>
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004a50:	2300      	movs	r3, #0
			} else {
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3730      	adds	r7, #48	; 0x30
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	bf00      	nop
 8004a5c:	e000ed04 	.word	0xe000ed04

08004a60 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR(QueueHandle_t xQueue, void *const pvBuffer,
		BaseType_t *const pxHigherPriorityTaskWoken) {
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b08e      	sub	sp, #56	; 0x38
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	60f8      	str	r0, [r7, #12]
 8004a68:	60b9      	str	r1, [r7, #8]
 8004a6a:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;
	UBaseType_t uxSavedInterruptStatus;
	Queue_t *const pxQueue = xQueue;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT(pxQueue);
 8004a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d10a      	bne.n	8004a8c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8004a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a7a:	f383 8811 	msr	BASEPRI, r3
 8004a7e:	f3bf 8f6f 	isb	sy
 8004a82:	f3bf 8f4f 	dsb	sy
 8004a86:	623b      	str	r3, [r7, #32]
}
 8004a88:	bf00      	nop
 8004a8a:	e7fe      	b.n	8004a8a <xQueueReceiveFromISR+0x2a>
	configASSERT(
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d103      	bne.n	8004a9a <xQueueReceiveFromISR+0x3a>
 8004a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d101      	bne.n	8004a9e <xQueueReceiveFromISR+0x3e>
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e000      	b.n	8004aa0 <xQueueReceiveFromISR+0x40>
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d10a      	bne.n	8004aba <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8004aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa8:	f383 8811 	msr	BASEPRI, r3
 8004aac:	f3bf 8f6f 	isb	sy
 8004ab0:	f3bf 8f4f 	dsb	sy
 8004ab4:	61fb      	str	r3, [r7, #28]
}
 8004ab6:	bf00      	nop
 8004ab8:	e7fe      	b.n	8004ab8 <xQueueReceiveFromISR+0x58>
	 that have been assigned a priority at or (logically) below the maximum
	 system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	 safe API to ensure interrupt entry is as fast and as simple as possible.
	 More information (albeit Cortex-M specific) is provided on the following
	 link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004aba:	f001 faf5 	bl	80060a8 <vPortValidateInterruptPriority>
	__asm volatile
 8004abe:	f3ef 8211 	mrs	r2, BASEPRI
 8004ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ac6:	f383 8811 	msr	BASEPRI, r3
 8004aca:	f3bf 8f6f 	isb	sy
 8004ace:	f3bf 8f4f 	dsb	sy
 8004ad2:	61ba      	str	r2, [r7, #24]
 8004ad4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004ad6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ade:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if (uxMessagesWaiting > (UBaseType_t) 0) {
 8004ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d02f      	beq.n	8004b46 <xQueueReceiveFromISR+0xe6>
			const int8_t cRxLock = pxQueue->cRxLock;
 8004ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004aec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue(pxQueue, pvBuffer);
 8004af0:	68b9      	ldr	r1, [r7, #8]
 8004af2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004af4:	f000 f89e 	bl	8004c34 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - (UBaseType_t) 1;
 8004af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004afa:	1e5a      	subs	r2, r3, #1
 8004afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004afe:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			 Instead update the lock count so the task that unlocks the queue
			 will know that an ISR has removed data while the queue was
			 locked. */
			if (cRxLock == queueUNLOCKED) {
 8004b00:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b08:	d112      	bne.n	8004b30 <xQueueReceiveFromISR+0xd0>
				if ( listLIST_IS_EMPTY(
 8004b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b0c:	691b      	ldr	r3, [r3, #16]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d016      	beq.n	8004b40 <xQueueReceiveFromISR+0xe0>
						&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
					if (xTaskRemoveFromEventList(
							&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
 8004b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b14:	3310      	adds	r3, #16
					if (xTaskRemoveFromEventList(
 8004b16:	4618      	mov	r0, r3
 8004b18:	f000 fdf0 	bl	80056fc <xTaskRemoveFromEventList>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d00e      	beq.n	8004b40 <xQueueReceiveFromISR+0xe0>
						/* The task waiting has a higher priority than us so
						 force a context switch. */
						if (pxHigherPriorityTaskWoken != NULL) {
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d00b      	beq.n	8004b40 <xQueueReceiveFromISR+0xe0>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	601a      	str	r2, [r3, #0]
 8004b2e:	e007      	b.n	8004b40 <xQueueReceiveFromISR+0xe0>
					mtCOVERAGE_TEST_MARKER();
				}
			} else {
				/* Increment the lock count so the task that unlocks the queue
				 knows that data was removed while it was locked. */
				pxQueue->cRxLock = (int8_t) (cRxLock + 1);
 8004b30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004b34:	3301      	adds	r3, #1
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	b25a      	sxtb	r2, r3
 8004b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004b40:	2301      	movs	r3, #1
 8004b42:	637b      	str	r3, [r7, #52]	; 0x34
 8004b44:	e001      	b.n	8004b4a <xQueueReceiveFromISR+0xea>
		} else {
			xReturn = pdFAIL;
 8004b46:	2300      	movs	r3, #0
 8004b48:	637b      	str	r3, [r7, #52]	; 0x34
 8004b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b4c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	f383 8811 	msr	BASEPRI, r3
}
 8004b54:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR(uxSavedInterruptStatus);

	return xReturn;
 8004b56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3738      	adds	r7, #56	; 0x38
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}

08004b60 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue(Queue_t *const pxQueue,
		const void *pvItemToQueue, const BaseType_t xPosition) {
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b086      	sub	sp, #24
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	60f8      	str	r0, [r7, #12]
 8004b68:	60b9      	str	r1, [r7, #8]
 8004b6a:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	617b      	str	r3, [r7, #20]
	UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b74:	613b      	str	r3, [r7, #16]

	if (pxQueue->uxItemSize == (UBaseType_t) 0) {
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d10d      	bne.n	8004b9a <prvCopyDataToQueue+0x3a>
#if ( configUSE_MUTEXES == 1 )
		{
			if (pxQueue->uxQueueType == queueQUEUE_IS_MUTEX) {
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d14d      	bne.n	8004c22 <prvCopyDataToQueue+0xc2>
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit(
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f000 ff94 	bl	8005ab8 <xTaskPriorityDisinherit>
 8004b90:	6178      	str	r0, [r7, #20]
						pxQueue->u.xSemaphore.xMutexHolder);
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2200      	movs	r2, #0
 8004b96:	609a      	str	r2, [r3, #8]
 8004b98:	e043      	b.n	8004c22 <prvCopyDataToQueue+0xc2>
			} else {
				mtCOVERAGE_TEST_MARKER();
			}
		}
#endif /* configUSE_MUTEXES */
	} else if (xPosition == queueSEND_TO_BACK) {
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d119      	bne.n	8004bd4 <prvCopyDataToQueue+0x74>
		(void) memcpy((void*) pxQueue->pcWriteTo, pvItemToQueue,
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	6858      	ldr	r0, [r3, #4]
				(size_t) pxQueue->uxItemSize); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
		(void) memcpy((void*) pxQueue->pcWriteTo, pvItemToQueue,
 8004ba8:	461a      	mov	r2, r3
 8004baa:	68b9      	ldr	r1, [r7, #8]
 8004bac:	f001 fdc9 	bl	8006742 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	685a      	ldr	r2, [r3, #4]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb8:	441a      	add	r2, r3
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	605a      	str	r2, [r3, #4]
		if (pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	685a      	ldr	r2, [r3, #4]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	d32b      	bcc.n	8004c22 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	605a      	str	r2, [r3, #4]
 8004bd2:	e026      	b.n	8004c22 <prvCopyDataToQueue+0xc2>
		} else {
			mtCOVERAGE_TEST_MARKER();
		}
	} else {
		(void) memcpy((void*) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue,
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	68d8      	ldr	r0, [r3, #12]
				(size_t) pxQueue->uxItemSize); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
		(void) memcpy((void*) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue,
 8004bdc:	461a      	mov	r2, r3
 8004bde:	68b9      	ldr	r1, [r7, #8]
 8004be0:	f001 fdaf 	bl	8006742 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	68da      	ldr	r2, [r3, #12]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bec:	425b      	negs	r3, r3
 8004bee:	441a      	add	r2, r3
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	60da      	str	r2, [r3, #12]
		if (pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	68da      	ldr	r2, [r3, #12]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d207      	bcs.n	8004c10 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = (pxQueue->u.xQueue.pcTail
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	689a      	ldr	r2, [r3, #8]
					- pxQueue->uxItemSize);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c08:	425b      	negs	r3, r3
 8004c0a:	441a      	add	r2, r3
			pxQueue->u.xQueue.pcReadFrom = (pxQueue->u.xQueue.pcTail
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	60da      	str	r2, [r3, #12]
		} else {
			mtCOVERAGE_TEST_MARKER();
		}

		if (xPosition == queueOVERWRITE) {
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2b02      	cmp	r3, #2
 8004c14:	d105      	bne.n	8004c22 <prvCopyDataToQueue+0xc2>
			if (uxMessagesWaiting > (UBaseType_t) 0) {
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d002      	beq.n	8004c22 <prvCopyDataToQueue+0xc2>
				/* An item is not being added but overwritten, so subtract
				 one from the recorded number of items in the queue so when
				 one is added again below the number of recorded items remains
				 correct. */
				--uxMessagesWaiting;
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	3b01      	subs	r3, #1
 8004c20:	613b      	str	r3, [r7, #16]
		} else {
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + (UBaseType_t) 1;
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	1c5a      	adds	r2, r3, #1
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004c2a:	697b      	ldr	r3, [r7, #20]
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3718      	adds	r7, #24
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}

08004c34 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue(Queue_t *const pxQueue, void *const pvBuffer) {
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b082      	sub	sp, #8
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
 8004c3c:	6039      	str	r1, [r7, #0]
	if (pxQueue->uxItemSize != (UBaseType_t) 0) {
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d018      	beq.n	8004c78 <prvCopyDataFromQueue+0x44>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	68da      	ldr	r2, [r3, #12]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4e:	441a      	add	r2, r3
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	60da      	str	r2, [r3, #12]
		if (pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	68da      	ldr	r2, [r3, #12]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d303      	bcc.n	8004c68 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	60da      	str	r2, [r3, #12]
		} else {
			mtCOVERAGE_TEST_MARKER();
		}
		(void) memcpy((void*) pvBuffer, (void*) pxQueue->u.xQueue.pcReadFrom,
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	68d9      	ldr	r1, [r3, #12]
				(size_t) pxQueue->uxItemSize); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
		(void) memcpy((void*) pvBuffer, (void*) pxQueue->u.xQueue.pcReadFrom,
 8004c70:	461a      	mov	r2, r3
 8004c72:	6838      	ldr	r0, [r7, #0]
 8004c74:	f001 fd65 	bl	8006742 <memcpy>
	}
}
 8004c78:	bf00      	nop
 8004c7a:	3708      	adds	r7, #8
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}

08004c80 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue(Queue_t *const pxQueue) {
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b084      	sub	sp, #16
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	 removed from the queue while the queue was locked.  When a queue is
	 locked items can be added or removed, but the event lists cannot be
	 updated. */
	taskENTER_CRITICAL();
 8004c88:	f001 f92c 	bl	8005ee4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c92:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while (cTxLock > queueLOCKED_UNMODIFIED) {
 8004c94:	e011      	b.n	8004cba <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				 the pending ready list as the scheduler is still suspended. */
				if ( listLIST_IS_EMPTY(
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d012      	beq.n	8004cc4 <prvUnlockQueue+0x44>
						&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
					if (xTaskRemoveFromEventList(
							&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	3324      	adds	r3, #36	; 0x24
					if (xTaskRemoveFromEventList(
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f000 fd2a 	bl	80056fc <xTaskRemoveFromEventList>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d001      	beq.n	8004cb2 <prvUnlockQueue+0x32>
						/* The task waiting has a higher priority so record that
						 a context switch is required. */
						vTaskMissedYield();
 8004cae:	f000 fdff 	bl	80058b0 <vTaskMissedYield>
					break;
				}
			}
#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004cb2:	7bfb      	ldrb	r3, [r7, #15]
 8004cb4:	3b01      	subs	r3, #1
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	73fb      	strb	r3, [r7, #15]
		while (cTxLock > queueLOCKED_UNMODIFIED) {
 8004cba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	dce9      	bgt.n	8004c96 <prvUnlockQueue+0x16>
 8004cc2:	e000      	b.n	8004cc6 <prvUnlockQueue+0x46>
					break;
 8004cc4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	22ff      	movs	r2, #255	; 0xff
 8004cca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004cce:	f001 f939 	bl	8005f44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004cd2:	f001 f907 	bl	8005ee4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004cdc:	73bb      	strb	r3, [r7, #14]

		while (cRxLock > queueLOCKED_UNMODIFIED) {
 8004cde:	e011      	b.n	8004d04 <prvUnlockQueue+0x84>
			if ( listLIST_IS_EMPTY(
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	691b      	ldr	r3, [r3, #16]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d012      	beq.n	8004d0e <prvUnlockQueue+0x8e>
					&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
				if (xTaskRemoveFromEventList(
						&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	3310      	adds	r3, #16
				if (xTaskRemoveFromEventList(
 8004cec:	4618      	mov	r0, r3
 8004cee:	f000 fd05 	bl	80056fc <xTaskRemoveFromEventList>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d001      	beq.n	8004cfc <prvUnlockQueue+0x7c>
					vTaskMissedYield();
 8004cf8:	f000 fdda 	bl	80058b0 <vTaskMissedYield>
				} else {
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004cfc:	7bbb      	ldrb	r3, [r7, #14]
 8004cfe:	3b01      	subs	r3, #1
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	73bb      	strb	r3, [r7, #14]
		while (cRxLock > queueLOCKED_UNMODIFIED) {
 8004d04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	dce9      	bgt.n	8004ce0 <prvUnlockQueue+0x60>
 8004d0c:	e000      	b.n	8004d10 <prvUnlockQueue+0x90>
			} else {
				break;
 8004d0e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	22ff      	movs	r2, #255	; 0xff
 8004d14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004d18:	f001 f914 	bl	8005f44 <vPortExitCritical>
}
 8004d1c:	bf00      	nop
 8004d1e:	3710      	adds	r7, #16
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}

08004d24 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty(const Queue_t *pxQueue) {
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b084      	sub	sp, #16
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004d2c:	f001 f8da 	bl	8005ee4 <vPortEnterCritical>
	{
		if (pxQueue->uxMessagesWaiting == (UBaseType_t) 0) {
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d102      	bne.n	8004d3e <prvIsQueueEmpty+0x1a>
			xReturn = pdTRUE;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	60fb      	str	r3, [r7, #12]
 8004d3c:	e001      	b.n	8004d42 <prvIsQueueEmpty+0x1e>
		} else {
			xReturn = pdFALSE;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004d42:	f001 f8ff 	bl	8005f44 <vPortExitCritical>

	return xReturn;
 8004d46:	68fb      	ldr	r3, [r7, #12]
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3710      	adds	r7, #16
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}

08004d50 <prvIsQueueFull>:

	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull(const Queue_t *pxQueue) {
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b084      	sub	sp, #16
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004d58:	f001 f8c4 	bl	8005ee4 <vPortEnterCritical>
	{
		if (pxQueue->uxMessagesWaiting == pxQueue->uxLength) {
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d102      	bne.n	8004d6e <prvIsQueueFull+0x1e>
			xReturn = pdTRUE;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	60fb      	str	r3, [r7, #12]
 8004d6c:	e001      	b.n	8004d72 <prvIsQueueFull+0x22>
		} else {
			xReturn = pdFALSE;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004d72:	f001 f8e7 	bl	8005f44 <vPortExitCritical>

	return xReturn;
 8004d76:	68fb      	ldr	r3, [r7, #12]
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3710      	adds	r7, #16
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}

08004d80 <xTaskCreateStatic>:

TaskHandle_t xTaskCreateStatic(TaskFunction_t pxTaskCode,
		const char *const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
		const uint32_t ulStackDepth, void *const pvParameters,
		UBaseType_t uxPriority, StackType_t *const puxStackBuffer,
		StaticTask_t *const pxTaskBuffer) {
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b08e      	sub	sp, #56	; 0x38
 8004d84:	af04      	add	r7, sp, #16
 8004d86:	60f8      	str	r0, [r7, #12]
 8004d88:	60b9      	str	r1, [r7, #8]
 8004d8a:	607a      	str	r2, [r7, #4]
 8004d8c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

	configASSERT(puxStackBuffer != NULL);
 8004d8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d10a      	bne.n	8004daa <xTaskCreateStatic+0x2a>
	__asm volatile
 8004d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d98:	f383 8811 	msr	BASEPRI, r3
 8004d9c:	f3bf 8f6f 	isb	sy
 8004da0:	f3bf 8f4f 	dsb	sy
 8004da4:	623b      	str	r3, [r7, #32]
}
 8004da6:	bf00      	nop
 8004da8:	e7fe      	b.n	8004da8 <xTaskCreateStatic+0x28>
	configASSERT(pxTaskBuffer != NULL);
 8004daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d10a      	bne.n	8004dc6 <xTaskCreateStatic+0x46>
	__asm volatile
 8004db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db4:	f383 8811 	msr	BASEPRI, r3
 8004db8:	f3bf 8f6f 	isb	sy
 8004dbc:	f3bf 8f4f 	dsb	sy
 8004dc0:	61fb      	str	r3, [r7, #28]
}
 8004dc2:	bf00      	nop
 8004dc4:	e7fe      	b.n	8004dc4 <xTaskCreateStatic+0x44>
#if( configASSERT_DEFINED == 1 )
	{
		/* Sanity check that the size of the structure used to declare a
		 variable of type StaticTask_t equals the size of the real task
		 structure. */
		volatile size_t xSize = sizeof(StaticTask_t);
 8004dc6:	23b4      	movs	r3, #180	; 0xb4
 8004dc8:	613b      	str	r3, [r7, #16]
		configASSERT(xSize == sizeof(TCB_t));
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	2bb4      	cmp	r3, #180	; 0xb4
 8004dce:	d00a      	beq.n	8004de6 <xTaskCreateStatic+0x66>
	__asm volatile
 8004dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd4:	f383 8811 	msr	BASEPRI, r3
 8004dd8:	f3bf 8f6f 	isb	sy
 8004ddc:	f3bf 8f4f 	dsb	sy
 8004de0:	61bb      	str	r3, [r7, #24]
}
 8004de2:	bf00      	nop
 8004de4:	e7fe      	b.n	8004de4 <xTaskCreateStatic+0x64>
		(void) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004de6:	693b      	ldr	r3, [r7, #16]
	}
#endif /* configASSERT_DEFINED */

	if ((pxTaskBuffer != NULL) && (puxStackBuffer != NULL)) {
 8004de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d01e      	beq.n	8004e2c <xTaskCreateStatic+0xac>
 8004dee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d01b      	beq.n	8004e2c <xTaskCreateStatic+0xac>
		/* The memory used for the task's TCB and stack are passed into this
		 function - use them. */
		pxNewTCB = (TCB_t*) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004df6:	627b      	str	r3, [r7, #36]	; 0x24
		pxNewTCB->pxStack = (StackType_t*) puxStackBuffer;
 8004df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004dfc:	631a      	str	r2, [r3, #48]	; 0x30

#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* Tasks can be created statically or dynamically, so note this
			 task was created statically in case the task is later deleted. */
			pxNewTCB->ucStaticallyAllocated =
 8004dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e00:	2202      	movs	r2, #2
 8004e02:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
					tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
		}
#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

		prvInitialiseNewTask(pxTaskCode, pcName, ulStackDepth, pvParameters,
 8004e06:	2300      	movs	r3, #0
 8004e08:	9303      	str	r3, [sp, #12]
 8004e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0c:	9302      	str	r3, [sp, #8]
 8004e0e:	f107 0314 	add.w	r3, r7, #20
 8004e12:	9301      	str	r3, [sp, #4]
 8004e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e16:	9300      	str	r3, [sp, #0]
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	68b9      	ldr	r1, [r7, #8]
 8004e1e:	68f8      	ldr	r0, [r7, #12]
 8004e20:	f000 f850 	bl	8004ec4 <prvInitialiseNewTask>
				uxPriority, &xReturn, pxNewTCB, NULL);
		prvAddNewTaskToReadyList(pxNewTCB);
 8004e24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e26:	f000 f8eb 	bl	8005000 <prvAddNewTaskToReadyList>
 8004e2a:	e001      	b.n	8004e30 <xTaskCreateStatic+0xb0>
	} else {
		xReturn = NULL;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004e30:	697b      	ldr	r3, [r7, #20]
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3728      	adds	r7, #40	; 0x28
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}

08004e3a <xTaskCreate>:

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

BaseType_t xTaskCreate(TaskFunction_t pxTaskCode, const char *const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
const configSTACK_DEPTH_TYPE usStackDepth, void *const pvParameters,
		UBaseType_t uxPriority, TaskHandle_t *const pxCreatedTask) {
 8004e3a:	b580      	push	{r7, lr}
 8004e3c:	b08c      	sub	sp, #48	; 0x30
 8004e3e:	af04      	add	r7, sp, #16
 8004e40:	60f8      	str	r0, [r7, #12]
 8004e42:	60b9      	str	r1, [r7, #8]
 8004e44:	603b      	str	r3, [r7, #0]
 8004e46:	4613      	mov	r3, r2
 8004e48:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
	{
		StackType_t *pxStack;

		/* Allocate space for the stack used by the task being created. */
		pxStack = pvPortMalloc((((size_t) usStackDepth) * sizeof(StackType_t))); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004e4a:	88fb      	ldrh	r3, [r7, #6]
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f001 f96a 	bl	8006128 <pvPortMalloc>
 8004e54:	6178      	str	r0, [r7, #20]

		if (pxStack != NULL) {
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d00e      	beq.n	8004e7a <xTaskCreate+0x40>
			/* Allocate space for the TCB. */
			pxNewTCB = (TCB_t*) pvPortMalloc(sizeof(TCB_t)); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004e5c:	20b4      	movs	r0, #180	; 0xb4
 8004e5e:	f001 f963 	bl	8006128 <pvPortMalloc>
 8004e62:	61f8      	str	r0, [r7, #28]

			if (pxNewTCB != NULL) {
 8004e64:	69fb      	ldr	r3, [r7, #28]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d003      	beq.n	8004e72 <xTaskCreate+0x38>
				/* Store the stack location in the TCB. */
				pxNewTCB->pxStack = pxStack;
 8004e6a:	69fb      	ldr	r3, [r7, #28]
 8004e6c:	697a      	ldr	r2, [r7, #20]
 8004e6e:	631a      	str	r2, [r3, #48]	; 0x30
 8004e70:	e005      	b.n	8004e7e <xTaskCreate+0x44>
			} else {
				/* The stack cannot be used as the TCB was not created.  Free
				 it again. */
				vPortFree(pxStack);
 8004e72:	6978      	ldr	r0, [r7, #20]
 8004e74:	f001 fa24 	bl	80062c0 <vPortFree>
 8004e78:	e001      	b.n	8004e7e <xTaskCreate+0x44>
			}
		} else {
			pxNewTCB = NULL;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	61fb      	str	r3, [r7, #28]
		}
	}
#endif /* portSTACK_GROWTH */

	if (pxNewTCB != NULL) {
 8004e7e:	69fb      	ldr	r3, [r7, #28]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d017      	beq.n	8004eb4 <xTaskCreate+0x7a>
#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
		{
			/* Tasks can be created statically or dynamically, so note this
			 task was created dynamically in case it is later deleted. */
			pxNewTCB->ucStaticallyAllocated =
 8004e84:	69fb      	ldr	r3, [r7, #28]
 8004e86:	2200      	movs	r2, #0
 8004e88:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
					tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
		}
#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

		prvInitialiseNewTask(pxTaskCode, pcName, (uint32_t) usStackDepth,
 8004e8c:	88fa      	ldrh	r2, [r7, #6]
 8004e8e:	2300      	movs	r3, #0
 8004e90:	9303      	str	r3, [sp, #12]
 8004e92:	69fb      	ldr	r3, [r7, #28]
 8004e94:	9302      	str	r3, [sp, #8]
 8004e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e98:	9301      	str	r3, [sp, #4]
 8004e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e9c:	9300      	str	r3, [sp, #0]
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	68b9      	ldr	r1, [r7, #8]
 8004ea2:	68f8      	ldr	r0, [r7, #12]
 8004ea4:	f000 f80e 	bl	8004ec4 <prvInitialiseNewTask>
				pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL);
		prvAddNewTaskToReadyList(pxNewTCB);
 8004ea8:	69f8      	ldr	r0, [r7, #28]
 8004eaa:	f000 f8a9 	bl	8005000 <prvAddNewTaskToReadyList>
		xReturn = pdPASS;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	61bb      	str	r3, [r7, #24]
 8004eb2:	e002      	b.n	8004eba <xTaskCreate+0x80>
	} else {
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004eb4:	f04f 33ff 	mov.w	r3, #4294967295
 8004eb8:	61bb      	str	r3, [r7, #24]
	}

	return xReturn;
 8004eba:	69bb      	ldr	r3, [r7, #24]
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3720      	adds	r7, #32
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}

08004ec4 <prvInitialiseNewTask>:

static void prvInitialiseNewTask(TaskFunction_t pxTaskCode,
		const char *const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
		const uint32_t ulStackDepth, void *const pvParameters,
		UBaseType_t uxPriority, TaskHandle_t *const pxCreatedTask,
		TCB_t *pxNewTCB, const MemoryRegion_t *const xRegions) {
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b088      	sub	sp, #32
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	60f8      	str	r0, [r7, #12]
 8004ecc:	60b9      	str	r1, [r7, #8]
 8004ece:	607a      	str	r2, [r7, #4]
 8004ed0:	603b      	str	r3, [r7, #0]
	 grows from high memory to low (as per the 80x86) or vice versa.
	 portSTACK_GROWTH is used to make the result positive or negative as required
	 by the port. */
#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &(pxNewTCB->pxStack[ulStackDepth - (uint32_t) 1]);
 8004ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ed4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004edc:	3b01      	subs	r3, #1
 8004ede:	009b      	lsls	r3, r3, #2
 8004ee0:	4413      	add	r3, r2
 8004ee2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = (StackType_t*) ((( portPOINTER_SIZE_TYPE ) pxTopOfStack)
 8004ee4:	69bb      	ldr	r3, [r7, #24]
				& (~(( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK))); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004ee6:	f023 0307 	bic.w	r3, r3, #7
		pxTopOfStack = (StackType_t*) ((( portPOINTER_SIZE_TYPE ) pxTopOfStack)
 8004eea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT(
 8004eec:	69bb      	ldr	r3, [r7, #24]
 8004eee:	f003 0307 	and.w	r3, r3, #7
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d00a      	beq.n	8004f0c <prvInitialiseNewTask+0x48>
	__asm volatile
 8004ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004efa:	f383 8811 	msr	BASEPRI, r3
 8004efe:	f3bf 8f6f 	isb	sy
 8004f02:	f3bf 8f4f 	dsb	sy
 8004f06:	617b      	str	r3, [r7, #20]
}
 8004f08:	bf00      	nop
 8004f0a:	e7fe      	b.n	8004f0a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if (pcName != NULL) {
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d01f      	beq.n	8004f52 <prvInitialiseNewTask+0x8e>
		for (x = (UBaseType_t) 0; x < (UBaseType_t) configMAX_TASK_NAME_LEN;
 8004f12:	2300      	movs	r3, #0
 8004f14:	61fb      	str	r3, [r7, #28]
 8004f16:	e012      	b.n	8004f3e <prvInitialiseNewTask+0x7a>
				x++) {
			pxNewTCB->pcTaskName[x] = pcName[x];
 8004f18:	68ba      	ldr	r2, [r7, #8]
 8004f1a:	69fb      	ldr	r3, [r7, #28]
 8004f1c:	4413      	add	r3, r2
 8004f1e:	7819      	ldrb	r1, [r3, #0]
 8004f20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f22:	69fb      	ldr	r3, [r7, #28]
 8004f24:	4413      	add	r3, r2
 8004f26:	3334      	adds	r3, #52	; 0x34
 8004f28:	460a      	mov	r2, r1
 8004f2a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			 configMAX_TASK_NAME_LEN characters just in case the memory after the
			 string is not accessible (extremely unlikely). */
			if (pcName[x] == (char) 0x00) {
 8004f2c:	68ba      	ldr	r2, [r7, #8]
 8004f2e:	69fb      	ldr	r3, [r7, #28]
 8004f30:	4413      	add	r3, r2
 8004f32:	781b      	ldrb	r3, [r3, #0]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d006      	beq.n	8004f46 <prvInitialiseNewTask+0x82>
				x++) {
 8004f38:	69fb      	ldr	r3, [r7, #28]
 8004f3a:	3301      	adds	r3, #1
 8004f3c:	61fb      	str	r3, [r7, #28]
		for (x = (UBaseType_t) 0; x < (UBaseType_t) configMAX_TASK_NAME_LEN;
 8004f3e:	69fb      	ldr	r3, [r7, #28]
 8004f40:	2b0f      	cmp	r3, #15
 8004f42:	d9e9      	bls.n	8004f18 <prvInitialiseNewTask+0x54>
 8004f44:	e000      	b.n	8004f48 <prvInitialiseNewTask+0x84>
				break;
 8004f46:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		 was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1] = '\0';
 8004f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f50:	e003      	b.n	8004f5a <prvInitialiseNewTask+0x96>
	} else {
		/* The task has not been given a name, so just ensure there is a NULL
		 terminator when it is read out. */
		pxNewTCB->pcTaskName[0] = 0x00;
 8004f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f54:	2200      	movs	r2, #0
 8004f56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	 remove the privilege bit if one is present. */
	if (uxPriority >= (UBaseType_t) configMAX_PRIORITIES) {
 8004f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f5c:	2b06      	cmp	r3, #6
 8004f5e:	d901      	bls.n	8004f64 <prvInitialiseNewTask+0xa0>
		uxPriority = (UBaseType_t) configMAX_PRIORITIES - (UBaseType_t) 1U;
 8004f60:	2306      	movs	r3, #6
 8004f62:	62bb      	str	r3, [r7, #40]	; 0x28
	} else {
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f68:	62da      	str	r2, [r3, #44]	; 0x2c
#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f6e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f72:	2200      	movs	r2, #0
 8004f74:	649a      	str	r2, [r3, #72]	; 0x48
	}
#endif /* configUSE_MUTEXES */

	vListInitialiseItem(&(pxNewTCB->xStateListItem));
 8004f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f78:	3304      	adds	r3, #4
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f7ff f928 	bl	80041d0 <vListInitialiseItem>
	vListInitialiseItem(&(pxNewTCB->xEventListItem));
 8004f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f82:	3318      	adds	r3, #24
 8004f84:	4618      	mov	r0, r3
 8004f86:	f7ff f923 	bl	80041d0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	 back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER(&(pxNewTCB->xStateListItem), pxNewTCB);
 8004f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f8e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE(&(pxNewTCB->xEventListItem),
 8004f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f92:	f1c3 0207 	rsb	r2, r3, #7
 8004f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f98:	619a      	str	r2, [r3, #24]
			( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
	listSET_LIST_ITEM_OWNER(&(pxNewTCB->xEventListItem), pxNewTCB);
 8004f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f9e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004faa:	2200      	movs	r2, #0
 8004fac:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		 See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		 for additional information. */
		_REENT_INIT_PTR((&(pxNewTCB->xNewLib_reent)));
 8004fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb2:	334c      	adds	r3, #76	; 0x4c
 8004fb4:	2260      	movs	r2, #96	; 0x60
 8004fb6:	2100      	movs	r1, #0
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f001 fbd0 	bl	800675e <memset>
 8004fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fc0:	4a0c      	ldr	r2, [pc, #48]	; (8004ff4 <prvInitialiseNewTask+0x130>)
 8004fc2:	651a      	str	r2, [r3, #80]	; 0x50
 8004fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fc6:	4a0c      	ldr	r2, [pc, #48]	; (8004ff8 <prvInitialiseNewTask+0x134>)
 8004fc8:	655a      	str	r2, [r3, #84]	; 0x54
 8004fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fcc:	4a0b      	ldr	r2, [pc, #44]	; (8004ffc <prvInitialiseNewTask+0x138>)
 8004fce:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack(pxTopOfStack,
 8004fd0:	683a      	ldr	r2, [r7, #0]
 8004fd2:	68f9      	ldr	r1, [r7, #12]
 8004fd4:	69b8      	ldr	r0, [r7, #24]
 8004fd6:	f000 fe5b 	bl	8005c90 <pxPortInitialiseStack>
 8004fda:	4602      	mov	r2, r0
 8004fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fde:	601a      	str	r2, [r3, #0]
		}
#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
#endif /* portUSING_MPU_WRAPPERS */

	if (pxCreatedTask != NULL) {
 8004fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d002      	beq.n	8004fec <prvInitialiseNewTask+0x128>
		/* Pass the handle out in an anonymous way.  The handle can be used to
		 change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = (TaskHandle_t) pxNewTCB;
 8004fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fe8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fea:	601a      	str	r2, [r3, #0]
	} else {
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004fec:	bf00      	nop
 8004fee:	3720      	adds	r7, #32
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}
 8004ff4:	08007d58 	.word	0x08007d58
 8004ff8:	08007d78 	.word	0x08007d78
 8004ffc:	08007d38 	.word	0x08007d38

08005000 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList(TCB_t *pxNewTCB) {
 8005000:	b580      	push	{r7, lr}
 8005002:	b082      	sub	sp, #8
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	 updated. */
	taskENTER_CRITICAL();
 8005008:	f000 ff6c 	bl	8005ee4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800500c:	4b2a      	ldr	r3, [pc, #168]	; (80050b8 <prvAddNewTaskToReadyList+0xb8>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	3301      	adds	r3, #1
 8005012:	4a29      	ldr	r2, [pc, #164]	; (80050b8 <prvAddNewTaskToReadyList+0xb8>)
 8005014:	6013      	str	r3, [r2, #0]
		if (pxCurrentTCB == NULL) {
 8005016:	4b29      	ldr	r3, [pc, #164]	; (80050bc <prvAddNewTaskToReadyList+0xbc>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d109      	bne.n	8005032 <prvAddNewTaskToReadyList+0x32>
			/* There are no other tasks, or all the other tasks are in
			 the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800501e:	4a27      	ldr	r2, [pc, #156]	; (80050bc <prvAddNewTaskToReadyList+0xbc>)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6013      	str	r3, [r2, #0]

			if (uxCurrentNumberOfTasks == (UBaseType_t) 1) {
 8005024:	4b24      	ldr	r3, [pc, #144]	; (80050b8 <prvAddNewTaskToReadyList+0xb8>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	2b01      	cmp	r3, #1
 800502a:	d110      	bne.n	800504e <prvAddNewTaskToReadyList+0x4e>
				/* This is the first task to be created so do the preliminary
				 initialisation required.  We will not recover if this call
				 fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800502c:	f000 fc64 	bl	80058f8 <prvInitialiseTaskLists>
 8005030:	e00d      	b.n	800504e <prvAddNewTaskToReadyList+0x4e>
			}
		} else {
			/* If the scheduler is not already running, make this task the
			 current task if it is the highest priority task to be created
			 so far. */
			if (xSchedulerRunning == pdFALSE) {
 8005032:	4b23      	ldr	r3, [pc, #140]	; (80050c0 <prvAddNewTaskToReadyList+0xc0>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d109      	bne.n	800504e <prvAddNewTaskToReadyList+0x4e>
				if (pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority) {
 800503a:	4b20      	ldr	r3, [pc, #128]	; (80050bc <prvAddNewTaskToReadyList+0xbc>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005044:	429a      	cmp	r2, r3
 8005046:	d802      	bhi.n	800504e <prvAddNewTaskToReadyList+0x4e>
					pxCurrentTCB = pxNewTCB;
 8005048:	4a1c      	ldr	r2, [pc, #112]	; (80050bc <prvAddNewTaskToReadyList+0xbc>)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6013      	str	r3, [r2, #0]
			} else {
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800504e:	4b1d      	ldr	r3, [pc, #116]	; (80050c4 <prvAddNewTaskToReadyList+0xc4>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	3301      	adds	r3, #1
 8005054:	4a1b      	ldr	r2, [pc, #108]	; (80050c4 <prvAddNewTaskToReadyList+0xc4>)
 8005056:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList(pxNewTCB);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800505c:	2201      	movs	r2, #1
 800505e:	409a      	lsls	r2, r3
 8005060:	4b19      	ldr	r3, [pc, #100]	; (80050c8 <prvAddNewTaskToReadyList+0xc8>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4313      	orrs	r3, r2
 8005066:	4a18      	ldr	r2, [pc, #96]	; (80050c8 <prvAddNewTaskToReadyList+0xc8>)
 8005068:	6013      	str	r3, [r2, #0]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800506e:	4613      	mov	r3, r2
 8005070:	009b      	lsls	r3, r3, #2
 8005072:	4413      	add	r3, r2
 8005074:	009b      	lsls	r3, r3, #2
 8005076:	4a15      	ldr	r2, [pc, #84]	; (80050cc <prvAddNewTaskToReadyList+0xcc>)
 8005078:	441a      	add	r2, r3
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	3304      	adds	r3, #4
 800507e:	4619      	mov	r1, r3
 8005080:	4610      	mov	r0, r2
 8005082:	f7ff f8b2 	bl	80041ea <vListInsertEnd>

		portSETUP_TCB(pxNewTCB);
	}
	taskEXIT_CRITICAL();
 8005086:	f000 ff5d 	bl	8005f44 <vPortExitCritical>

	if (xSchedulerRunning != pdFALSE) {
 800508a:	4b0d      	ldr	r3, [pc, #52]	; (80050c0 <prvAddNewTaskToReadyList+0xc0>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d00e      	beq.n	80050b0 <prvAddNewTaskToReadyList+0xb0>
		/* If the created task is of a higher priority than the current task
		 then it should run now. */
		if (pxCurrentTCB->uxPriority < pxNewTCB->uxPriority) {
 8005092:	4b0a      	ldr	r3, [pc, #40]	; (80050bc <prvAddNewTaskToReadyList+0xbc>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800509c:	429a      	cmp	r2, r3
 800509e:	d207      	bcs.n	80050b0 <prvAddNewTaskToReadyList+0xb0>
			taskYIELD_IF_USING_PREEMPTION();
 80050a0:	4b0b      	ldr	r3, [pc, #44]	; (80050d0 <prvAddNewTaskToReadyList+0xd0>)
 80050a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050a6:	601a      	str	r2, [r3, #0]
 80050a8:	f3bf 8f4f 	dsb	sy
 80050ac:	f3bf 8f6f 	isb	sy
			mtCOVERAGE_TEST_MARKER();
		}
	} else {
		mtCOVERAGE_TEST_MARKER();
	}
}
 80050b0:	bf00      	nop
 80050b2:	3708      	adds	r7, #8
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}
 80050b8:	2000059c 	.word	0x2000059c
 80050bc:	2000049c 	.word	0x2000049c
 80050c0:	200005a8 	.word	0x200005a8
 80050c4:	200005b8 	.word	0x200005b8
 80050c8:	200005a4 	.word	0x200005a4
 80050cc:	200004a0 	.word	0x200004a0
 80050d0:	e000ed04 	.word	0xe000ed04

080050d4 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

void vTaskDelayUntil(TickType_t *const pxPreviousWakeTime,
		const TickType_t xTimeIncrement) {
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b08a      	sub	sp, #40	; 0x28
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80050de:	2300      	movs	r3, #0
 80050e0:	627b      	str	r3, [r7, #36]	; 0x24

	configASSERT(pxPreviousWakeTime);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d10a      	bne.n	80050fe <vTaskDelayUntil+0x2a>
	__asm volatile
 80050e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ec:	f383 8811 	msr	BASEPRI, r3
 80050f0:	f3bf 8f6f 	isb	sy
 80050f4:	f3bf 8f4f 	dsb	sy
 80050f8:	617b      	str	r3, [r7, #20]
}
 80050fa:	bf00      	nop
 80050fc:	e7fe      	b.n	80050fc <vTaskDelayUntil+0x28>
	configASSERT((xTimeIncrement > 0U));
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d10a      	bne.n	800511a <vTaskDelayUntil+0x46>
	__asm volatile
 8005104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005108:	f383 8811 	msr	BASEPRI, r3
 800510c:	f3bf 8f6f 	isb	sy
 8005110:	f3bf 8f4f 	dsb	sy
 8005114:	613b      	str	r3, [r7, #16]
}
 8005116:	bf00      	nop
 8005118:	e7fe      	b.n	8005118 <vTaskDelayUntil+0x44>
	configASSERT(uxSchedulerSuspended == 0);
 800511a:	4b2a      	ldr	r3, [pc, #168]	; (80051c4 <vTaskDelayUntil+0xf0>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d00a      	beq.n	8005138 <vTaskDelayUntil+0x64>
	__asm volatile
 8005122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005126:	f383 8811 	msr	BASEPRI, r3
 800512a:	f3bf 8f6f 	isb	sy
 800512e:	f3bf 8f4f 	dsb	sy
 8005132:	60fb      	str	r3, [r7, #12]
}
 8005134:	bf00      	nop
 8005136:	e7fe      	b.n	8005136 <vTaskDelayUntil+0x62>

	vTaskSuspendAll();
 8005138:	f000 f8e8 	bl	800530c <vTaskSuspendAll>
	{
		/* Minor optimisation.  The tick count cannot change in this
		 block. */
		const TickType_t xConstTickCount = xTickCount;
 800513c:	4b22      	ldr	r3, [pc, #136]	; (80051c8 <vTaskDelayUntil+0xf4>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	623b      	str	r3, [r7, #32]

		/* Generate the tick time at which the task wants to wake. */
		xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	683a      	ldr	r2, [r7, #0]
 8005148:	4413      	add	r3, r2
 800514a:	61fb      	str	r3, [r7, #28]

		if (xConstTickCount < *pxPreviousWakeTime) {
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	6a3a      	ldr	r2, [r7, #32]
 8005152:	429a      	cmp	r2, r3
 8005154:	d20b      	bcs.n	800516e <vTaskDelayUntil+0x9a>
			/* The tick count has overflowed since this function was
			 lasted called.  In this case the only time we should ever
			 actually delay is if the wake time has also	overflowed,
			 and the wake time is greater than the tick time.  When this
			 is the case it is as if neither time had overflowed. */
			if ((xTimeToWake < *pxPreviousWakeTime)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	69fa      	ldr	r2, [r7, #28]
 800515c:	429a      	cmp	r2, r3
 800515e:	d211      	bcs.n	8005184 <vTaskDelayUntil+0xb0>
					&& (xTimeToWake > xConstTickCount)) {
 8005160:	69fa      	ldr	r2, [r7, #28]
 8005162:	6a3b      	ldr	r3, [r7, #32]
 8005164:	429a      	cmp	r2, r3
 8005166:	d90d      	bls.n	8005184 <vTaskDelayUntil+0xb0>
				xShouldDelay = pdTRUE;
 8005168:	2301      	movs	r3, #1
 800516a:	627b      	str	r3, [r7, #36]	; 0x24
 800516c:	e00a      	b.n	8005184 <vTaskDelayUntil+0xb0>
			}
		} else {
			/* The tick time has not overflowed.  In this case we will
			 delay if either the wake time has overflowed, and/or the
			 tick time is less than the wake time. */
			if ((xTimeToWake < *pxPreviousWakeTime)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	69fa      	ldr	r2, [r7, #28]
 8005174:	429a      	cmp	r2, r3
 8005176:	d303      	bcc.n	8005180 <vTaskDelayUntil+0xac>
					|| (xTimeToWake > xConstTickCount)) {
 8005178:	69fa      	ldr	r2, [r7, #28]
 800517a:	6a3b      	ldr	r3, [r7, #32]
 800517c:	429a      	cmp	r2, r3
 800517e:	d901      	bls.n	8005184 <vTaskDelayUntil+0xb0>
				xShouldDelay = pdTRUE;
 8005180:	2301      	movs	r3, #1
 8005182:	627b      	str	r3, [r7, #36]	; 0x24
				mtCOVERAGE_TEST_MARKER();
			}
		}

		/* Update the wake time ready for the next call. */
		*pxPreviousWakeTime = xTimeToWake;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	69fa      	ldr	r2, [r7, #28]
 8005188:	601a      	str	r2, [r3, #0]

		if (xShouldDelay != pdFALSE) {
 800518a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518c:	2b00      	cmp	r3, #0
 800518e:	d006      	beq.n	800519e <vTaskDelayUntil+0xca>
			traceTASK_DELAY_UNTIL( xTimeToWake );

			/* prvAddCurrentTaskToDelayedList() needs the block time, not
			 the time to wake, so subtract the current tick count. */
			prvAddCurrentTaskToDelayedList(xTimeToWake - xConstTickCount,
 8005190:	69fa      	ldr	r2, [r7, #28]
 8005192:	6a3b      	ldr	r3, [r7, #32]
 8005194:	1ad3      	subs	r3, r2, r3
 8005196:	2100      	movs	r1, #0
 8005198:	4618      	mov	r0, r3
 800519a:	f000 fd13 	bl	8005bc4 <prvAddCurrentTaskToDelayedList>
					pdFALSE);
		} else {
			mtCOVERAGE_TEST_MARKER();
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800519e:	f000 f8c3 	bl	8005328 <xTaskResumeAll>
 80051a2:	61b8      	str	r0, [r7, #24]

	/* Force a reschedule if xTaskResumeAll has not already done so, we may
	 have put ourselves to sleep. */
	if (xAlreadyYielded == pdFALSE) {
 80051a4:	69bb      	ldr	r3, [r7, #24]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d107      	bne.n	80051ba <vTaskDelayUntil+0xe6>
		portYIELD_WITHIN_API()
 80051aa:	4b08      	ldr	r3, [pc, #32]	; (80051cc <vTaskDelayUntil+0xf8>)
 80051ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051b0:	601a      	str	r2, [r3, #0]
 80051b2:	f3bf 8f4f 	dsb	sy
 80051b6:	f3bf 8f6f 	isb	sy
		;
	} else {
		mtCOVERAGE_TEST_MARKER();
	}
}
 80051ba:	bf00      	nop
 80051bc:	3728      	adds	r7, #40	; 0x28
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	bf00      	nop
 80051c4:	200005c4 	.word	0x200005c4
 80051c8:	200005a0 	.word	0x200005a0
 80051cc:	e000ed04 	.word	0xe000ed04

080051d0 <vTaskDelay>:
#endif /* INCLUDE_vTaskDelayUntil */
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

void vTaskDelay(const TickType_t xTicksToDelay) {
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b084      	sub	sp, #16
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80051d8:	2300      	movs	r3, #0
 80051da:	60fb      	str	r3, [r7, #12]

	/* A delay time of zero just forces a reschedule. */
	if (xTicksToDelay > (TickType_t) 0U) {
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d017      	beq.n	8005212 <vTaskDelay+0x42>
		configASSERT(uxSchedulerSuspended == 0);
 80051e2:	4b13      	ldr	r3, [pc, #76]	; (8005230 <vTaskDelay+0x60>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d00a      	beq.n	8005200 <vTaskDelay+0x30>
	__asm volatile
 80051ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ee:	f383 8811 	msr	BASEPRI, r3
 80051f2:	f3bf 8f6f 	isb	sy
 80051f6:	f3bf 8f4f 	dsb	sy
 80051fa:	60bb      	str	r3, [r7, #8]
}
 80051fc:	bf00      	nop
 80051fe:	e7fe      	b.n	80051fe <vTaskDelay+0x2e>
		vTaskSuspendAll();
 8005200:	f000 f884 	bl	800530c <vTaskSuspendAll>
			 list or removed from the blocked list until the scheduler
			 is resumed.

			 This task cannot be in an event list as it is the currently
			 executing task. */
			prvAddCurrentTaskToDelayedList(xTicksToDelay, pdFALSE);
 8005204:	2100      	movs	r1, #0
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f000 fcdc 	bl	8005bc4 <prvAddCurrentTaskToDelayedList>
		}
		xAlreadyYielded = xTaskResumeAll();
 800520c:	f000 f88c 	bl	8005328 <xTaskResumeAll>
 8005210:	60f8      	str	r0, [r7, #12]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Force a reschedule if xTaskResumeAll has not already done so, we may
	 have put ourselves to sleep. */
	if (xAlreadyYielded == pdFALSE) {
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d107      	bne.n	8005228 <vTaskDelay+0x58>
		portYIELD_WITHIN_API()
 8005218:	4b06      	ldr	r3, [pc, #24]	; (8005234 <vTaskDelay+0x64>)
 800521a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800521e:	601a      	str	r2, [r3, #0]
 8005220:	f3bf 8f4f 	dsb	sy
 8005224:	f3bf 8f6f 	isb	sy
		;
	} else {
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005228:	bf00      	nop
 800522a:	3710      	adds	r7, #16
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}
 8005230:	200005c4 	.word	0x200005c4
 8005234:	e000ed04 	.word	0xe000ed04

08005238 <vTaskStartScheduler>:
}

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler(void) {
 8005238:	b580      	push	{r7, lr}
 800523a:	b08a      	sub	sp, #40	; 0x28
 800523c:	af04      	add	r7, sp, #16
	BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800523e:	2300      	movs	r3, #0
 8005240:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005242:	2300      	movs	r3, #0
 8005244:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		 address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory(&pxIdleTaskTCBBuffer,
 8005246:	463a      	mov	r2, r7
 8005248:	1d39      	adds	r1, r7, #4
 800524a:	f107 0308 	add.w	r3, r7, #8
 800524e:	4618      	mov	r0, r3
 8005250:	f7fb fe6c 	bl	8000f2c <vApplicationGetIdleTaskMemory>
				&pxIdleTaskStackBuffer, &ulIdleTaskStackSize);
		xIdleTaskHandle = xTaskCreateStatic(prvIdleTask,
 8005254:	6839      	ldr	r1, [r7, #0]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	68ba      	ldr	r2, [r7, #8]
 800525a:	9202      	str	r2, [sp, #8]
 800525c:	9301      	str	r3, [sp, #4]
 800525e:	2300      	movs	r3, #0
 8005260:	9300      	str	r3, [sp, #0]
 8005262:	2300      	movs	r3, #0
 8005264:	460a      	mov	r2, r1
 8005266:	4921      	ldr	r1, [pc, #132]	; (80052ec <vTaskStartScheduler+0xb4>)
 8005268:	4821      	ldr	r0, [pc, #132]	; (80052f0 <vTaskStartScheduler+0xb8>)
 800526a:	f7ff fd89 	bl	8004d80 <xTaskCreateStatic>
 800526e:	4603      	mov	r3, r0
 8005270:	4a20      	ldr	r2, [pc, #128]	; (80052f4 <vTaskStartScheduler+0xbc>)
 8005272:	6013      	str	r3, [r2, #0]
		configIDLE_TASK_NAME, ulIdleTaskStackSize, (void*) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
		portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
		pxIdleTaskStackBuffer, pxIdleTaskTCBBuffer); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if (xIdleTaskHandle != NULL) {
 8005274:	4b1f      	ldr	r3, [pc, #124]	; (80052f4 <vTaskStartScheduler+0xbc>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d002      	beq.n	8005282 <vTaskStartScheduler+0x4a>
			xReturn = pdPASS;
 800527c:	2301      	movs	r3, #1
 800527e:	617b      	str	r3, [r7, #20]
 8005280:	e001      	b.n	8005286 <vTaskStartScheduler+0x4e>
		} else {
			xReturn = pdFAIL;
 8005282:	2300      	movs	r3, #0
 8005284:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if (xReturn == pdPASS) {
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	2b01      	cmp	r3, #1
 800528a:	d11b      	bne.n	80052c4 <vTaskStartScheduler+0x8c>
	__asm volatile
 800528c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005290:	f383 8811 	msr	BASEPRI, r3
 8005294:	f3bf 8f6f 	isb	sy
 8005298:	f3bf 8f4f 	dsb	sy
 800529c:	613b      	str	r3, [r7, #16]
}
 800529e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			 structure specific to the task that will run first.
			 See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			 for additional information. */
			_impure_ptr = &(pxCurrentTCB->xNewLib_reent);
 80052a0:	4b15      	ldr	r3, [pc, #84]	; (80052f8 <vTaskStartScheduler+0xc0>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	334c      	adds	r3, #76	; 0x4c
 80052a6:	4a15      	ldr	r2, [pc, #84]	; (80052fc <vTaskStartScheduler+0xc4>)
 80052a8:	6013      	str	r3, [r2, #0]
		}
#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80052aa:	4b15      	ldr	r3, [pc, #84]	; (8005300 <vTaskStartScheduler+0xc8>)
 80052ac:	f04f 32ff 	mov.w	r2, #4294967295
 80052b0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80052b2:	4b14      	ldr	r3, [pc, #80]	; (8005304 <vTaskStartScheduler+0xcc>)
 80052b4:	2201      	movs	r2, #1
 80052b6:	601a      	str	r2, [r3, #0]
		xTickCount = (TickType_t) configINITIAL_TICK_COUNT;
 80052b8:	4b13      	ldr	r3, [pc, #76]	; (8005308 <vTaskStartScheduler+0xd0>)
 80052ba:	2200      	movs	r2, #0
 80052bc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		 portable interface. */
		if (xPortStartScheduler() != pdFALSE) {
 80052be:	f000 fd6f 	bl	8005da0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	 meaning xIdleTaskHandle is not used anywhere else. */
	(void) xIdleTaskHandle;
}
 80052c2:	e00e      	b.n	80052e2 <vTaskStartScheduler+0xaa>
		configASSERT(xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY);
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ca:	d10a      	bne.n	80052e2 <vTaskStartScheduler+0xaa>
	__asm volatile
 80052cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052d0:	f383 8811 	msr	BASEPRI, r3
 80052d4:	f3bf 8f6f 	isb	sy
 80052d8:	f3bf 8f4f 	dsb	sy
 80052dc:	60fb      	str	r3, [r7, #12]
}
 80052de:	bf00      	nop
 80052e0:	e7fe      	b.n	80052e0 <vTaskStartScheduler+0xa8>
}
 80052e2:	bf00      	nop
 80052e4:	3718      	adds	r7, #24
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}
 80052ea:	bf00      	nop
 80052ec:	08007d18 	.word	0x08007d18
 80052f0:	080058c9 	.word	0x080058c9
 80052f4:	200005c0 	.word	0x200005c0
 80052f8:	2000049c 	.word	0x2000049c
 80052fc:	20000010 	.word	0x20000010
 8005300:	200005bc 	.word	0x200005bc
 8005304:	200005a8 	.word	0x200005a8
 8005308:	200005a0 	.word	0x200005a0

0800530c <vTaskSuspendAll>:
	xSchedulerRunning = pdFALSE;
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll(void) {
 800530c:	b480      	push	{r7}
 800530e:	af00      	add	r7, sp, #0
	 do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	 is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005310:	4b04      	ldr	r3, [pc, #16]	; (8005324 <vTaskSuspendAll+0x18>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	3301      	adds	r3, #1
 8005316:	4a03      	ldr	r2, [pc, #12]	; (8005324 <vTaskSuspendAll+0x18>)
 8005318:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	 the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800531a:	bf00      	nop
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr
 8005324:	200005c4 	.word	0x200005c4

08005328 <xTaskResumeAll>:
	}

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll(void) {
 8005328:	b580      	push	{r7, lr}
 800532a:	b084      	sub	sp, #16
 800532c:	af00      	add	r7, sp, #0
	TCB_t *pxTCB = NULL;
 800532e:	2300      	movs	r3, #0
 8005330:	60fb      	str	r3, [r7, #12]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005332:	2300      	movs	r3, #0
 8005334:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	 previous call to vTaskSuspendAll(). */
	configASSERT(uxSchedulerSuspended);
 8005336:	4b41      	ldr	r3, [pc, #260]	; (800543c <xTaskResumeAll+0x114>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d10a      	bne.n	8005354 <xTaskResumeAll+0x2c>
	__asm volatile
 800533e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005342:	f383 8811 	msr	BASEPRI, r3
 8005346:	f3bf 8f6f 	isb	sy
 800534a:	f3bf 8f4f 	dsb	sy
 800534e:	603b      	str	r3, [r7, #0]
}
 8005350:	bf00      	nop
 8005352:	e7fe      	b.n	8005352 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	 list while the scheduler was suspended.  If this was the case then the
	 removed task will have been added to the xPendingReadyList.  Once the
	 scheduler has been resumed it is safe to move all the pending ready
	 tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005354:	f000 fdc6 	bl	8005ee4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005358:	4b38      	ldr	r3, [pc, #224]	; (800543c <xTaskResumeAll+0x114>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	3b01      	subs	r3, #1
 800535e:	4a37      	ldr	r2, [pc, #220]	; (800543c <xTaskResumeAll+0x114>)
 8005360:	6013      	str	r3, [r2, #0]

		if (uxSchedulerSuspended == (UBaseType_t) pdFALSE) {
 8005362:	4b36      	ldr	r3, [pc, #216]	; (800543c <xTaskResumeAll+0x114>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d161      	bne.n	800542e <xTaskResumeAll+0x106>
			if (uxCurrentNumberOfTasks > (UBaseType_t) 0U) {
 800536a:	4b35      	ldr	r3, [pc, #212]	; (8005440 <xTaskResumeAll+0x118>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d05d      	beq.n	800542e <xTaskResumeAll+0x106>
				/* Move any readied tasks from the pending list into the
				 appropriate ready list. */
				while ( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE) {
 8005372:	e02e      	b.n	80053d2 <xTaskResumeAll+0xaa>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY((&xPendingReadyList)); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005374:	4b33      	ldr	r3, [pc, #204]	; (8005444 <xTaskResumeAll+0x11c>)
 8005376:	68db      	ldr	r3, [r3, #12]
 8005378:	68db      	ldr	r3, [r3, #12]
 800537a:	60fb      	str	r3, [r7, #12]
					(void) uxListRemove(&(pxTCB->xEventListItem));
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	3318      	adds	r3, #24
 8005380:	4618      	mov	r0, r3
 8005382:	f7fe ff8f 	bl	80042a4 <uxListRemove>
					(void) uxListRemove(&(pxTCB->xStateListItem));
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	3304      	adds	r3, #4
 800538a:	4618      	mov	r0, r3
 800538c:	f7fe ff8a 	bl	80042a4 <uxListRemove>
					prvAddTaskToReadyList(pxTCB);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005394:	2201      	movs	r2, #1
 8005396:	409a      	lsls	r2, r3
 8005398:	4b2b      	ldr	r3, [pc, #172]	; (8005448 <xTaskResumeAll+0x120>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4313      	orrs	r3, r2
 800539e:	4a2a      	ldr	r2, [pc, #168]	; (8005448 <xTaskResumeAll+0x120>)
 80053a0:	6013      	str	r3, [r2, #0]
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053a6:	4613      	mov	r3, r2
 80053a8:	009b      	lsls	r3, r3, #2
 80053aa:	4413      	add	r3, r2
 80053ac:	009b      	lsls	r3, r3, #2
 80053ae:	4a27      	ldr	r2, [pc, #156]	; (800544c <xTaskResumeAll+0x124>)
 80053b0:	441a      	add	r2, r3
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	3304      	adds	r3, #4
 80053b6:	4619      	mov	r1, r3
 80053b8:	4610      	mov	r0, r2
 80053ba:	f7fe ff16 	bl	80041ea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					 task then a yield must be performed. */
					if (pxTCB->uxPriority >= pxCurrentTCB->uxPriority) {
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053c2:	4b23      	ldr	r3, [pc, #140]	; (8005450 <xTaskResumeAll+0x128>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d302      	bcc.n	80053d2 <xTaskResumeAll+0xaa>
						xYieldPending = pdTRUE;
 80053cc:	4b21      	ldr	r3, [pc, #132]	; (8005454 <xTaskResumeAll+0x12c>)
 80053ce:	2201      	movs	r2, #1
 80053d0:	601a      	str	r2, [r3, #0]
				while ( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE) {
 80053d2:	4b1c      	ldr	r3, [pc, #112]	; (8005444 <xTaskResumeAll+0x11c>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d1cc      	bne.n	8005374 <xTaskResumeAll+0x4c>
					} else {
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if (pxTCB != NULL) {
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d001      	beq.n	80053e4 <xTaskResumeAll+0xbc>
					 which may have prevented the next unblock time from being
					 re-calculated, in which case re-calculate it now.  Mainly
					 important for low power tickless implementations, where
					 this can prevent an unnecessary exit from low power
					 state. */
					prvResetNextTaskUnblockTime();
 80053e0:	f000 fb2c 	bl	8005a3c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				 they should be processed now.  This ensures the tick count does
				 not	slip, and that any delayed tasks are resumed at the correct
				 time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80053e4:	4b1c      	ldr	r3, [pc, #112]	; (8005458 <xTaskResumeAll+0x130>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	607b      	str	r3, [r7, #4]

					if (xPendedCounts > (TickType_t) 0U) {
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d010      	beq.n	8005412 <xTaskResumeAll+0xea>
						do {
							if (xTaskIncrementTick() != pdFALSE) {
 80053f0:	f000 f846 	bl	8005480 <xTaskIncrementTick>
 80053f4:	4603      	mov	r3, r0
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d002      	beq.n	8005400 <xTaskResumeAll+0xd8>
								xYieldPending = pdTRUE;
 80053fa:	4b16      	ldr	r3, [pc, #88]	; (8005454 <xTaskResumeAll+0x12c>)
 80053fc:	2201      	movs	r2, #1
 80053fe:	601a      	str	r2, [r3, #0]
							} else {
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	3b01      	subs	r3, #1
 8005404:	607b      	str	r3, [r7, #4]
						} while (xPendedCounts > (TickType_t) 0U);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d1f1      	bne.n	80053f0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800540c:	4b12      	ldr	r3, [pc, #72]	; (8005458 <xTaskResumeAll+0x130>)
 800540e:	2200      	movs	r2, #0
 8005410:	601a      	str	r2, [r3, #0]
					} else {
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if (xYieldPending != pdFALSE) {
 8005412:	4b10      	ldr	r3, [pc, #64]	; (8005454 <xTaskResumeAll+0x12c>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d009      	beq.n	800542e <xTaskResumeAll+0x106>
#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800541a:	2301      	movs	r3, #1
 800541c:	60bb      	str	r3, [r7, #8]
					}
#endif
					taskYIELD_IF_USING_PREEMPTION();
 800541e:	4b0f      	ldr	r3, [pc, #60]	; (800545c <xTaskResumeAll+0x134>)
 8005420:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005424:	601a      	str	r2, [r3, #0]
 8005426:	f3bf 8f4f 	dsb	sy
 800542a:	f3bf 8f6f 	isb	sy
			}
		} else {
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800542e:	f000 fd89 	bl	8005f44 <vPortExitCritical>

	return xAlreadyYielded;
 8005432:	68bb      	ldr	r3, [r7, #8]
}
 8005434:	4618      	mov	r0, r3
 8005436:	3710      	adds	r7, #16
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}
 800543c:	200005c4 	.word	0x200005c4
 8005440:	2000059c 	.word	0x2000059c
 8005444:	2000055c 	.word	0x2000055c
 8005448:	200005a4 	.word	0x200005a4
 800544c:	200004a0 	.word	0x200004a0
 8005450:	2000049c 	.word	0x2000049c
 8005454:	200005b0 	.word	0x200005b0
 8005458:	200005ac 	.word	0x200005ac
 800545c:	e000ed04 	.word	0xe000ed04

08005460 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount(void) {
 8005460:	b480      	push	{r7}
 8005462:	b083      	sub	sp, #12
 8005464:	af00      	add	r7, sp, #0
	TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005466:	4b05      	ldr	r3, [pc, #20]	; (800547c <xTaskGetTickCount+0x1c>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	607b      	str	r3, [r7, #4]
	} portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800546c:	687b      	ldr	r3, [r7, #4]
}
 800546e:	4618      	mov	r0, r3
 8005470:	370c      	adds	r7, #12
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr
 800547a:	bf00      	nop
 800547c:	200005a0 	.word	0x200005a0

08005480 <xTaskIncrementTick>:
	}

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick(void) {
 8005480:	b580      	push	{r7, lr}
 8005482:	b086      	sub	sp, #24
 8005484:	af00      	add	r7, sp, #0
	TCB_t *pxTCB;
	TickType_t xItemValue;
	BaseType_t xSwitchRequired = pdFALSE;
 8005486:	2300      	movs	r3, #0
 8005488:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	 Increments the tick then checks to see if the new tick value will cause any
	 tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if (uxSchedulerSuspended == (UBaseType_t) pdFALSE) {
 800548a:	4b4e      	ldr	r3, [pc, #312]	; (80055c4 <xTaskIncrementTick+0x144>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	2b00      	cmp	r3, #0
 8005490:	f040 808e 	bne.w	80055b0 <xTaskIncrementTick+0x130>
		/* Minor optimisation.  The tick count cannot change in this
		 block. */
		const TickType_t xConstTickCount = xTickCount + (TickType_t) 1;
 8005494:	4b4c      	ldr	r3, [pc, #304]	; (80055c8 <xTaskIncrementTick+0x148>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	3301      	adds	r3, #1
 800549a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		 delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800549c:	4a4a      	ldr	r2, [pc, #296]	; (80055c8 <xTaskIncrementTick+0x148>)
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	6013      	str	r3, [r2, #0]

		if (xConstTickCount == (TickType_t) 0U) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d120      	bne.n	80054ea <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80054a8:	4b48      	ldr	r3, [pc, #288]	; (80055cc <xTaskIncrementTick+0x14c>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d00a      	beq.n	80054c8 <xTaskIncrementTick+0x48>
	__asm volatile
 80054b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b6:	f383 8811 	msr	BASEPRI, r3
 80054ba:	f3bf 8f6f 	isb	sy
 80054be:	f3bf 8f4f 	dsb	sy
 80054c2:	603b      	str	r3, [r7, #0]
}
 80054c4:	bf00      	nop
 80054c6:	e7fe      	b.n	80054c6 <xTaskIncrementTick+0x46>
 80054c8:	4b40      	ldr	r3, [pc, #256]	; (80055cc <xTaskIncrementTick+0x14c>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	60fb      	str	r3, [r7, #12]
 80054ce:	4b40      	ldr	r3, [pc, #256]	; (80055d0 <xTaskIncrementTick+0x150>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a3e      	ldr	r2, [pc, #248]	; (80055cc <xTaskIncrementTick+0x14c>)
 80054d4:	6013      	str	r3, [r2, #0]
 80054d6:	4a3e      	ldr	r2, [pc, #248]	; (80055d0 <xTaskIncrementTick+0x150>)
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	6013      	str	r3, [r2, #0]
 80054dc:	4b3d      	ldr	r3, [pc, #244]	; (80055d4 <xTaskIncrementTick+0x154>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	3301      	adds	r3, #1
 80054e2:	4a3c      	ldr	r2, [pc, #240]	; (80055d4 <xTaskIncrementTick+0x154>)
 80054e4:	6013      	str	r3, [r2, #0]
 80054e6:	f000 faa9 	bl	8005a3c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		 the	queue in the order of their wake time - meaning once one task
		 has been found whose block time has not expired there is no need to
		 look any further down the list. */
		if (xConstTickCount >= xNextTaskUnblockTime) {
 80054ea:	4b3b      	ldr	r3, [pc, #236]	; (80055d8 <xTaskIncrementTick+0x158>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	693a      	ldr	r2, [r7, #16]
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d348      	bcc.n	8005586 <xTaskIncrementTick+0x106>
			for (;;) {
				if ( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE) {
 80054f4:	4b35      	ldr	r3, [pc, #212]	; (80055cc <xTaskIncrementTick+0x14c>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d104      	bne.n	8005508 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					 to the maximum possible value so it is extremely
					 unlikely that the
					 if( xTickCount >= xNextTaskUnblockTime ) test will pass
					 next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054fe:	4b36      	ldr	r3, [pc, #216]	; (80055d8 <xTaskIncrementTick+0x158>)
 8005500:	f04f 32ff 	mov.w	r2, #4294967295
 8005504:	601a      	str	r2, [r3, #0]
					break;
 8005506:	e03e      	b.n	8005586 <xTaskIncrementTick+0x106>
				} else {
					/* The delayed list is not empty, get the value of the
					 item at the head of the delayed list.  This is the time
					 at which the task at the head of the delayed list must
					 be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY(pxDelayedTaskList); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005508:	4b30      	ldr	r3, [pc, #192]	; (80055cc <xTaskIncrementTick+0x14c>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	68db      	ldr	r3, [r3, #12]
 800550e:	68db      	ldr	r3, [r3, #12]
 8005510:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE(
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	607b      	str	r3, [r7, #4]
							&(pxTCB->xStateListItem));

					if (xConstTickCount < xItemValue) {
 8005518:	693a      	ldr	r2, [r7, #16]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	429a      	cmp	r2, r3
 800551e:	d203      	bcs.n	8005528 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						 item value is the time at which the task at the head
						 of the blocked list must be removed from the Blocked
						 state -	so record the item value in
						 xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005520:	4a2d      	ldr	r2, [pc, #180]	; (80055d8 <xTaskIncrementTick+0x158>)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005526:	e02e      	b.n	8005586 <xTaskIncrementTick+0x106>
					} else {
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					(void) uxListRemove(&(pxTCB->xStateListItem));
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	3304      	adds	r3, #4
 800552c:	4618      	mov	r0, r3
 800552e:	f7fe feb9 	bl	80042a4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					 it from the event list. */
					if ( listLIST_ITEM_CONTAINER(
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005536:	2b00      	cmp	r3, #0
 8005538:	d004      	beq.n	8005544 <xTaskIncrementTick+0xc4>
							&(pxTCB->xEventListItem)) != NULL) {
						(void) uxListRemove(&(pxTCB->xEventListItem));
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	3318      	adds	r3, #24
 800553e:	4618      	mov	r0, r3
 8005540:	f7fe feb0 	bl	80042a4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					 list. */
					prvAddTaskToReadyList(pxTCB);
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005548:	2201      	movs	r2, #1
 800554a:	409a      	lsls	r2, r3
 800554c:	4b23      	ldr	r3, [pc, #140]	; (80055dc <xTaskIncrementTick+0x15c>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4313      	orrs	r3, r2
 8005552:	4a22      	ldr	r2, [pc, #136]	; (80055dc <xTaskIncrementTick+0x15c>)
 8005554:	6013      	str	r3, [r2, #0]
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800555a:	4613      	mov	r3, r2
 800555c:	009b      	lsls	r3, r3, #2
 800555e:	4413      	add	r3, r2
 8005560:	009b      	lsls	r3, r3, #2
 8005562:	4a1f      	ldr	r2, [pc, #124]	; (80055e0 <xTaskIncrementTick+0x160>)
 8005564:	441a      	add	r2, r3
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	3304      	adds	r3, #4
 800556a:	4619      	mov	r1, r3
 800556c:	4610      	mov	r0, r2
 800556e:	f7fe fe3c 	bl	80041ea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						 only be performed if the unblocked task has a
						 priority that is equal to or higher than the
						 currently executing task. */
						if (pxTCB->uxPriority >= pxCurrentTCB->uxPriority) {
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005576:	4b1b      	ldr	r3, [pc, #108]	; (80055e4 <xTaskIncrementTick+0x164>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800557c:	429a      	cmp	r2, r3
 800557e:	d3b9      	bcc.n	80054f4 <xTaskIncrementTick+0x74>
							xSwitchRequired = pdTRUE;
 8005580:	2301      	movs	r3, #1
 8005582:	617b      	str	r3, [r7, #20]
				if ( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE) {
 8005584:	e7b6      	b.n	80054f4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		 processing time (time slice) if preemption is on, and the application
		 writer has not explicitly turned time slicing off. */
#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if ( listCURRENT_LIST_LENGTH(
 8005586:	4b17      	ldr	r3, [pc, #92]	; (80055e4 <xTaskIncrementTick+0x164>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800558c:	4914      	ldr	r1, [pc, #80]	; (80055e0 <xTaskIncrementTick+0x160>)
 800558e:	4613      	mov	r3, r2
 8005590:	009b      	lsls	r3, r3, #2
 8005592:	4413      	add	r3, r2
 8005594:	009b      	lsls	r3, r3, #2
 8005596:	440b      	add	r3, r1
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	2b01      	cmp	r3, #1
 800559c:	d901      	bls.n	80055a2 <xTaskIncrementTick+0x122>
					&(pxReadyTasksLists[pxCurrentTCB->uxPriority]))
					> (UBaseType_t) 1) {
				xSwitchRequired = pdTRUE;
 800559e:	2301      	movs	r3, #1
 80055a0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

#if ( configUSE_PREEMPTION == 1 )
		{
			if (xYieldPending != pdFALSE) {
 80055a2:	4b11      	ldr	r3, [pc, #68]	; (80055e8 <xTaskIncrementTick+0x168>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d007      	beq.n	80055ba <xTaskIncrementTick+0x13a>
				xSwitchRequired = pdTRUE;
 80055aa:	2301      	movs	r3, #1
 80055ac:	617b      	str	r3, [r7, #20]
 80055ae:	e004      	b.n	80055ba <xTaskIncrementTick+0x13a>
				mtCOVERAGE_TEST_MARKER();
			}
		}
#endif /* configUSE_PREEMPTION */
	} else {
		++xPendedTicks;
 80055b0:	4b0e      	ldr	r3, [pc, #56]	; (80055ec <xTaskIncrementTick+0x16c>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	3301      	adds	r3, #1
 80055b6:	4a0d      	ldr	r2, [pc, #52]	; (80055ec <xTaskIncrementTick+0x16c>)
 80055b8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80055ba:	697b      	ldr	r3, [r7, #20]
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3718      	adds	r7, #24
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}
 80055c4:	200005c4 	.word	0x200005c4
 80055c8:	200005a0 	.word	0x200005a0
 80055cc:	20000554 	.word	0x20000554
 80055d0:	20000558 	.word	0x20000558
 80055d4:	200005b4 	.word	0x200005b4
 80055d8:	200005bc 	.word	0x200005bc
 80055dc:	200005a4 	.word	0x200005a4
 80055e0:	200004a0 	.word	0x200004a0
 80055e4:	2000049c 	.word	0x2000049c
 80055e8:	200005b0 	.word	0x200005b0
 80055ec:	200005ac 	.word	0x200005ac

080055f0 <vTaskSwitchContext>:
	}

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext(void) {
 80055f0:	b480      	push	{r7}
 80055f2:	b087      	sub	sp, #28
 80055f4:	af00      	add	r7, sp, #0
	if (uxSchedulerSuspended != (UBaseType_t) pdFALSE) {
 80055f6:	4b29      	ldr	r3, [pc, #164]	; (800569c <vTaskSwitchContext+0xac>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d003      	beq.n	8005606 <vTaskSwitchContext+0x16>
		/* The scheduler is currently suspended - do not allow a context
		 switch. */
		xYieldPending = pdTRUE;
 80055fe:	4b28      	ldr	r3, [pc, #160]	; (80056a0 <vTaskSwitchContext+0xb0>)
 8005600:	2201      	movs	r2, #1
 8005602:	601a      	str	r2, [r3, #0]
			 for additional information. */
			_impure_ptr = &(pxCurrentTCB->xNewLib_reent);
		}
#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005604:	e044      	b.n	8005690 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8005606:	4b26      	ldr	r3, [pc, #152]	; (80056a0 <vTaskSwitchContext+0xb0>)
 8005608:	2200      	movs	r2, #0
 800560a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800560c:	4b25      	ldr	r3, [pc, #148]	; (80056a4 <vTaskSwitchContext+0xb4>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	60fb      	str	r3, [r7, #12]
	__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	fab3 f383 	clz	r3, r3
 8005618:	72fb      	strb	r3, [r7, #11]
	return ucReturn;
 800561a:	7afb      	ldrb	r3, [r7, #11]
 800561c:	f1c3 031f 	rsb	r3, r3, #31
 8005620:	617b      	str	r3, [r7, #20]
 8005622:	4921      	ldr	r1, [pc, #132]	; (80056a8 <vTaskSwitchContext+0xb8>)
 8005624:	697a      	ldr	r2, [r7, #20]
 8005626:	4613      	mov	r3, r2
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	4413      	add	r3, r2
 800562c:	009b      	lsls	r3, r3, #2
 800562e:	440b      	add	r3, r1
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d10a      	bne.n	800564c <vTaskSwitchContext+0x5c>
	__asm volatile
 8005636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800563a:	f383 8811 	msr	BASEPRI, r3
 800563e:	f3bf 8f6f 	isb	sy
 8005642:	f3bf 8f4f 	dsb	sy
 8005646:	607b      	str	r3, [r7, #4]
}
 8005648:	bf00      	nop
 800564a:	e7fe      	b.n	800564a <vTaskSwitchContext+0x5a>
 800564c:	697a      	ldr	r2, [r7, #20]
 800564e:	4613      	mov	r3, r2
 8005650:	009b      	lsls	r3, r3, #2
 8005652:	4413      	add	r3, r2
 8005654:	009b      	lsls	r3, r3, #2
 8005656:	4a14      	ldr	r2, [pc, #80]	; (80056a8 <vTaskSwitchContext+0xb8>)
 8005658:	4413      	add	r3, r2
 800565a:	613b      	str	r3, [r7, #16]
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	685a      	ldr	r2, [r3, #4]
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	605a      	str	r2, [r3, #4]
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	685a      	ldr	r2, [r3, #4]
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	3308      	adds	r3, #8
 800566e:	429a      	cmp	r2, r3
 8005670:	d104      	bne.n	800567c <vTaskSwitchContext+0x8c>
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	685a      	ldr	r2, [r3, #4]
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	605a      	str	r2, [r3, #4]
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	68db      	ldr	r3, [r3, #12]
 8005682:	4a0a      	ldr	r2, [pc, #40]	; (80056ac <vTaskSwitchContext+0xbc>)
 8005684:	6013      	str	r3, [r2, #0]
			_impure_ptr = &(pxCurrentTCB->xNewLib_reent);
 8005686:	4b09      	ldr	r3, [pc, #36]	; (80056ac <vTaskSwitchContext+0xbc>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	334c      	adds	r3, #76	; 0x4c
 800568c:	4a08      	ldr	r2, [pc, #32]	; (80056b0 <vTaskSwitchContext+0xc0>)
 800568e:	6013      	str	r3, [r2, #0]
}
 8005690:	bf00      	nop
 8005692:	371c      	adds	r7, #28
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr
 800569c:	200005c4 	.word	0x200005c4
 80056a0:	200005b0 	.word	0x200005b0
 80056a4:	200005a4 	.word	0x200005a4
 80056a8:	200004a0 	.word	0x200004a0
 80056ac:	2000049c 	.word	0x2000049c
 80056b0:	20000010 	.word	0x20000010

080056b4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList(List_t *const pxEventList,
		const TickType_t xTicksToWait) {
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b084      	sub	sp, #16
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
 80056bc:	6039      	str	r1, [r7, #0]
	configASSERT(pxEventList);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d10a      	bne.n	80056da <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80056c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c8:	f383 8811 	msr	BASEPRI, r3
 80056cc:	f3bf 8f6f 	isb	sy
 80056d0:	f3bf 8f4f 	dsb	sy
 80056d4:	60fb      	str	r3, [r7, #12]
}
 80056d6:	bf00      	nop
 80056d8:	e7fe      	b.n	80056d8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	 This is placed in the list in priority order so the highest priority task
	 is the first to be woken by the event.  The queue that contains the event
	 list is locked, preventing simultaneous access from interrupts. */
	vListInsert(pxEventList, &(pxCurrentTCB->xEventListItem));
 80056da:	4b07      	ldr	r3, [pc, #28]	; (80056f8 <vTaskPlaceOnEventList+0x44>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	3318      	adds	r3, #24
 80056e0:	4619      	mov	r1, r3
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f7fe fda5 	bl	8004232 <vListInsert>

	prvAddCurrentTaskToDelayedList(xTicksToWait, pdTRUE);
 80056e8:	2101      	movs	r1, #1
 80056ea:	6838      	ldr	r0, [r7, #0]
 80056ec:	f000 fa6a 	bl	8005bc4 <prvAddCurrentTaskToDelayedList>
}
 80056f0:	bf00      	nop
 80056f2:	3710      	adds	r7, #16
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}
 80056f8:	2000049c 	.word	0x2000049c

080056fc <xTaskRemoveFromEventList>:
	}

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList(const List_t *const pxEventList) {
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b086      	sub	sp, #24
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
	 get called - the lock count on the queue will get modified instead.  This
	 means exclusive access to the event list is guaranteed here.

	 This function assumes that a check has already been made to ensure that
	 pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY(pxEventList); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	68db      	ldr	r3, [r3, #12]
 8005708:	68db      	ldr	r3, [r3, #12]
 800570a:	613b      	str	r3, [r7, #16]
	configASSERT(pxUnblockedTCB);
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d10a      	bne.n	8005728 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005716:	f383 8811 	msr	BASEPRI, r3
 800571a:	f3bf 8f6f 	isb	sy
 800571e:	f3bf 8f4f 	dsb	sy
 8005722:	60fb      	str	r3, [r7, #12]
}
 8005724:	bf00      	nop
 8005726:	e7fe      	b.n	8005726 <xTaskRemoveFromEventList+0x2a>
	(void) uxListRemove(&(pxUnblockedTCB->xEventListItem));
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	3318      	adds	r3, #24
 800572c:	4618      	mov	r0, r3
 800572e:	f7fe fdb9 	bl	80042a4 <uxListRemove>

	if (uxSchedulerSuspended == (UBaseType_t) pdFALSE) {
 8005732:	4b1d      	ldr	r3, [pc, #116]	; (80057a8 <xTaskRemoveFromEventList+0xac>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d11c      	bne.n	8005774 <xTaskRemoveFromEventList+0x78>
		(void) uxListRemove(&(pxUnblockedTCB->xStateListItem));
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	3304      	adds	r3, #4
 800573e:	4618      	mov	r0, r3
 8005740:	f7fe fdb0 	bl	80042a4 <uxListRemove>
		prvAddTaskToReadyList(pxUnblockedTCB);
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005748:	2201      	movs	r2, #1
 800574a:	409a      	lsls	r2, r3
 800574c:	4b17      	ldr	r3, [pc, #92]	; (80057ac <xTaskRemoveFromEventList+0xb0>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4313      	orrs	r3, r2
 8005752:	4a16      	ldr	r2, [pc, #88]	; (80057ac <xTaskRemoveFromEventList+0xb0>)
 8005754:	6013      	str	r3, [r2, #0]
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800575a:	4613      	mov	r3, r2
 800575c:	009b      	lsls	r3, r3, #2
 800575e:	4413      	add	r3, r2
 8005760:	009b      	lsls	r3, r3, #2
 8005762:	4a13      	ldr	r2, [pc, #76]	; (80057b0 <xTaskRemoveFromEventList+0xb4>)
 8005764:	441a      	add	r2, r3
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	3304      	adds	r3, #4
 800576a:	4619      	mov	r1, r3
 800576c:	4610      	mov	r0, r2
 800576e:	f7fe fd3c 	bl	80041ea <vListInsertEnd>
 8005772:	e005      	b.n	8005780 <xTaskRemoveFromEventList+0x84>
		}
		#endif
	} else {
		/* The delayed and ready lists cannot be accessed, so hold this task
		 pending until the scheduler is resumed. */
		vListInsertEnd(&(xPendingReadyList), &(pxUnblockedTCB->xEventListItem));
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	3318      	adds	r3, #24
 8005778:	4619      	mov	r1, r3
 800577a:	480e      	ldr	r0, [pc, #56]	; (80057b4 <xTaskRemoveFromEventList+0xb8>)
 800577c:	f7fe fd35 	bl	80041ea <vListInsertEnd>
	}

	if (pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority) {
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005784:	4b0c      	ldr	r3, [pc, #48]	; (80057b8 <xTaskRemoveFromEventList+0xbc>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800578a:	429a      	cmp	r2, r3
 800578c:	d905      	bls.n	800579a <xTaskRemoveFromEventList+0x9e>
		/* Return true if the task removed from the event list has a higher
		 priority than the calling task.  This allows the calling task to know if
		 it should force a context switch now. */
		xReturn = pdTRUE;
 800578e:	2301      	movs	r3, #1
 8005790:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		 "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005792:	4b0a      	ldr	r3, [pc, #40]	; (80057bc <xTaskRemoveFromEventList+0xc0>)
 8005794:	2201      	movs	r2, #1
 8005796:	601a      	str	r2, [r3, #0]
 8005798:	e001      	b.n	800579e <xTaskRemoveFromEventList+0xa2>
	} else {
		xReturn = pdFALSE;
 800579a:	2300      	movs	r3, #0
 800579c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800579e:	697b      	ldr	r3, [r7, #20]
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	3718      	adds	r7, #24
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}
 80057a8:	200005c4 	.word	0x200005c4
 80057ac:	200005a4 	.word	0x200005a4
 80057b0:	200004a0 	.word	0x200004a0
 80057b4:	2000055c 	.word	0x2000055c
 80057b8:	2000049c 	.word	0x2000049c
 80057bc:	200005b0 	.word	0x200005b0

080057c0 <vTaskInternalSetTimeOutState>:
	}
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState(TimeOut_t *const pxTimeOut) {
 80057c0:	b480      	push	{r7}
 80057c2:	b083      	sub	sp, #12
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80057c8:	4b06      	ldr	r3, [pc, #24]	; (80057e4 <vTaskInternalSetTimeOutState+0x24>)
 80057ca:	681a      	ldr	r2, [r3, #0]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80057d0:	4b05      	ldr	r3, [pc, #20]	; (80057e8 <vTaskInternalSetTimeOutState+0x28>)
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	605a      	str	r2, [r3, #4]
}
 80057d8:	bf00      	nop
 80057da:	370c      	adds	r7, #12
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr
 80057e4:	200005b4 	.word	0x200005b4
 80057e8:	200005a0 	.word	0x200005a0

080057ec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut(TimeOut_t *const pxTimeOut,
		TickType_t *const pxTicksToWait) {
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b088      	sub	sp, #32
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;

	configASSERT(pxTimeOut);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d10a      	bne.n	8005812 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80057fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005800:	f383 8811 	msr	BASEPRI, r3
 8005804:	f3bf 8f6f 	isb	sy
 8005808:	f3bf 8f4f 	dsb	sy
 800580c:	613b      	str	r3, [r7, #16]
}
 800580e:	bf00      	nop
 8005810:	e7fe      	b.n	8005810 <xTaskCheckForTimeOut+0x24>
	configASSERT(pxTicksToWait);
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d10a      	bne.n	800582e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800581c:	f383 8811 	msr	BASEPRI, r3
 8005820:	f3bf 8f6f 	isb	sy
 8005824:	f3bf 8f4f 	dsb	sy
 8005828:	60fb      	str	r3, [r7, #12]
}
 800582a:	bf00      	nop
 800582c:	e7fe      	b.n	800582c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800582e:	f000 fb59 	bl	8005ee4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005832:	4b1d      	ldr	r3, [pc, #116]	; (80058a8 <xTaskCheckForTimeOut+0xbc>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount
				- pxTimeOut->xTimeOnEntering;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	685b      	ldr	r3, [r3, #4]
		const TickType_t xElapsedTime = xConstTickCount
 800583c:	69ba      	ldr	r2, [r7, #24]
 800583e:	1ad3      	subs	r3, r2, r3
 8005840:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

#if ( INCLUDE_vTaskSuspend == 1 )
		if (*pxTicksToWait == portMAX_DELAY) {
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800584a:	d102      	bne.n	8005852 <xTaskCheckForTimeOut+0x66>
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time
			 specified is the maximum block time then the task should block
			 indefinitely, and therefore never time out. */
			xReturn = pdFALSE;
 800584c:	2300      	movs	r3, #0
 800584e:	61fb      	str	r3, [r7, #28]
 8005850:	e023      	b.n	800589a <xTaskCheckForTimeOut+0xae>
		} else
#endif

		if ((xNumOfOverflows != pxTimeOut->xOverflowCount)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	4b15      	ldr	r3, [pc, #84]	; (80058ac <xTaskCheckForTimeOut+0xc0>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	429a      	cmp	r2, r3
 800585c:	d007      	beq.n	800586e <xTaskCheckForTimeOut+0x82>
				&& (xConstTickCount >= pxTimeOut->xTimeOnEntering)) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	69ba      	ldr	r2, [r7, #24]
 8005864:	429a      	cmp	r2, r3
 8005866:	d302      	bcc.n	800586e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			 vTaskSetTimeout() was called, but has also overflowed since
			 vTaskSetTimeOut() was called.  It must have wrapped all the way
			 around and gone past again. This passed since vTaskSetTimeout()
			 was called. */
			xReturn = pdTRUE;
 8005868:	2301      	movs	r3, #1
 800586a:	61fb      	str	r3, [r7, #28]
 800586c:	e015      	b.n	800589a <xTaskCheckForTimeOut+0xae>
		} else if (xElapsedTime < *pxTicksToWait) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	697a      	ldr	r2, [r7, #20]
 8005874:	429a      	cmp	r2, r3
 8005876:	d20b      	bcs.n	8005890 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	1ad2      	subs	r2, r2, r3
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState(pxTimeOut);
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f7ff ff9b 	bl	80057c0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800588a:	2300      	movs	r3, #0
 800588c:	61fb      	str	r3, [r7, #28]
 800588e:	e004      	b.n	800589a <xTaskCheckForTimeOut+0xae>
		} else {
			*pxTicksToWait = 0;
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	2200      	movs	r2, #0
 8005894:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005896:	2301      	movs	r3, #1
 8005898:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800589a:	f000 fb53 	bl	8005f44 <vPortExitCritical>

	return xReturn;
 800589e:	69fb      	ldr	r3, [r7, #28]
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3720      	adds	r7, #32
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}
 80058a8:	200005a0 	.word	0x200005a0
 80058ac:	200005b4 	.word	0x200005b4

080058b0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield(void) {
 80058b0:	b480      	push	{r7}
 80058b2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80058b4:	4b03      	ldr	r3, [pc, #12]	; (80058c4 <vTaskMissedYield+0x14>)
 80058b6:	2201      	movs	r2, #1
 80058b8:	601a      	str	r2, [r3, #0]
}
 80058ba:	bf00      	nop
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr
 80058c4:	200005b0 	.word	0x200005b0

080058c8 <prvIdleTask>:
 * language extensions.  The equivalent prototype for this function is:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters ) {
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b082      	sub	sp, #8
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
	portALLOCATE_SECURE_CONTEXT( configMINIMAL_SECURE_STACK_SIZE );

	for (;;) {
		/* See if any tasks have deleted themselves - if so then the idle task
		 is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80058d0:	f000 f852 	bl	8005978 <prvCheckTasksWaitingTermination>

			 A critical region is not required here as we are just reading from
			 the list, and an occasional incorrect value will not matter.  If
			 the ready list at the idle priority contains more than one task
			 then a task other than the idle task is ready to execute. */
			if ( listCURRENT_LIST_LENGTH(
 80058d4:	4b06      	ldr	r3, [pc, #24]	; (80058f0 <prvIdleTask+0x28>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d9f9      	bls.n	80058d0 <prvIdleTask+0x8>
					&( pxReadyTasksLists[ tskIDLE_PRIORITY ] ))
					> (UBaseType_t) 1) {
				taskYIELD();
 80058dc:	4b05      	ldr	r3, [pc, #20]	; (80058f4 <prvIdleTask+0x2c>)
 80058de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058e2:	601a      	str	r2, [r3, #0]
 80058e4:	f3bf 8f4f 	dsb	sy
 80058e8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80058ec:	e7f0      	b.n	80058d0 <prvIdleTask+0x8>
 80058ee:	bf00      	nop
 80058f0:	200004a0 	.word	0x200004a0
 80058f4:	e000ed04 	.word	0xe000ed04

080058f8 <prvInitialiseTaskLists>:
	}

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists(void) {
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b082      	sub	sp, #8
 80058fc:	af00      	add	r7, sp, #0
	UBaseType_t uxPriority;

	for (uxPriority = (UBaseType_t) 0U;
 80058fe:	2300      	movs	r3, #0
 8005900:	607b      	str	r3, [r7, #4]
 8005902:	e00c      	b.n	800591e <prvInitialiseTaskLists+0x26>
			uxPriority < (UBaseType_t) configMAX_PRIORITIES; uxPriority++) {
		vListInitialise(&(pxReadyTasksLists[uxPriority]));
 8005904:	687a      	ldr	r2, [r7, #4]
 8005906:	4613      	mov	r3, r2
 8005908:	009b      	lsls	r3, r3, #2
 800590a:	4413      	add	r3, r2
 800590c:	009b      	lsls	r3, r3, #2
 800590e:	4a12      	ldr	r2, [pc, #72]	; (8005958 <prvInitialiseTaskLists+0x60>)
 8005910:	4413      	add	r3, r2
 8005912:	4618      	mov	r0, r3
 8005914:	f7fe fc3c 	bl	8004190 <vListInitialise>
			uxPriority < (UBaseType_t) configMAX_PRIORITIES; uxPriority++) {
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	3301      	adds	r3, #1
 800591c:	607b      	str	r3, [r7, #4]
	for (uxPriority = (UBaseType_t) 0U;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2b06      	cmp	r3, #6
 8005922:	d9ef      	bls.n	8005904 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise(&xDelayedTaskList1);
 8005924:	480d      	ldr	r0, [pc, #52]	; (800595c <prvInitialiseTaskLists+0x64>)
 8005926:	f7fe fc33 	bl	8004190 <vListInitialise>
	vListInitialise(&xDelayedTaskList2);
 800592a:	480d      	ldr	r0, [pc, #52]	; (8005960 <prvInitialiseTaskLists+0x68>)
 800592c:	f7fe fc30 	bl	8004190 <vListInitialise>
	vListInitialise(&xPendingReadyList);
 8005930:	480c      	ldr	r0, [pc, #48]	; (8005964 <prvInitialiseTaskLists+0x6c>)
 8005932:	f7fe fc2d 	bl	8004190 <vListInitialise>

#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise(&xTasksWaitingTermination);
 8005936:	480c      	ldr	r0, [pc, #48]	; (8005968 <prvInitialiseTaskLists+0x70>)
 8005938:	f7fe fc2a 	bl	8004190 <vListInitialise>
	}
#endif /* INCLUDE_vTaskDelete */

#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise(&xSuspendedTaskList);
 800593c:	480b      	ldr	r0, [pc, #44]	; (800596c <prvInitialiseTaskLists+0x74>)
 800593e:	f7fe fc27 	bl	8004190 <vListInitialise>
	}
#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	 using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005942:	4b0b      	ldr	r3, [pc, #44]	; (8005970 <prvInitialiseTaskLists+0x78>)
 8005944:	4a05      	ldr	r2, [pc, #20]	; (800595c <prvInitialiseTaskLists+0x64>)
 8005946:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005948:	4b0a      	ldr	r3, [pc, #40]	; (8005974 <prvInitialiseTaskLists+0x7c>)
 800594a:	4a05      	ldr	r2, [pc, #20]	; (8005960 <prvInitialiseTaskLists+0x68>)
 800594c:	601a      	str	r2, [r3, #0]
}
 800594e:	bf00      	nop
 8005950:	3708      	adds	r7, #8
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}
 8005956:	bf00      	nop
 8005958:	200004a0 	.word	0x200004a0
 800595c:	2000052c 	.word	0x2000052c
 8005960:	20000540 	.word	0x20000540
 8005964:	2000055c 	.word	0x2000055c
 8005968:	20000570 	.word	0x20000570
 800596c:	20000588 	.word	0x20000588
 8005970:	20000554 	.word	0x20000554
 8005974:	20000558 	.word	0x20000558

08005978 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination(void) {
 8005978:	b580      	push	{r7, lr}
 800597a:	b082      	sub	sp, #8
 800597c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		 being called too often in the idle task. */
		while (uxDeletedTasksWaitingCleanUp > (UBaseType_t) 0U) {
 800597e:	e019      	b.n	80059b4 <prvCheckTasksWaitingTermination+0x3c>
			taskENTER_CRITICAL();
 8005980:	f000 fab0 	bl	8005ee4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY(
 8005984:	4b10      	ldr	r3, [pc, #64]	; (80059c8 <prvCheckTasksWaitingTermination+0x50>)
 8005986:	68db      	ldr	r3, [r3, #12]
 8005988:	68db      	ldr	r3, [r3, #12]
 800598a:	607b      	str	r3, [r7, #4]
						(&xTasksWaitingTermination)); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
				(void) uxListRemove(&(pxTCB->xStateListItem));
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	3304      	adds	r3, #4
 8005990:	4618      	mov	r0, r3
 8005992:	f7fe fc87 	bl	80042a4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005996:	4b0d      	ldr	r3, [pc, #52]	; (80059cc <prvCheckTasksWaitingTermination+0x54>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	3b01      	subs	r3, #1
 800599c:	4a0b      	ldr	r2, [pc, #44]	; (80059cc <prvCheckTasksWaitingTermination+0x54>)
 800599e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80059a0:	4b0b      	ldr	r3, [pc, #44]	; (80059d0 <prvCheckTasksWaitingTermination+0x58>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	3b01      	subs	r3, #1
 80059a6:	4a0a      	ldr	r2, [pc, #40]	; (80059d0 <prvCheckTasksWaitingTermination+0x58>)
 80059a8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80059aa:	f000 facb 	bl	8005f44 <vPortExitCritical>

			prvDeleteTCB(pxTCB);
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f000 f810 	bl	80059d4 <prvDeleteTCB>
		while (uxDeletedTasksWaitingCleanUp > (UBaseType_t) 0U) {
 80059b4:	4b06      	ldr	r3, [pc, #24]	; (80059d0 <prvCheckTasksWaitingTermination+0x58>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d1e1      	bne.n	8005980 <prvCheckTasksWaitingTermination+0x8>
		}
	}
#endif /* INCLUDE_vTaskDelete */
}
 80059bc:	bf00      	nop
 80059be:	bf00      	nop
 80059c0:	3708      	adds	r7, #8
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}
 80059c6:	bf00      	nop
 80059c8:	20000570 	.word	0x20000570
 80059cc:	2000059c 	.word	0x2000059c
 80059d0:	20000584 	.word	0x20000584

080059d4 <prvDeleteTCB>:
#endif /* INCLUDE_uxTaskGetStackHighWaterMark */
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

static void prvDeleteTCB(TCB_t *pxTCB) {
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b084      	sub	sp, #16
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
	 to the task to free any memory allocated at the application level.
	 See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
	 for additional information. */
#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		_reclaim_reent(&(pxTCB->xNewLib_reent));
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	334c      	adds	r3, #76	; 0x4c
 80059e0:	4618      	mov	r0, r3
 80059e2:	f000 ffdd 	bl	80069a0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
	{
		/* The task could have been allocated statically or dynamically, so
		 check what was statically allocated before trying to free the
		 memory. */
		if (pxTCB->ucStaticallyAllocated
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d108      	bne.n	8005a02 <prvDeleteTCB+0x2e>
				== tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB) {
			/* Both the stack and TCB were allocated dynamically, so both
			 must be freed. */
			vPortFree(pxTCB->pxStack);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059f4:	4618      	mov	r0, r3
 80059f6:	f000 fc63 	bl	80062c0 <vPortFree>
			vPortFree(pxTCB);
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f000 fc60 	bl	80062c0 <vPortFree>
			configASSERT(
					pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB); mtCOVERAGE_TEST_MARKER();
		}
	}
#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8005a00:	e018      	b.n	8005a34 <prvDeleteTCB+0x60>
		} else if (pxTCB->ucStaticallyAllocated
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	d103      	bne.n	8005a14 <prvDeleteTCB+0x40>
			vPortFree(pxTCB);
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f000 fc57 	bl	80062c0 <vPortFree>
}
 8005a12:	e00f      	b.n	8005a34 <prvDeleteTCB+0x60>
			configASSERT(
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005a1a:	2b02      	cmp	r3, #2
 8005a1c:	d00a      	beq.n	8005a34 <prvDeleteTCB+0x60>
	__asm volatile
 8005a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a22:	f383 8811 	msr	BASEPRI, r3
 8005a26:	f3bf 8f6f 	isb	sy
 8005a2a:	f3bf 8f4f 	dsb	sy
 8005a2e:	60fb      	str	r3, [r7, #12]
}
 8005a30:	bf00      	nop
 8005a32:	e7fe      	b.n	8005a32 <prvDeleteTCB+0x5e>
}
 8005a34:	bf00      	nop
 8005a36:	3710      	adds	r7, #16
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}

08005a3c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime(void) {
 8005a3c:	b480      	push	{r7}
 8005a3e:	b083      	sub	sp, #12
 8005a40:	af00      	add	r7, sp, #0
	TCB_t *pxTCB;

	if ( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE) {
 8005a42:	4b0c      	ldr	r3, [pc, #48]	; (8005a74 <prvResetNextTaskUnblockTime+0x38>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d104      	bne.n	8005a56 <prvResetNextTaskUnblockTime+0x1a>
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		 the maximum possible value so it is	extremely unlikely that the
		 if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		 there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005a4c:	4b0a      	ldr	r3, [pc, #40]	; (8005a78 <prvResetNextTaskUnblockTime+0x3c>)
 8005a4e:	f04f 32ff 	mov.w	r2, #4294967295
 8005a52:	601a      	str	r2, [r3, #0]
		 from the Blocked state. */
		(pxTCB) = listGET_OWNER_OF_HEAD_ENTRY(pxDelayedTaskList); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE(
				&((pxTCB)->xStateListItem));
	}
}
 8005a54:	e008      	b.n	8005a68 <prvResetNextTaskUnblockTime+0x2c>
		(pxTCB) = listGET_OWNER_OF_HEAD_ENTRY(pxDelayedTaskList); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a56:	4b07      	ldr	r3, [pc, #28]	; (8005a74 <prvResetNextTaskUnblockTime+0x38>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	68db      	ldr	r3, [r3, #12]
 8005a5c:	68db      	ldr	r3, [r3, #12]
 8005a5e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE(
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	4a04      	ldr	r2, [pc, #16]	; (8005a78 <prvResetNextTaskUnblockTime+0x3c>)
 8005a66:	6013      	str	r3, [r2, #0]
}
 8005a68:	bf00      	nop
 8005a6a:	370c      	adds	r7, #12
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr
 8005a74:	20000554 	.word	0x20000554
 8005a78:	200005bc 	.word	0x200005bc

08005a7c <xTaskGetSchedulerState>:
#endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

BaseType_t xTaskGetSchedulerState(void) {
 8005a7c:	b480      	push	{r7}
 8005a7e:	b083      	sub	sp, #12
 8005a80:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

	if (xSchedulerRunning == pdFALSE) {
 8005a82:	4b0b      	ldr	r3, [pc, #44]	; (8005ab0 <xTaskGetSchedulerState+0x34>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d102      	bne.n	8005a90 <xTaskGetSchedulerState+0x14>
		xReturn = taskSCHEDULER_NOT_STARTED;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	607b      	str	r3, [r7, #4]
 8005a8e:	e008      	b.n	8005aa2 <xTaskGetSchedulerState+0x26>
	} else {
		if (uxSchedulerSuspended == (UBaseType_t) pdFALSE) {
 8005a90:	4b08      	ldr	r3, [pc, #32]	; (8005ab4 <xTaskGetSchedulerState+0x38>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d102      	bne.n	8005a9e <xTaskGetSchedulerState+0x22>
			xReturn = taskSCHEDULER_RUNNING;
 8005a98:	2302      	movs	r3, #2
 8005a9a:	607b      	str	r3, [r7, #4]
 8005a9c:	e001      	b.n	8005aa2 <xTaskGetSchedulerState+0x26>
		} else {
			xReturn = taskSCHEDULER_SUSPENDED;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	607b      	str	r3, [r7, #4]
		}
	}

	return xReturn;
 8005aa2:	687b      	ldr	r3, [r7, #4]
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	370c      	adds	r7, #12
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr
 8005ab0:	200005a8 	.word	0x200005a8
 8005ab4:	200005c4 	.word	0x200005c4

08005ab8 <xTaskPriorityDisinherit>:
#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

BaseType_t xTaskPriorityDisinherit(TaskHandle_t const pxMutexHolder) {
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b086      	sub	sp, #24
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
	TCB_t *const pxTCB = pxMutexHolder;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	617b      	str	r3, [r7, #20]

	if (pxMutexHolder != NULL) {
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d06e      	beq.n	8005bac <xTaskPriorityDisinherit+0xf4>
		/* A task can only have an inherited priority if it holds the mutex.
		 If the mutex is held by a task then it cannot be given from an
		 interrupt, and if a mutex is given by the holding task then it must
		 be the running state task. */
		configASSERT(pxTCB == pxCurrentTCB);
 8005ace:	4b3a      	ldr	r3, [pc, #232]	; (8005bb8 <xTaskPriorityDisinherit+0x100>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	693a      	ldr	r2, [r7, #16]
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d00a      	beq.n	8005aee <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005adc:	f383 8811 	msr	BASEPRI, r3
 8005ae0:	f3bf 8f6f 	isb	sy
 8005ae4:	f3bf 8f4f 	dsb	sy
 8005ae8:	60fb      	str	r3, [r7, #12]
}
 8005aea:	bf00      	nop
 8005aec:	e7fe      	b.n	8005aec <xTaskPriorityDisinherit+0x34>
		configASSERT(pxTCB->uxMutexesHeld);
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d10a      	bne.n	8005b0c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005afa:	f383 8811 	msr	BASEPRI, r3
 8005afe:	f3bf 8f6f 	isb	sy
 8005b02:	f3bf 8f4f 	dsb	sy
 8005b06:	60bb      	str	r3, [r7, #8]
}
 8005b08:	bf00      	nop
 8005b0a:	e7fe      	b.n	8005b0a <xTaskPriorityDisinherit+0x52>
		(pxTCB->uxMutexesHeld)--;
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b10:	1e5a      	subs	r2, r3, #1
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	649a      	str	r2, [r3, #72]	; 0x48

		/* Has the holder of the mutex inherited the priority of another
		 task? */
		if (pxTCB->uxPriority != pxTCB->uxBasePriority) {
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d044      	beq.n	8005bac <xTaskPriorityDisinherit+0xf4>
			/* Only disinherit if no other mutexes are held. */
			if (pxTCB->uxMutexesHeld == (UBaseType_t) 0) {
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d140      	bne.n	8005bac <xTaskPriorityDisinherit+0xf4>
				/* A task can only have an inherited priority if it holds
				 the mutex.  If the mutex is held by a task then it cannot be
				 given from an interrupt, and if a mutex is given by the
				 holding task then it must be the running state task.  Remove
				 the holding task from the ready/delayed list. */
				if (uxListRemove(&(pxTCB->xStateListItem)) == (UBaseType_t) 0) {
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	3304      	adds	r3, #4
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f7fe fbb8 	bl	80042a4 <uxListRemove>
 8005b34:	4603      	mov	r3, r0
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d115      	bne.n	8005b66 <xTaskPriorityDisinherit+0xae>
					taskRESET_READY_PRIORITY(pxTCB->uxPriority);
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b3e:	491f      	ldr	r1, [pc, #124]	; (8005bbc <xTaskPriorityDisinherit+0x104>)
 8005b40:	4613      	mov	r3, r2
 8005b42:	009b      	lsls	r3, r3, #2
 8005b44:	4413      	add	r3, r2
 8005b46:	009b      	lsls	r3, r3, #2
 8005b48:	440b      	add	r3, r1
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d10a      	bne.n	8005b66 <xTaskPriorityDisinherit+0xae>
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b54:	2201      	movs	r2, #1
 8005b56:	fa02 f303 	lsl.w	r3, r2, r3
 8005b5a:	43da      	mvns	r2, r3
 8005b5c:	4b18      	ldr	r3, [pc, #96]	; (8005bc0 <xTaskPriorityDisinherit+0x108>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4013      	ands	r3, r2
 8005b62:	4a17      	ldr	r2, [pc, #92]	; (8005bc0 <xTaskPriorityDisinherit+0x108>)
 8005b64:	6013      	str	r3, [r2, #0]
				}

				/* Disinherit the priority before adding the task into the
				 new	ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	62da      	str	r2, [r3, #44]	; 0x2c

				/* Reset the event list item value.  It cannot be in use for
				 any other purpose if this task is running, and it must be
				 running to give back the mutex. */
				listSET_LIST_ITEM_VALUE(&(pxTCB->xEventListItem),
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b72:	f1c3 0207 	rsb	r2, r3, #7
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	619a      	str	r2, [r3, #24]
						( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
				prvAddTaskToReadyList(pxTCB);
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b7e:	2201      	movs	r2, #1
 8005b80:	409a      	lsls	r2, r3
 8005b82:	4b0f      	ldr	r3, [pc, #60]	; (8005bc0 <xTaskPriorityDisinherit+0x108>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4313      	orrs	r3, r2
 8005b88:	4a0d      	ldr	r2, [pc, #52]	; (8005bc0 <xTaskPriorityDisinherit+0x108>)
 8005b8a:	6013      	str	r3, [r2, #0]
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b90:	4613      	mov	r3, r2
 8005b92:	009b      	lsls	r3, r3, #2
 8005b94:	4413      	add	r3, r2
 8005b96:	009b      	lsls	r3, r3, #2
 8005b98:	4a08      	ldr	r2, [pc, #32]	; (8005bbc <xTaskPriorityDisinherit+0x104>)
 8005b9a:	441a      	add	r2, r3
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	3304      	adds	r3, #4
 8005ba0:	4619      	mov	r1, r3
 8005ba2:	4610      	mov	r0, r2
 8005ba4:	f7fe fb21 	bl	80041ea <vListInsertEnd>
				 in an order different to that in which they were taken.
				 If a context switch did not occur when the first mutex was
				 returned, even if a task was waiting on it, then a context
				 switch should occur when the last mutex is returned whether
				 a task is waiting on it or not. */
				xReturn = pdTRUE;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	617b      	str	r3, [r7, #20]
		}
	} else {
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005bac:	697b      	ldr	r3, [r7, #20]
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3718      	adds	r7, #24
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}
 8005bb6:	bf00      	nop
 8005bb8:	2000049c 	.word	0x2000049c
 8005bbc:	200004a0 	.word	0x200004a0
 8005bc0:	200005a4 	.word	0x200005a4

08005bc4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList(TickType_t xTicksToWait,
		const BaseType_t xCanBlockIndefinitely) {
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b084      	sub	sp, #16
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
 8005bcc:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	const TickType_t xConstTickCount = xTickCount;
 8005bce:	4b29      	ldr	r3, [pc, #164]	; (8005c74 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	 as the same list item is used for both lists. */
	if (uxListRemove(&(pxCurrentTCB->xStateListItem)) == (UBaseType_t) 0) {
 8005bd4:	4b28      	ldr	r3, [pc, #160]	; (8005c78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	3304      	adds	r3, #4
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f7fe fb62 	bl	80042a4 <uxListRemove>
 8005be0:	4603      	mov	r3, r0
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d10b      	bne.n	8005bfe <prvAddCurrentTaskToDelayedList+0x3a>
		/* The current task must be in a ready list, so there is no need to
		 check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY(pxCurrentTCB->uxPriority, uxTopReadyPriority); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005be6:	4b24      	ldr	r3, [pc, #144]	; (8005c78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bec:	2201      	movs	r2, #1
 8005bee:	fa02 f303 	lsl.w	r3, r2, r3
 8005bf2:	43da      	mvns	r2, r3
 8005bf4:	4b21      	ldr	r3, [pc, #132]	; (8005c7c <prvAddCurrentTaskToDelayedList+0xb8>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4013      	ands	r3, r2
 8005bfa:	4a20      	ldr	r2, [pc, #128]	; (8005c7c <prvAddCurrentTaskToDelayedList+0xb8>)
 8005bfc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if ((xTicksToWait == portMAX_DELAY )
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c04:	d10a      	bne.n	8005c1c <prvAddCurrentTaskToDelayedList+0x58>
				&& (xCanBlockIndefinitely != pdFALSE)) {
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d007      	beq.n	8005c1c <prvAddCurrentTaskToDelayedList+0x58>
			/* Add the task to the suspended task list instead of a delayed task
			 list to ensure it is not woken by a timing event.  It will block
			 indefinitely. */
			vListInsertEnd(&xSuspendedTaskList,
					&(pxCurrentTCB->xStateListItem));
 8005c0c:	4b1a      	ldr	r3, [pc, #104]	; (8005c78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
			vListInsertEnd(&xSuspendedTaskList,
 8005c10:	3304      	adds	r3, #4
 8005c12:	4619      	mov	r1, r3
 8005c14:	481a      	ldr	r0, [pc, #104]	; (8005c80 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005c16:	f7fe fae8 	bl	80041ea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005c1a:	e026      	b.n	8005c6a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005c1c:	68fa      	ldr	r2, [r7, #12]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	4413      	add	r3, r2
 8005c22:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE(&(pxCurrentTCB->xStateListItem),
 8005c24:	4b14      	ldr	r3, [pc, #80]	; (8005c78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	68ba      	ldr	r2, [r7, #8]
 8005c2a:	605a      	str	r2, [r3, #4]
			if (xTimeToWake < xConstTickCount) {
 8005c2c:	68ba      	ldr	r2, [r7, #8]
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d209      	bcs.n	8005c48 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert(pxOverflowDelayedTaskList,
 8005c34:	4b13      	ldr	r3, [pc, #76]	; (8005c84 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005c36:	681a      	ldr	r2, [r3, #0]
						&(pxCurrentTCB->xStateListItem));
 8005c38:	4b0f      	ldr	r3, [pc, #60]	; (8005c78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
				vListInsert(pxOverflowDelayedTaskList,
 8005c3c:	3304      	adds	r3, #4
 8005c3e:	4619      	mov	r1, r3
 8005c40:	4610      	mov	r0, r2
 8005c42:	f7fe faf6 	bl	8004232 <vListInsert>
}
 8005c46:	e010      	b.n	8005c6a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert(pxDelayedTaskList, &(pxCurrentTCB->xStateListItem));
 8005c48:	4b0f      	ldr	r3, [pc, #60]	; (8005c88 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	4b0a      	ldr	r3, [pc, #40]	; (8005c78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	3304      	adds	r3, #4
 8005c52:	4619      	mov	r1, r3
 8005c54:	4610      	mov	r0, r2
 8005c56:	f7fe faec 	bl	8004232 <vListInsert>
				if (xTimeToWake < xNextTaskUnblockTime) {
 8005c5a:	4b0c      	ldr	r3, [pc, #48]	; (8005c8c <prvAddCurrentTaskToDelayedList+0xc8>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	68ba      	ldr	r2, [r7, #8]
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d202      	bcs.n	8005c6a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005c64:	4a09      	ldr	r2, [pc, #36]	; (8005c8c <prvAddCurrentTaskToDelayedList+0xc8>)
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	6013      	str	r3, [r2, #0]
}
 8005c6a:	bf00      	nop
 8005c6c:	3710      	adds	r7, #16
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}
 8005c72:	bf00      	nop
 8005c74:	200005a0 	.word	0x200005a0
 8005c78:	2000049c 	.word	0x2000049c
 8005c7c:	200005a4 	.word	0x200005a4
 8005c80:	20000588 	.word	0x20000588
 8005c84:	20000558 	.word	0x20000558
 8005c88:	20000554 	.word	0x20000554
 8005c8c:	200005bc 	.word	0x200005bc

08005c90 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t* pxPortInitialiseStack(StackType_t *pxTopOfStack,
		TaskFunction_t pxCode, void *pvParameters) {
 8005c90:	b480      	push	{r7}
 8005c92:	b085      	sub	sp, #20
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	60f8      	str	r0, [r7, #12]
 8005c98:	60b9      	str	r1, [r7, #8]
 8005c9a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	 interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	 of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	3b04      	subs	r3, #4
 8005ca0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR; /* xPSR */
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005ca8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	3b04      	subs	r3, #4
 8005cae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ((StackType_t) pxCode) & portSTART_ADDRESS_MASK; /* PC */
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	f023 0201 	bic.w	r2, r3, #1
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	3b04      	subs	r3, #4
 8005cbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = (StackType_t) portTASK_RETURN_ADDRESS; /* LR */
 8005cc0:	4a0c      	ldr	r2, [pc, #48]	; (8005cf4 <pxPortInitialiseStack+0x64>)
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5; /* R12, R3, R2 and R1. */
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	3b14      	subs	r3, #20
 8005cca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = (StackType_t) pvParameters; /* R0 */
 8005ccc:	687a      	ldr	r2, [r7, #4]
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	 own exec return value. */
	pxTopOfStack--;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	3b04      	subs	r3, #4
 8005cd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f06f 0202 	mvn.w	r2, #2
 8005cde:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	3b20      	subs	r3, #32
 8005ce4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	3714      	adds	r7, #20
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr
 8005cf4:	08005cf9 	.word	0x08005cf9

08005cf8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError(void) {
 8005cf8:	b480      	push	{r7}
 8005cfa:	b085      	sub	sp, #20
 8005cfc:	af00      	add	r7, sp, #0
	volatile uint32_t ulDummy = 0;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	607b      	str	r3, [r7, #4]
	 its caller as there is nothing to return to.  If a task wants to exit it
	 should instead call vTaskDelete( NULL ).

	 Artificially force an assert() to be triggered if configASSERT() is
	 defined, then stop here so application writers can catch the error. */
	configASSERT(uxCriticalNesting == ~0UL);
 8005d02:	4b12      	ldr	r3, [pc, #72]	; (8005d4c <prvTaskExitError+0x54>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d0a:	d00a      	beq.n	8005d22 <prvTaskExitError+0x2a>
	__asm volatile
 8005d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d10:	f383 8811 	msr	BASEPRI, r3
 8005d14:	f3bf 8f6f 	isb	sy
 8005d18:	f3bf 8f4f 	dsb	sy
 8005d1c:	60fb      	str	r3, [r7, #12]
}
 8005d1e:	bf00      	nop
 8005d20:	e7fe      	b.n	8005d20 <prvTaskExitError+0x28>
	__asm volatile
 8005d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d26:	f383 8811 	msr	BASEPRI, r3
 8005d2a:	f3bf 8f6f 	isb	sy
 8005d2e:	f3bf 8f4f 	dsb	sy
 8005d32:	60bb      	str	r3, [r7, #8]
}
 8005d34:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while (ulDummy == 0) {
 8005d36:	bf00      	nop
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d0fc      	beq.n	8005d38 <prvTaskExitError+0x40>
		 about code appearing after this function is called - making ulDummy
		 volatile makes the compiler think the function could return and
		 therefore not output an 'unreachable code' warning for code that appears
		 after it. */
	}
}
 8005d3e:	bf00      	nop
 8005d40:	bf00      	nop
 8005d42:	3714      	adds	r7, #20
 8005d44:	46bd      	mov	sp, r7
 8005d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4a:	4770      	bx	lr
 8005d4c:	2000000c 	.word	0x2000000c

08005d50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler(void) {
	__asm volatile (
 8005d50:	4b07      	ldr	r3, [pc, #28]	; (8005d70 <pxCurrentTCBConst2>)
 8005d52:	6819      	ldr	r1, [r3, #0]
 8005d54:	6808      	ldr	r0, [r1, #0]
 8005d56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d5a:	f380 8809 	msr	PSP, r0
 8005d5e:	f3bf 8f6f 	isb	sy
 8005d62:	f04f 0000 	mov.w	r0, #0
 8005d66:	f380 8811 	msr	BASEPRI, r0
 8005d6a:	4770      	bx	lr
 8005d6c:	f3af 8000 	nop.w

08005d70 <pxCurrentTCBConst2>:
 8005d70:	2000049c 	.word	0x2000049c
			"	bx r14							\n"
			"									\n"
			"	.align 4						\n"
			"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
	);
}
 8005d74:	bf00      	nop
 8005d76:	bf00      	nop

08005d78 <prvPortStartFirstTask>:
static void prvPortStartFirstTask(void) {
	/* Start the first task.  This also clears the bit that indicates the FPU is
	 in use in case the FPU was used before the scheduler was started - which
	 would otherwise result in the unnecessary leaving of space in the SVC stack
	 for lazy saving of FPU registers. */
	__asm volatile(
 8005d78:	4808      	ldr	r0, [pc, #32]	; (8005d9c <prvPortStartFirstTask+0x24>)
 8005d7a:	6800      	ldr	r0, [r0, #0]
 8005d7c:	6800      	ldr	r0, [r0, #0]
 8005d7e:	f380 8808 	msr	MSP, r0
 8005d82:	f04f 0000 	mov.w	r0, #0
 8005d86:	f380 8814 	msr	CONTROL, r0
 8005d8a:	b662      	cpsie	i
 8005d8c:	b661      	cpsie	f
 8005d8e:	f3bf 8f4f 	dsb	sy
 8005d92:	f3bf 8f6f 	isb	sy
 8005d96:	df00      	svc	0
 8005d98:	bf00      	nop
			" dsb					\n"
			" isb					\n"
			" svc 0					\n" /* System call to start first task. */
			" nop					\n"
	);
}
 8005d9a:	bf00      	nop
 8005d9c:	e000ed08 	.word	0xe000ed08

08005da0 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler(void) {
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b086      	sub	sp, #24
 8005da4:	af00      	add	r7, sp, #0
	configASSERT(configMAX_SYSCALL_INTERRUPT_PRIORITY);

	/* This port can be used on all revisions of the Cortex-M7 core other than
	 the r0p1 parts.  r0p1 parts should use the port from the
	 /source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT(portCPUID != portCORTEX_M7_r0p1_ID);
 8005da6:	4b46      	ldr	r3, [pc, #280]	; (8005ec0 <xPortStartScheduler+0x120>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a46      	ldr	r2, [pc, #280]	; (8005ec4 <xPortStartScheduler+0x124>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d10a      	bne.n	8005dc6 <xPortStartScheduler+0x26>
	__asm volatile
 8005db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db4:	f383 8811 	msr	BASEPRI, r3
 8005db8:	f3bf 8f6f 	isb	sy
 8005dbc:	f3bf 8f4f 	dsb	sy
 8005dc0:	613b      	str	r3, [r7, #16]
}
 8005dc2:	bf00      	nop
 8005dc4:	e7fe      	b.n	8005dc4 <xPortStartScheduler+0x24>
	configASSERT(portCPUID != portCORTEX_M7_r0p0_ID);
 8005dc6:	4b3e      	ldr	r3, [pc, #248]	; (8005ec0 <xPortStartScheduler+0x120>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a3f      	ldr	r2, [pc, #252]	; (8005ec8 <xPortStartScheduler+0x128>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d10a      	bne.n	8005de6 <xPortStartScheduler+0x46>
	__asm volatile
 8005dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd4:	f383 8811 	msr	BASEPRI, r3
 8005dd8:	f3bf 8f6f 	isb	sy
 8005ddc:	f3bf 8f4f 	dsb	sy
 8005de0:	60fb      	str	r3, [r7, #12]
}
 8005de2:	bf00      	nop
 8005de4:	e7fe      	b.n	8005de4 <xPortStartScheduler+0x44>

#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t *const pucFirstUserPriorityRegister =
 8005de6:	4b39      	ldr	r3, [pc, #228]	; (8005ecc <xPortStartScheduler+0x12c>)
 8005de8:	617b      	str	r3, [r7, #20]
		 functions can be called.  ISR safe functions are those that end in
		 "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		 ensure interrupt entry is as fast and simple as possible.

		 Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	781b      	ldrb	r3, [r3, #0]
 8005dee:	b2db      	uxtb	r3, r3
 8005df0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		 possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	22ff      	movs	r2, #255	; 0xff
 8005df6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	781b      	ldrb	r3, [r3, #0]
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY
				& ucMaxPriorityValue;
 8005e00:	78fb      	ldrb	r3, [r7, #3]
 8005e02:	b2db      	uxtb	r3, r3
 8005e04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005e08:	b2da      	uxtb	r2, r3
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY
 8005e0a:	4b31      	ldr	r3, [pc, #196]	; (8005ed0 <xPortStartScheduler+0x130>)
 8005e0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		 of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005e0e:	4b31      	ldr	r3, [pc, #196]	; (8005ed4 <xPortStartScheduler+0x134>)
 8005e10:	2207      	movs	r2, #7
 8005e12:	601a      	str	r2, [r3, #0]
		while ((ucMaxPriorityValue & portTOP_BIT_OF_BYTE) == portTOP_BIT_OF_BYTE) {
 8005e14:	e009      	b.n	8005e2a <xPortStartScheduler+0x8a>
			ulMaxPRIGROUPValue--;
 8005e16:	4b2f      	ldr	r3, [pc, #188]	; (8005ed4 <xPortStartScheduler+0x134>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	3b01      	subs	r3, #1
 8005e1c:	4a2d      	ldr	r2, [pc, #180]	; (8005ed4 <xPortStartScheduler+0x134>)
 8005e1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= (uint8_t) 0x01;
 8005e20:	78fb      	ldrb	r3, [r7, #3]
 8005e22:	b2db      	uxtb	r3, r3
 8005e24:	005b      	lsls	r3, r3, #1
 8005e26:	b2db      	uxtb	r3, r3
 8005e28:	70fb      	strb	r3, [r7, #3]
		while ((ucMaxPriorityValue & portTOP_BIT_OF_BYTE) == portTOP_BIT_OF_BYTE) {
 8005e2a:	78fb      	ldrb	r3, [r7, #3]
 8005e2c:	b2db      	uxtb	r3, r3
 8005e2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e32:	2b80      	cmp	r3, #128	; 0x80
 8005e34:	d0ef      	beq.n	8005e16 <xPortStartScheduler+0x76>
#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			 priority bits matches the number of priority bits actually queried
			 from the hardware. */
			configASSERT(
 8005e36:	4b27      	ldr	r3, [pc, #156]	; (8005ed4 <xPortStartScheduler+0x134>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f1c3 0307 	rsb	r3, r3, #7
 8005e3e:	2b04      	cmp	r3, #4
 8005e40:	d00a      	beq.n	8005e58 <xPortStartScheduler+0xb8>
	__asm volatile
 8005e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e46:	f383 8811 	msr	BASEPRI, r3
 8005e4a:	f3bf 8f6f 	isb	sy
 8005e4e:	f3bf 8f4f 	dsb	sy
 8005e52:	60bb      	str	r3, [r7, #8]
}
 8005e54:	bf00      	nop
 8005e56:	e7fe      	b.n	8005e56 <xPortStartScheduler+0xb6>
		}
#endif

		/* Shift the priority group value back to its position within the AIRCR
		 register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005e58:	4b1e      	ldr	r3, [pc, #120]	; (8005ed4 <xPortStartScheduler+0x134>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	021b      	lsls	r3, r3, #8
 8005e5e:	4a1d      	ldr	r2, [pc, #116]	; (8005ed4 <xPortStartScheduler+0x134>)
 8005e60:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005e62:	4b1c      	ldr	r3, [pc, #112]	; (8005ed4 <xPortStartScheduler+0x134>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005e6a:	4a1a      	ldr	r2, [pc, #104]	; (8005ed4 <xPortStartScheduler+0x134>)
 8005e6c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		 value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	b2da      	uxtb	r2, r3
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	701a      	strb	r2, [r3, #0]
	}
#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005e76:	4b18      	ldr	r3, [pc, #96]	; (8005ed8 <xPortStartScheduler+0x138>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a17      	ldr	r2, [pc, #92]	; (8005ed8 <xPortStartScheduler+0x138>)
 8005e7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005e80:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005e82:	4b15      	ldr	r3, [pc, #84]	; (8005ed8 <xPortStartScheduler+0x138>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a14      	ldr	r2, [pc, #80]	; (8005ed8 <xPortStartScheduler+0x138>)
 8005e88:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005e8c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	 here already. */
	vPortSetupTimerInterrupt();
 8005e8e:	f000 f8dd 	bl	800604c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005e92:	4b12      	ldr	r3, [pc, #72]	; (8005edc <xPortStartScheduler+0x13c>)
 8005e94:	2200      	movs	r2, #0
 8005e96:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005e98:	f000 f8fc 	bl	8006094 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR) |= portASPEN_AND_LSPEN_BITS;
 8005e9c:	4b10      	ldr	r3, [pc, #64]	; (8005ee0 <xPortStartScheduler+0x140>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a0f      	ldr	r2, [pc, #60]	; (8005ee0 <xPortStartScheduler+0x140>)
 8005ea2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005ea6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005ea8:	f7ff ff66 	bl	8005d78 <prvPortStartFirstTask>
	 exit error function to prevent compiler warnings about a static function
	 not being called in the case that the application writer overrides this
	 functionality by defining configTASK_RETURN_ADDRESS.  Call
	 vTaskSwitchContext() so link time optimisation does not remove the
	 symbol. */
	vTaskSwitchContext();
 8005eac:	f7ff fba0 	bl	80055f0 <vTaskSwitchContext>
	prvTaskExitError();
 8005eb0:	f7ff ff22 	bl	8005cf8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005eb4:	2300      	movs	r3, #0
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3718      	adds	r7, #24
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}
 8005ebe:	bf00      	nop
 8005ec0:	e000ed00 	.word	0xe000ed00
 8005ec4:	410fc271 	.word	0x410fc271
 8005ec8:	410fc270 	.word	0x410fc270
 8005ecc:	e000e400 	.word	0xe000e400
 8005ed0:	200005c8 	.word	0x200005c8
 8005ed4:	200005cc 	.word	0x200005cc
 8005ed8:	e000ed20 	.word	0xe000ed20
 8005edc:	2000000c 	.word	0x2000000c
 8005ee0:	e000ef34 	.word	0xe000ef34

08005ee4 <vPortEnterCritical>:
	 Artificially force an assert. */
	configASSERT(uxCriticalNesting == 1000UL);
}
/*-----------------------------------------------------------*/

void vPortEnterCritical(void) {
 8005ee4:	b480      	push	{r7}
 8005ee6:	b083      	sub	sp, #12
 8005ee8:	af00      	add	r7, sp, #0
	__asm volatile
 8005eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eee:	f383 8811 	msr	BASEPRI, r3
 8005ef2:	f3bf 8f6f 	isb	sy
 8005ef6:	f3bf 8f4f 	dsb	sy
 8005efa:	607b      	str	r3, [r7, #4]
}
 8005efc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005efe:	4b0f      	ldr	r3, [pc, #60]	; (8005f3c <vPortEnterCritical+0x58>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	3301      	adds	r3, #1
 8005f04:	4a0d      	ldr	r2, [pc, #52]	; (8005f3c <vPortEnterCritical+0x58>)
 8005f06:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	 assert() if it is being called from an interrupt context.  Only API
	 functions that end in "FromISR" can be used in an interrupt.  Only assert if
	 the critical nesting count is 1 to protect against recursive calls if the
	 assert function also uses a critical section. */
	if (uxCriticalNesting == 1) {
 8005f08:	4b0c      	ldr	r3, [pc, #48]	; (8005f3c <vPortEnterCritical+0x58>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d10f      	bne.n	8005f30 <vPortEnterCritical+0x4c>
		configASSERT(( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0);
 8005f10:	4b0b      	ldr	r3, [pc, #44]	; (8005f40 <vPortEnterCritical+0x5c>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	b2db      	uxtb	r3, r3
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d00a      	beq.n	8005f30 <vPortEnterCritical+0x4c>
	__asm volatile
 8005f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f1e:	f383 8811 	msr	BASEPRI, r3
 8005f22:	f3bf 8f6f 	isb	sy
 8005f26:	f3bf 8f4f 	dsb	sy
 8005f2a:	603b      	str	r3, [r7, #0]
}
 8005f2c:	bf00      	nop
 8005f2e:	e7fe      	b.n	8005f2e <vPortEnterCritical+0x4a>
	}
}
 8005f30:	bf00      	nop
 8005f32:	370c      	adds	r7, #12
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr
 8005f3c:	2000000c 	.word	0x2000000c
 8005f40:	e000ed04 	.word	0xe000ed04

08005f44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical(void) {
 8005f44:	b480      	push	{r7}
 8005f46:	b083      	sub	sp, #12
 8005f48:	af00      	add	r7, sp, #0
	configASSERT(uxCriticalNesting);
 8005f4a:	4b12      	ldr	r3, [pc, #72]	; (8005f94 <vPortExitCritical+0x50>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d10a      	bne.n	8005f68 <vPortExitCritical+0x24>
	__asm volatile
 8005f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f56:	f383 8811 	msr	BASEPRI, r3
 8005f5a:	f3bf 8f6f 	isb	sy
 8005f5e:	f3bf 8f4f 	dsb	sy
 8005f62:	607b      	str	r3, [r7, #4]
}
 8005f64:	bf00      	nop
 8005f66:	e7fe      	b.n	8005f66 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005f68:	4b0a      	ldr	r3, [pc, #40]	; (8005f94 <vPortExitCritical+0x50>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	3b01      	subs	r3, #1
 8005f6e:	4a09      	ldr	r2, [pc, #36]	; (8005f94 <vPortExitCritical+0x50>)
 8005f70:	6013      	str	r3, [r2, #0]
	if (uxCriticalNesting == 0) {
 8005f72:	4b08      	ldr	r3, [pc, #32]	; (8005f94 <vPortExitCritical+0x50>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d105      	bne.n	8005f86 <vPortExitCritical+0x42>
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	f383 8811 	msr	BASEPRI, r3
}
 8005f84:	bf00      	nop
		portENABLE_INTERRUPTS();
	}
}
 8005f86:	bf00      	nop
 8005f88:	370c      	adds	r7, #12
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr
 8005f92:	bf00      	nop
 8005f94:	2000000c 	.word	0x2000000c
	...

08005fa0 <PendSV_Handler>:
/*-----------------------------------------------------------*/

void xPortPendSVHandler(void) {
	/* This is a naked function. */

	__asm volatile
 8005fa0:	f3ef 8009 	mrs	r0, PSP
 8005fa4:	f3bf 8f6f 	isb	sy
 8005fa8:	4b15      	ldr	r3, [pc, #84]	; (8006000 <pxCurrentTCBConst>)
 8005faa:	681a      	ldr	r2, [r3, #0]
 8005fac:	f01e 0f10 	tst.w	lr, #16
 8005fb0:	bf08      	it	eq
 8005fb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005fb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fba:	6010      	str	r0, [r2, #0]
 8005fbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005fc0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005fc4:	f380 8811 	msr	BASEPRI, r0
 8005fc8:	f3bf 8f4f 	dsb	sy
 8005fcc:	f3bf 8f6f 	isb	sy
 8005fd0:	f7ff fb0e 	bl	80055f0 <vTaskSwitchContext>
 8005fd4:	f04f 0000 	mov.w	r0, #0
 8005fd8:	f380 8811 	msr	BASEPRI, r0
 8005fdc:	bc09      	pop	{r0, r3}
 8005fde:	6819      	ldr	r1, [r3, #0]
 8005fe0:	6808      	ldr	r0, [r1, #0]
 8005fe2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fe6:	f01e 0f10 	tst.w	lr, #16
 8005fea:	bf08      	it	eq
 8005fec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005ff0:	f380 8809 	msr	PSP, r0
 8005ff4:	f3bf 8f6f 	isb	sy
 8005ff8:	4770      	bx	lr
 8005ffa:	bf00      	nop
 8005ffc:	f3af 8000 	nop.w

08006000 <pxCurrentTCBConst>:
 8006000:	2000049c 	.word	0x2000049c
			"										\n"
			"	.align 4							\n"
			"pxCurrentTCBConst: .word pxCurrentTCB	\n"
			::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006004:	bf00      	nop
 8006006:	bf00      	nop

08006008 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler(void) {
 8006008:	b580      	push	{r7, lr}
 800600a:	b082      	sub	sp, #8
 800600c:	af00      	add	r7, sp, #0
	__asm volatile
 800600e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006012:	f383 8811 	msr	BASEPRI, r3
 8006016:	f3bf 8f6f 	isb	sy
 800601a:	f3bf 8f4f 	dsb	sy
 800601e:	607b      	str	r3, [r7, #4]
}
 8006020:	bf00      	nop
	 save and then restore the interrupt mask value as its value is already
	 known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if (xTaskIncrementTick() != pdFALSE) {
 8006022:	f7ff fa2d 	bl	8005480 <xTaskIncrementTick>
 8006026:	4603      	mov	r3, r0
 8006028:	2b00      	cmp	r3, #0
 800602a:	d003      	beq.n	8006034 <SysTick_Handler+0x2c>
			/* A context switch is required.  Context switching is performed in
			 the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800602c:	4b06      	ldr	r3, [pc, #24]	; (8006048 <SysTick_Handler+0x40>)
 800602e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006032:	601a      	str	r2, [r3, #0]
 8006034:	2300      	movs	r3, #0
 8006036:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	f383 8811 	msr	BASEPRI, r3
}
 800603e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006040:	bf00      	nop
 8006042:	3708      	adds	r7, #8
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}
 8006048:	e000ed04 	.word	0xe000ed04

0800604c <vPortSetupTimerInterrupt>:

/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt(void) {
 800604c:	b480      	push	{r7}
 800604e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006050:	4b0b      	ldr	r3, [pc, #44]	; (8006080 <vPortSetupTimerInterrupt+0x34>)
 8006052:	2200      	movs	r2, #0
 8006054:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006056:	4b0b      	ldr	r3, [pc, #44]	; (8006084 <vPortSetupTimerInterrupt+0x38>)
 8006058:	2200      	movs	r2, #0
 800605a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ)
 800605c:	4b0a      	ldr	r3, [pc, #40]	; (8006088 <vPortSetupTimerInterrupt+0x3c>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a0a      	ldr	r2, [pc, #40]	; (800608c <vPortSetupTimerInterrupt+0x40>)
 8006062:	fba2 2303 	umull	r2, r3, r2, r3
 8006066:	099b      	lsrs	r3, r3, #6
 8006068:	4a09      	ldr	r2, [pc, #36]	; (8006090 <vPortSetupTimerInterrupt+0x44>)
			- 1UL;
 800606a:	3b01      	subs	r3, #1
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ)
 800606c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT
 800606e:	4b04      	ldr	r3, [pc, #16]	; (8006080 <vPortSetupTimerInterrupt+0x34>)
 8006070:	2207      	movs	r2, #7
 8006072:	601a      	str	r2, [r3, #0]
			| portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT);
}
 8006074:	bf00      	nop
 8006076:	46bd      	mov	sp, r7
 8006078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607c:	4770      	bx	lr
 800607e:	bf00      	nop
 8006080:	e000e010 	.word	0xe000e010
 8006084:	e000e018 	.word	0xe000e018
 8006088:	20000000 	.word	0x20000000
 800608c:	10624dd3 	.word	0x10624dd3
 8006090:	e000e014 	.word	0xe000e014

08006094 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP(void) {
	__asm volatile
 8006094:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80060a4 <vPortEnableVFP+0x10>
 8006098:	6801      	ldr	r1, [r0, #0]
 800609a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800609e:	6001      	str	r1, [r0, #0]
 80060a0:	4770      	bx	lr
			"								\n"
			"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
			"	str r1, [r0]				\n"
			"	bx r14						"
	);
}
 80060a2:	bf00      	nop
 80060a4:	e000ed88 	.word	0xe000ed88

080060a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

void vPortValidateInterruptPriority(void) {
 80060a8:	b480      	push	{r7}
 80060aa:	b085      	sub	sp, #20
 80060ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

	/* Obtain the number of the currently executing interrupt. */
	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80060ae:	f3ef 8305 	mrs	r3, IPSR
 80060b2:	60fb      	str	r3, [r7, #12]

	/* Is the interrupt number a user defined interrupt? */
	if (ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER) {
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2b0f      	cmp	r3, #15
 80060b8:	d914      	bls.n	80060e4 <vPortValidateInterruptPriority+0x3c>
		/* Look up the interrupt's priority. */
		ucCurrentPriority = pcInterruptPriorityRegisters[ulCurrentInterrupt];
 80060ba:	4a17      	ldr	r2, [pc, #92]	; (8006118 <vPortValidateInterruptPriority+0x70>)
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	4413      	add	r3, r2
 80060c0:	781b      	ldrb	r3, [r3, #0]
 80060c2:	72fb      	strb	r3, [r7, #11]
		 interrupt entry is as fast and simple as possible.

		 The following links provide detailed information:
		 http://www.freertos.org/RTOS-Cortex-M3-M4.html
		 http://www.freertos.org/FAQHelp.html */
		configASSERT(ucCurrentPriority >= ucMaxSysCallPriority);
 80060c4:	4b15      	ldr	r3, [pc, #84]	; (800611c <vPortValidateInterruptPriority+0x74>)
 80060c6:	781b      	ldrb	r3, [r3, #0]
 80060c8:	7afa      	ldrb	r2, [r7, #11]
 80060ca:	429a      	cmp	r2, r3
 80060cc:	d20a      	bcs.n	80060e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80060ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d2:	f383 8811 	msr	BASEPRI, r3
 80060d6:	f3bf 8f6f 	isb	sy
 80060da:	f3bf 8f4f 	dsb	sy
 80060de:	607b      	str	r3, [r7, #4]
}
 80060e0:	bf00      	nop
 80060e2:	e7fe      	b.n	80060e2 <vPortValidateInterruptPriority+0x3a>
	 configuration then the correct setting can be achieved on all Cortex-M
	 devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
	 scheduler.  Note however that some vendor specific peripheral libraries
	 assume a non-zero priority group setting, in which cases using a value
	 of zero will result in unpredictable behaviour. */
	configASSERT(
 80060e4:	4b0e      	ldr	r3, [pc, #56]	; (8006120 <vPortValidateInterruptPriority+0x78>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80060ec:	4b0d      	ldr	r3, [pc, #52]	; (8006124 <vPortValidateInterruptPriority+0x7c>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d90a      	bls.n	800610a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80060f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f8:	f383 8811 	msr	BASEPRI, r3
 80060fc:	f3bf 8f6f 	isb	sy
 8006100:	f3bf 8f4f 	dsb	sy
 8006104:	603b      	str	r3, [r7, #0]
}
 8006106:	bf00      	nop
 8006108:	e7fe      	b.n	8006108 <vPortValidateInterruptPriority+0x60>
			( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue);
}
 800610a:	bf00      	nop
 800610c:	3714      	adds	r7, #20
 800610e:	46bd      	mov	sp, r7
 8006110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006114:	4770      	bx	lr
 8006116:	bf00      	nop
 8006118:	e000e3f0 	.word	0xe000e3f0
 800611c:	200005c8 	.word	0x200005c8
 8006120:	e000ed0c 	.word	0xe000ed0c
 8006124:	200005cc 	.word	0x200005cc

08006128 <pvPortMalloc>:
 space. */
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void* pvPortMalloc(size_t xWantedSize) {
 8006128:	b580      	push	{r7, lr}
 800612a:	b08a      	sub	sp, #40	; 0x28
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
	BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
	void *pvReturn = NULL;
 8006130:	2300      	movs	r3, #0
 8006132:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006134:	f7ff f8ea 	bl	800530c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		 initialisation to setup the list of free blocks. */
		if (pxEnd == NULL) {
 8006138:	4b5b      	ldr	r3, [pc, #364]	; (80062a8 <pvPortMalloc+0x180>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d101      	bne.n	8006144 <pvPortMalloc+0x1c>
			prvHeapInit();
 8006140:	f000 f920 	bl	8006384 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		 set.  The top bit of the block size member of the BlockLink_t structure
		 is used to determine who owns the block - the application or the
		 kernel, so it must be free. */
		if ((xWantedSize & xBlockAllocatedBit) == 0) {
 8006144:	4b59      	ldr	r3, [pc, #356]	; (80062ac <pvPortMalloc+0x184>)
 8006146:	681a      	ldr	r2, [r3, #0]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	4013      	ands	r3, r2
 800614c:	2b00      	cmp	r3, #0
 800614e:	f040 8093 	bne.w	8006278 <pvPortMalloc+0x150>
			/* The wanted size is increased so it can contain a BlockLink_t
			 structure in addition to the requested amount of bytes. */
			if (xWantedSize > 0) {
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d01d      	beq.n	8006194 <pvPortMalloc+0x6c>
				xWantedSize += xHeapStructSize;
 8006158:	2208      	movs	r2, #8
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	4413      	add	r3, r2
 800615e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				 of bytes. */
				if ((xWantedSize & portBYTE_ALIGNMENT_MASK) != 0x00) {
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	f003 0307 	and.w	r3, r3, #7
 8006166:	2b00      	cmp	r3, #0
 8006168:	d014      	beq.n	8006194 <pvPortMalloc+0x6c>
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f023 0307 	bic.w	r3, r3, #7
 8006170:	3308      	adds	r3, #8
 8006172:	607b      	str	r3, [r7, #4]
							- (xWantedSize & portBYTE_ALIGNMENT_MASK));
					configASSERT(( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f003 0307 	and.w	r3, r3, #7
 800617a:	2b00      	cmp	r3, #0
 800617c:	d00a      	beq.n	8006194 <pvPortMalloc+0x6c>
	__asm volatile
 800617e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006182:	f383 8811 	msr	BASEPRI, r3
 8006186:	f3bf 8f6f 	isb	sy
 800618a:	f3bf 8f4f 	dsb	sy
 800618e:	617b      	str	r3, [r7, #20]
}
 8006190:	bf00      	nop
 8006192:	e7fe      	b.n	8006192 <pvPortMalloc+0x6a>
				}
			} else {
				mtCOVERAGE_TEST_MARKER();
			}

			if ((xWantedSize > 0) && (xWantedSize <= xFreeBytesRemaining)) {
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d06e      	beq.n	8006278 <pvPortMalloc+0x150>
 800619a:	4b45      	ldr	r3, [pc, #276]	; (80062b0 <pvPortMalloc+0x188>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	687a      	ldr	r2, [r7, #4]
 80061a0:	429a      	cmp	r2, r3
 80061a2:	d869      	bhi.n	8006278 <pvPortMalloc+0x150>
				/* Traverse the list from the start	(lowest address) block until
				 one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80061a4:	4b43      	ldr	r3, [pc, #268]	; (80062b4 <pvPortMalloc+0x18c>)
 80061a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80061a8:	4b42      	ldr	r3, [pc, #264]	; (80062b4 <pvPortMalloc+0x18c>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	627b      	str	r3, [r7, #36]	; 0x24
				while ((pxBlock->xBlockSize < xWantedSize)
 80061ae:	e004      	b.n	80061ba <pvPortMalloc+0x92>
						&& (pxBlock->pxNextFreeBlock != NULL)) {
					pxPreviousBlock = pxBlock;
 80061b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80061b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	627b      	str	r3, [r7, #36]	; 0x24
				while ((pxBlock->xBlockSize < xWantedSize)
 80061ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	687a      	ldr	r2, [r7, #4]
 80061c0:	429a      	cmp	r2, r3
 80061c2:	d903      	bls.n	80061cc <pvPortMalloc+0xa4>
						&& (pxBlock->pxNextFreeBlock != NULL)) {
 80061c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d1f1      	bne.n	80061b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				 was	not found. */
				if (pxBlock != pxEnd) {
 80061cc:	4b36      	ldr	r3, [pc, #216]	; (80062a8 <pvPortMalloc+0x180>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d050      	beq.n	8006278 <pvPortMalloc+0x150>
					/* Return the memory space pointed to - jumping over the
					 BlockLink_t structure at its start. */
					pvReturn =
							(void*) (((uint8_t*) pxPreviousBlock->pxNextFreeBlock)
 80061d6:	6a3b      	ldr	r3, [r7, #32]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	2208      	movs	r2, #8
					pvReturn =
 80061dc:	4413      	add	r3, r2
 80061de:	61fb      	str	r3, [r7, #28]
									+ xHeapStructSize);

					/* This block is being returned for use so must be taken out
					 of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80061e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e2:	681a      	ldr	r2, [r3, #0]
 80061e4:	6a3b      	ldr	r3, [r7, #32]
 80061e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					 two. */
					if ((pxBlock->xBlockSize - xWantedSize)
 80061e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ea:	685a      	ldr	r2, [r3, #4]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	1ad2      	subs	r2, r2, r3
							> heapMINIMUM_BLOCK_SIZE) {
 80061f0:	2308      	movs	r3, #8
 80061f2:	005b      	lsls	r3, r3, #1
					if ((pxBlock->xBlockSize - xWantedSize)
 80061f4:	429a      	cmp	r2, r3
 80061f6:	d91f      	bls.n	8006238 <pvPortMalloc+0x110>
						/* This block is to be split into two.  Create a new
						 block following the number of bytes requested. The void
						 cast is used to prevent byte alignment warnings from the
						 compiler. */
						pxNewBlockLink = (void*) (((uint8_t*) pxBlock)
 80061f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	4413      	add	r3, r2
 80061fe:	61bb      	str	r3, [r7, #24]
								+ xWantedSize);
						configASSERT(
 8006200:	69bb      	ldr	r3, [r7, #24]
 8006202:	f003 0307 	and.w	r3, r3, #7
 8006206:	2b00      	cmp	r3, #0
 8006208:	d00a      	beq.n	8006220 <pvPortMalloc+0xf8>
	__asm volatile
 800620a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800620e:	f383 8811 	msr	BASEPRI, r3
 8006212:	f3bf 8f6f 	isb	sy
 8006216:	f3bf 8f4f 	dsb	sy
 800621a:	613b      	str	r3, [r7, #16]
}
 800621c:	bf00      	nop
 800621e:	e7fe      	b.n	800621e <pvPortMalloc+0xf6>
								( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0);

						/* Calculate the sizes of two blocks split from the
						 single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize
 8006220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006222:	685a      	ldr	r2, [r3, #4]
								- xWantedSize;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	1ad2      	subs	r2, r2, r3
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize
 8006228:	69bb      	ldr	r3, [r7, #24]
 800622a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800622c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800622e:	687a      	ldr	r2, [r7, #4]
 8006230:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList(pxNewBlockLink);
 8006232:	69b8      	ldr	r0, [r7, #24]
 8006234:	f000 f908 	bl	8006448 <prvInsertBlockIntoFreeList>
					} else {
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006238:	4b1d      	ldr	r3, [pc, #116]	; (80062b0 <pvPortMalloc+0x188>)
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	1ad3      	subs	r3, r2, r3
 8006242:	4a1b      	ldr	r2, [pc, #108]	; (80062b0 <pvPortMalloc+0x188>)
 8006244:	6013      	str	r3, [r2, #0]

					if (xFreeBytesRemaining < xMinimumEverFreeBytesRemaining) {
 8006246:	4b1a      	ldr	r3, [pc, #104]	; (80062b0 <pvPortMalloc+0x188>)
 8006248:	681a      	ldr	r2, [r3, #0]
 800624a:	4b1b      	ldr	r3, [pc, #108]	; (80062b8 <pvPortMalloc+0x190>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	429a      	cmp	r2, r3
 8006250:	d203      	bcs.n	800625a <pvPortMalloc+0x132>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006252:	4b17      	ldr	r3, [pc, #92]	; (80062b0 <pvPortMalloc+0x188>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a18      	ldr	r2, [pc, #96]	; (80062b8 <pvPortMalloc+0x190>)
 8006258:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					 by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800625a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800625c:	685a      	ldr	r2, [r3, #4]
 800625e:	4b13      	ldr	r3, [pc, #76]	; (80062ac <pvPortMalloc+0x184>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	431a      	orrs	r2, r3
 8006264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006266:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800626a:	2200      	movs	r2, #0
 800626c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800626e:	4b13      	ldr	r3, [pc, #76]	; (80062bc <pvPortMalloc+0x194>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	3301      	adds	r3, #1
 8006274:	4a11      	ldr	r2, [pc, #68]	; (80062bc <pvPortMalloc+0x194>)
 8006276:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	(void) xTaskResumeAll();
 8006278:	f7ff f856 	bl	8005328 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT(
 800627c:	69fb      	ldr	r3, [r7, #28]
 800627e:	f003 0307 	and.w	r3, r3, #7
 8006282:	2b00      	cmp	r3, #0
 8006284:	d00a      	beq.n	800629c <pvPortMalloc+0x174>
	__asm volatile
 8006286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800628a:	f383 8811 	msr	BASEPRI, r3
 800628e:	f3bf 8f6f 	isb	sy
 8006292:	f3bf 8f4f 	dsb	sy
 8006296:	60fb      	str	r3, [r7, #12]
}
 8006298:	bf00      	nop
 800629a:	e7fe      	b.n	800629a <pvPortMalloc+0x172>
			( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0);
	return pvReturn;
 800629c:	69fb      	ldr	r3, [r7, #28]
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3728      	adds	r7, #40	; 0x28
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}
 80062a6:	bf00      	nop
 80062a8:	200041d8 	.word	0x200041d8
 80062ac:	200041ec 	.word	0x200041ec
 80062b0:	200041dc 	.word	0x200041dc
 80062b4:	200041d0 	.word	0x200041d0
 80062b8:	200041e0 	.word	0x200041e0
 80062bc:	200041e4 	.word	0x200041e4

080062c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree(void *pv) {
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b086      	sub	sp, #24
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
	uint8_t *puc = (uint8_t*) pv;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	if (pv != NULL) {
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d04d      	beq.n	800636e <vPortFree+0xae>
		/* The memory being freed will have an BlockLink_t structure immediately
		 before it. */
		puc -= xHeapStructSize;
 80062d2:	2308      	movs	r3, #8
 80062d4:	425b      	negs	r3, r3
 80062d6:	697a      	ldr	r2, [r7, #20]
 80062d8:	4413      	add	r3, r2
 80062da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = (void*) puc;
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT((pxLink->xBlockSize & xBlockAllocatedBit) != 0);
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	685a      	ldr	r2, [r3, #4]
 80062e4:	4b24      	ldr	r3, [pc, #144]	; (8006378 <vPortFree+0xb8>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4013      	ands	r3, r2
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d10a      	bne.n	8006304 <vPortFree+0x44>
	__asm volatile
 80062ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f2:	f383 8811 	msr	BASEPRI, r3
 80062f6:	f3bf 8f6f 	isb	sy
 80062fa:	f3bf 8f4f 	dsb	sy
 80062fe:	60fb      	str	r3, [r7, #12]
}
 8006300:	bf00      	nop
 8006302:	e7fe      	b.n	8006302 <vPortFree+0x42>
		configASSERT(pxLink->pxNextFreeBlock == NULL);
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d00a      	beq.n	8006322 <vPortFree+0x62>
	__asm volatile
 800630c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006310:	f383 8811 	msr	BASEPRI, r3
 8006314:	f3bf 8f6f 	isb	sy
 8006318:	f3bf 8f4f 	dsb	sy
 800631c:	60bb      	str	r3, [r7, #8]
}
 800631e:	bf00      	nop
 8006320:	e7fe      	b.n	8006320 <vPortFree+0x60>

		if ((pxLink->xBlockSize & xBlockAllocatedBit) != 0) {
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	685a      	ldr	r2, [r3, #4]
 8006326:	4b14      	ldr	r3, [pc, #80]	; (8006378 <vPortFree+0xb8>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4013      	ands	r3, r2
 800632c:	2b00      	cmp	r3, #0
 800632e:	d01e      	beq.n	800636e <vPortFree+0xae>
			if (pxLink->pxNextFreeBlock == NULL) {
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d11a      	bne.n	800636e <vPortFree+0xae>
				/* The block is being returned to the heap - it is no longer
				 allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	685a      	ldr	r2, [r3, #4]
 800633c:	4b0e      	ldr	r3, [pc, #56]	; (8006378 <vPortFree+0xb8>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	43db      	mvns	r3, r3
 8006342:	401a      	ands	r2, r3
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006348:	f7fe ffe0 	bl	800530c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	685a      	ldr	r2, [r3, #4]
 8006350:	4b0a      	ldr	r3, [pc, #40]	; (800637c <vPortFree+0xbc>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4413      	add	r3, r2
 8006356:	4a09      	ldr	r2, [pc, #36]	; (800637c <vPortFree+0xbc>)
 8006358:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList(((BlockLink_t*) pxLink));
 800635a:	6938      	ldr	r0, [r7, #16]
 800635c:	f000 f874 	bl	8006448 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006360:	4b07      	ldr	r3, [pc, #28]	; (8006380 <vPortFree+0xc0>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	3301      	adds	r3, #1
 8006366:	4a06      	ldr	r2, [pc, #24]	; (8006380 <vPortFree+0xc0>)
 8006368:	6013      	str	r3, [r2, #0]
				}
				(void) xTaskResumeAll();
 800636a:	f7fe ffdd 	bl	8005328 <xTaskResumeAll>
			}
		} else {
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800636e:	bf00      	nop
 8006370:	3718      	adds	r7, #24
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}
 8006376:	bf00      	nop
 8006378:	200041ec 	.word	0x200041ec
 800637c:	200041dc 	.word	0x200041dc
 8006380:	200041e8 	.word	0x200041e8

08006384 <prvHeapInit>:
void vPortInitialiseBlocks(void) {
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit(void) {
 8006384:	b480      	push	{r7}
 8006386:	b085      	sub	sp, #20
 8006388:	af00      	add	r7, sp, #0
	BlockLink_t *pxFirstFreeBlock;
	uint8_t *pucAlignedHeap;
	size_t uxAddress;
	size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800638a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800638e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = (size_t) ucHeap;
 8006390:	4b27      	ldr	r3, [pc, #156]	; (8006430 <prvHeapInit+0xac>)
 8006392:	60fb      	str	r3, [r7, #12]

	if ((uxAddress & portBYTE_ALIGNMENT_MASK) != 0) {
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f003 0307 	and.w	r3, r3, #7
 800639a:	2b00      	cmp	r3, #0
 800639c:	d00c      	beq.n	80063b8 <prvHeapInit+0x34>
		uxAddress += ( portBYTE_ALIGNMENT - 1);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	3307      	adds	r3, #7
 80063a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~((size_t) portBYTE_ALIGNMENT_MASK);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f023 0307 	bic.w	r3, r3, #7
 80063aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - (size_t) ucHeap;
 80063ac:	68ba      	ldr	r2, [r7, #8]
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	1ad3      	subs	r3, r2, r3
 80063b2:	4a1f      	ldr	r2, [pc, #124]	; (8006430 <prvHeapInit+0xac>)
 80063b4:	4413      	add	r3, r2
 80063b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = (uint8_t*) uxAddress;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	 blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = (void*) pucAlignedHeap;
 80063bc:	4a1d      	ldr	r2, [pc, #116]	; (8006434 <prvHeapInit+0xb0>)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = (size_t) 0;
 80063c2:	4b1c      	ldr	r3, [pc, #112]	; (8006434 <prvHeapInit+0xb0>)
 80063c4:	2200      	movs	r2, #0
 80063c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	 at the end of the heap space. */
	uxAddress = ((size_t) pucAlignedHeap) + xTotalHeapSize;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	68ba      	ldr	r2, [r7, #8]
 80063cc:	4413      	add	r3, r2
 80063ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80063d0:	2208      	movs	r2, #8
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	1a9b      	subs	r3, r3, r2
 80063d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~((size_t) portBYTE_ALIGNMENT_MASK);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f023 0307 	bic.w	r3, r3, #7
 80063de:	60fb      	str	r3, [r7, #12]
	pxEnd = (void*) uxAddress;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	4a15      	ldr	r2, [pc, #84]	; (8006438 <prvHeapInit+0xb4>)
 80063e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80063e6:	4b14      	ldr	r3, [pc, #80]	; (8006438 <prvHeapInit+0xb4>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	2200      	movs	r2, #0
 80063ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80063ee:	4b12      	ldr	r3, [pc, #72]	; (8006438 <prvHeapInit+0xb4>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	2200      	movs	r2, #0
 80063f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	 entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = (void*) pucAlignedHeap;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - (size_t) pxFirstFreeBlock;
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	68fa      	ldr	r2, [r7, #12]
 80063fe:	1ad2      	subs	r2, r2, r3
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006404:	4b0c      	ldr	r3, [pc, #48]	; (8006438 <prvHeapInit+0xb4>)
 8006406:	681a      	ldr	r2, [r3, #0]
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	4a0a      	ldr	r2, [pc, #40]	; (800643c <prvHeapInit+0xb8>)
 8006412:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	4a09      	ldr	r2, [pc, #36]	; (8006440 <prvHeapInit+0xbc>)
 800641a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ((size_t) 1)
 800641c:	4b09      	ldr	r3, [pc, #36]	; (8006444 <prvHeapInit+0xc0>)
 800641e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006422:	601a      	str	r2, [r3, #0]
			<< ((sizeof(size_t) * heapBITS_PER_BYTE) - 1);
}
 8006424:	bf00      	nop
 8006426:	3714      	adds	r7, #20
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr
 8006430:	200005d0 	.word	0x200005d0
 8006434:	200041d0 	.word	0x200041d0
 8006438:	200041d8 	.word	0x200041d8
 800643c:	200041e0 	.word	0x200041e0
 8006440:	200041dc 	.word	0x200041dc
 8006444:	200041ec 	.word	0x200041ec

08006448 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList(BlockLink_t *pxBlockToInsert) {
 8006448:	b480      	push	{r7}
 800644a:	b085      	sub	sp, #20
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
	BlockLink_t *pxIterator;
	uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	 than the block being inserted. */
	for (pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert;
 8006450:	4b28      	ldr	r3, [pc, #160]	; (80064f4 <prvInsertBlockIntoFreeList+0xac>)
 8006452:	60fb      	str	r3, [r7, #12]
 8006454:	e002      	b.n	800645c <prvInsertBlockIntoFreeList+0x14>
			pxIterator = pxIterator->pxNextFreeBlock) {
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	60fb      	str	r3, [r7, #12]
	for (pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	687a      	ldr	r2, [r7, #4]
 8006462:	429a      	cmp	r2, r3
 8006464:	d8f7      	bhi.n	8006456 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	 make a contiguous block of memory? */
	puc = (uint8_t*) pxIterator;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	60bb      	str	r3, [r7, #8]
	if ((puc + pxIterator->xBlockSize) == (uint8_t*) pxBlockToInsert) {
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	68ba      	ldr	r2, [r7, #8]
 8006470:	4413      	add	r3, r2
 8006472:	687a      	ldr	r2, [r7, #4]
 8006474:	429a      	cmp	r2, r3
 8006476:	d108      	bne.n	800648a <prvInsertBlockIntoFreeList+0x42>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	685a      	ldr	r2, [r3, #4]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	441a      	add	r2, r3
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	 make a contiguous block of memory? */
	puc = (uint8_t*) pxBlockToInsert;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	60bb      	str	r3, [r7, #8]
	if ((puc + pxBlockToInsert->xBlockSize)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	68ba      	ldr	r2, [r7, #8]
 8006494:	441a      	add	r2, r3
			== (uint8_t*) pxIterator->pxNextFreeBlock) {
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
	if ((puc + pxBlockToInsert->xBlockSize)
 800649a:	429a      	cmp	r2, r3
 800649c:	d118      	bne.n	80064d0 <prvInsertBlockIntoFreeList+0x88>
		if (pxIterator->pxNextFreeBlock != pxEnd) {
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681a      	ldr	r2, [r3, #0]
 80064a2:	4b15      	ldr	r3, [pc, #84]	; (80064f8 <prvInsertBlockIntoFreeList+0xb0>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	429a      	cmp	r2, r3
 80064a8:	d00d      	beq.n	80064c6 <prvInsertBlockIntoFreeList+0x7e>
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize +=
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	685a      	ldr	r2, [r3, #4]
					pxIterator->pxNextFreeBlock->xBlockSize;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	685b      	ldr	r3, [r3, #4]
			pxBlockToInsert->xBlockSize +=
 80064b4:	441a      	add	r2, r3
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock =
					pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	681a      	ldr	r2, [r3, #0]
			pxBlockToInsert->pxNextFreeBlock =
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	601a      	str	r2, [r3, #0]
 80064c4:	e008      	b.n	80064d8 <prvInsertBlockIntoFreeList+0x90>
		} else {
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80064c6:	4b0c      	ldr	r3, [pc, #48]	; (80064f8 <prvInsertBlockIntoFreeList+0xb0>)
 80064c8:	681a      	ldr	r2, [r3, #0]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	601a      	str	r2, [r3, #0]
 80064ce:	e003      	b.n	80064d8 <prvInsertBlockIntoFreeList+0x90>
		}
	} else {
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681a      	ldr	r2, [r3, #0]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	 before and the block after, then it's pxNextFreeBlock pointer will have
	 already been set, and should not be set here as that would make it point
	 to itself. */
	if (pxIterator != pxBlockToInsert) {
 80064d8:	68fa      	ldr	r2, [r7, #12]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	429a      	cmp	r2, r3
 80064de:	d002      	beq.n	80064e6 <prvInsertBlockIntoFreeList+0x9e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	687a      	ldr	r2, [r7, #4]
 80064e4:	601a      	str	r2, [r3, #0]
	} else {
		mtCOVERAGE_TEST_MARKER();
	}
}
 80064e6:	bf00      	nop
 80064e8:	3714      	adds	r7, #20
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr
 80064f2:	bf00      	nop
 80064f4:	200041d0 	.word	0x200041d0
 80064f8:	200041d8 	.word	0x200041d8

080064fc <__errno>:
 80064fc:	4b01      	ldr	r3, [pc, #4]	; (8006504 <__errno+0x8>)
 80064fe:	6818      	ldr	r0, [r3, #0]
 8006500:	4770      	bx	lr
 8006502:	bf00      	nop
 8006504:	20000010 	.word	0x20000010

08006508 <std>:
 8006508:	2300      	movs	r3, #0
 800650a:	b510      	push	{r4, lr}
 800650c:	4604      	mov	r4, r0
 800650e:	e9c0 3300 	strd	r3, r3, [r0]
 8006512:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006516:	6083      	str	r3, [r0, #8]
 8006518:	8181      	strh	r1, [r0, #12]
 800651a:	6643      	str	r3, [r0, #100]	; 0x64
 800651c:	81c2      	strh	r2, [r0, #14]
 800651e:	6183      	str	r3, [r0, #24]
 8006520:	4619      	mov	r1, r3
 8006522:	2208      	movs	r2, #8
 8006524:	305c      	adds	r0, #92	; 0x5c
 8006526:	f000 f91a 	bl	800675e <memset>
 800652a:	4b05      	ldr	r3, [pc, #20]	; (8006540 <std+0x38>)
 800652c:	6263      	str	r3, [r4, #36]	; 0x24
 800652e:	4b05      	ldr	r3, [pc, #20]	; (8006544 <std+0x3c>)
 8006530:	62a3      	str	r3, [r4, #40]	; 0x28
 8006532:	4b05      	ldr	r3, [pc, #20]	; (8006548 <std+0x40>)
 8006534:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006536:	4b05      	ldr	r3, [pc, #20]	; (800654c <std+0x44>)
 8006538:	6224      	str	r4, [r4, #32]
 800653a:	6323      	str	r3, [r4, #48]	; 0x30
 800653c:	bd10      	pop	{r4, pc}
 800653e:	bf00      	nop
 8006540:	08006ab9 	.word	0x08006ab9
 8006544:	08006adb 	.word	0x08006adb
 8006548:	08006b13 	.word	0x08006b13
 800654c:	08006b37 	.word	0x08006b37

08006550 <_cleanup_r>:
 8006550:	4901      	ldr	r1, [pc, #4]	; (8006558 <_cleanup_r+0x8>)
 8006552:	f000 b8af 	b.w	80066b4 <_fwalk_reent>
 8006556:	bf00      	nop
 8006558:	08006e11 	.word	0x08006e11

0800655c <__sfmoreglue>:
 800655c:	b570      	push	{r4, r5, r6, lr}
 800655e:	2268      	movs	r2, #104	; 0x68
 8006560:	1e4d      	subs	r5, r1, #1
 8006562:	4355      	muls	r5, r2
 8006564:	460e      	mov	r6, r1
 8006566:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800656a:	f000 f921 	bl	80067b0 <_malloc_r>
 800656e:	4604      	mov	r4, r0
 8006570:	b140      	cbz	r0, 8006584 <__sfmoreglue+0x28>
 8006572:	2100      	movs	r1, #0
 8006574:	e9c0 1600 	strd	r1, r6, [r0]
 8006578:	300c      	adds	r0, #12
 800657a:	60a0      	str	r0, [r4, #8]
 800657c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006580:	f000 f8ed 	bl	800675e <memset>
 8006584:	4620      	mov	r0, r4
 8006586:	bd70      	pop	{r4, r5, r6, pc}

08006588 <__sfp_lock_acquire>:
 8006588:	4801      	ldr	r0, [pc, #4]	; (8006590 <__sfp_lock_acquire+0x8>)
 800658a:	f000 b8d8 	b.w	800673e <__retarget_lock_acquire_recursive>
 800658e:	bf00      	nop
 8006590:	200041f1 	.word	0x200041f1

08006594 <__sfp_lock_release>:
 8006594:	4801      	ldr	r0, [pc, #4]	; (800659c <__sfp_lock_release+0x8>)
 8006596:	f000 b8d3 	b.w	8006740 <__retarget_lock_release_recursive>
 800659a:	bf00      	nop
 800659c:	200041f1 	.word	0x200041f1

080065a0 <__sinit_lock_acquire>:
 80065a0:	4801      	ldr	r0, [pc, #4]	; (80065a8 <__sinit_lock_acquire+0x8>)
 80065a2:	f000 b8cc 	b.w	800673e <__retarget_lock_acquire_recursive>
 80065a6:	bf00      	nop
 80065a8:	200041f2 	.word	0x200041f2

080065ac <__sinit_lock_release>:
 80065ac:	4801      	ldr	r0, [pc, #4]	; (80065b4 <__sinit_lock_release+0x8>)
 80065ae:	f000 b8c7 	b.w	8006740 <__retarget_lock_release_recursive>
 80065b2:	bf00      	nop
 80065b4:	200041f2 	.word	0x200041f2

080065b8 <__sinit>:
 80065b8:	b510      	push	{r4, lr}
 80065ba:	4604      	mov	r4, r0
 80065bc:	f7ff fff0 	bl	80065a0 <__sinit_lock_acquire>
 80065c0:	69a3      	ldr	r3, [r4, #24]
 80065c2:	b11b      	cbz	r3, 80065cc <__sinit+0x14>
 80065c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065c8:	f7ff bff0 	b.w	80065ac <__sinit_lock_release>
 80065cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80065d0:	6523      	str	r3, [r4, #80]	; 0x50
 80065d2:	4b13      	ldr	r3, [pc, #76]	; (8006620 <__sinit+0x68>)
 80065d4:	4a13      	ldr	r2, [pc, #76]	; (8006624 <__sinit+0x6c>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	62a2      	str	r2, [r4, #40]	; 0x28
 80065da:	42a3      	cmp	r3, r4
 80065dc:	bf04      	itt	eq
 80065de:	2301      	moveq	r3, #1
 80065e0:	61a3      	streq	r3, [r4, #24]
 80065e2:	4620      	mov	r0, r4
 80065e4:	f000 f820 	bl	8006628 <__sfp>
 80065e8:	6060      	str	r0, [r4, #4]
 80065ea:	4620      	mov	r0, r4
 80065ec:	f000 f81c 	bl	8006628 <__sfp>
 80065f0:	60a0      	str	r0, [r4, #8]
 80065f2:	4620      	mov	r0, r4
 80065f4:	f000 f818 	bl	8006628 <__sfp>
 80065f8:	2200      	movs	r2, #0
 80065fa:	60e0      	str	r0, [r4, #12]
 80065fc:	2104      	movs	r1, #4
 80065fe:	6860      	ldr	r0, [r4, #4]
 8006600:	f7ff ff82 	bl	8006508 <std>
 8006604:	68a0      	ldr	r0, [r4, #8]
 8006606:	2201      	movs	r2, #1
 8006608:	2109      	movs	r1, #9
 800660a:	f7ff ff7d 	bl	8006508 <std>
 800660e:	68e0      	ldr	r0, [r4, #12]
 8006610:	2202      	movs	r2, #2
 8006612:	2112      	movs	r1, #18
 8006614:	f7ff ff78 	bl	8006508 <std>
 8006618:	2301      	movs	r3, #1
 800661a:	61a3      	str	r3, [r4, #24]
 800661c:	e7d2      	b.n	80065c4 <__sinit+0xc>
 800661e:	bf00      	nop
 8006620:	08007d98 	.word	0x08007d98
 8006624:	08006551 	.word	0x08006551

08006628 <__sfp>:
 8006628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800662a:	4607      	mov	r7, r0
 800662c:	f7ff ffac 	bl	8006588 <__sfp_lock_acquire>
 8006630:	4b1e      	ldr	r3, [pc, #120]	; (80066ac <__sfp+0x84>)
 8006632:	681e      	ldr	r6, [r3, #0]
 8006634:	69b3      	ldr	r3, [r6, #24]
 8006636:	b913      	cbnz	r3, 800663e <__sfp+0x16>
 8006638:	4630      	mov	r0, r6
 800663a:	f7ff ffbd 	bl	80065b8 <__sinit>
 800663e:	3648      	adds	r6, #72	; 0x48
 8006640:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006644:	3b01      	subs	r3, #1
 8006646:	d503      	bpl.n	8006650 <__sfp+0x28>
 8006648:	6833      	ldr	r3, [r6, #0]
 800664a:	b30b      	cbz	r3, 8006690 <__sfp+0x68>
 800664c:	6836      	ldr	r6, [r6, #0]
 800664e:	e7f7      	b.n	8006640 <__sfp+0x18>
 8006650:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006654:	b9d5      	cbnz	r5, 800668c <__sfp+0x64>
 8006656:	4b16      	ldr	r3, [pc, #88]	; (80066b0 <__sfp+0x88>)
 8006658:	60e3      	str	r3, [r4, #12]
 800665a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800665e:	6665      	str	r5, [r4, #100]	; 0x64
 8006660:	f000 f86c 	bl	800673c <__retarget_lock_init_recursive>
 8006664:	f7ff ff96 	bl	8006594 <__sfp_lock_release>
 8006668:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800666c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006670:	6025      	str	r5, [r4, #0]
 8006672:	61a5      	str	r5, [r4, #24]
 8006674:	2208      	movs	r2, #8
 8006676:	4629      	mov	r1, r5
 8006678:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800667c:	f000 f86f 	bl	800675e <memset>
 8006680:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006684:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006688:	4620      	mov	r0, r4
 800668a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800668c:	3468      	adds	r4, #104	; 0x68
 800668e:	e7d9      	b.n	8006644 <__sfp+0x1c>
 8006690:	2104      	movs	r1, #4
 8006692:	4638      	mov	r0, r7
 8006694:	f7ff ff62 	bl	800655c <__sfmoreglue>
 8006698:	4604      	mov	r4, r0
 800669a:	6030      	str	r0, [r6, #0]
 800669c:	2800      	cmp	r0, #0
 800669e:	d1d5      	bne.n	800664c <__sfp+0x24>
 80066a0:	f7ff ff78 	bl	8006594 <__sfp_lock_release>
 80066a4:	230c      	movs	r3, #12
 80066a6:	603b      	str	r3, [r7, #0]
 80066a8:	e7ee      	b.n	8006688 <__sfp+0x60>
 80066aa:	bf00      	nop
 80066ac:	08007d98 	.word	0x08007d98
 80066b0:	ffff0001 	.word	0xffff0001

080066b4 <_fwalk_reent>:
 80066b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066b8:	4606      	mov	r6, r0
 80066ba:	4688      	mov	r8, r1
 80066bc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80066c0:	2700      	movs	r7, #0
 80066c2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80066c6:	f1b9 0901 	subs.w	r9, r9, #1
 80066ca:	d505      	bpl.n	80066d8 <_fwalk_reent+0x24>
 80066cc:	6824      	ldr	r4, [r4, #0]
 80066ce:	2c00      	cmp	r4, #0
 80066d0:	d1f7      	bne.n	80066c2 <_fwalk_reent+0xe>
 80066d2:	4638      	mov	r0, r7
 80066d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066d8:	89ab      	ldrh	r3, [r5, #12]
 80066da:	2b01      	cmp	r3, #1
 80066dc:	d907      	bls.n	80066ee <_fwalk_reent+0x3a>
 80066de:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80066e2:	3301      	adds	r3, #1
 80066e4:	d003      	beq.n	80066ee <_fwalk_reent+0x3a>
 80066e6:	4629      	mov	r1, r5
 80066e8:	4630      	mov	r0, r6
 80066ea:	47c0      	blx	r8
 80066ec:	4307      	orrs	r7, r0
 80066ee:	3568      	adds	r5, #104	; 0x68
 80066f0:	e7e9      	b.n	80066c6 <_fwalk_reent+0x12>
	...

080066f4 <__libc_init_array>:
 80066f4:	b570      	push	{r4, r5, r6, lr}
 80066f6:	4d0d      	ldr	r5, [pc, #52]	; (800672c <__libc_init_array+0x38>)
 80066f8:	4c0d      	ldr	r4, [pc, #52]	; (8006730 <__libc_init_array+0x3c>)
 80066fa:	1b64      	subs	r4, r4, r5
 80066fc:	10a4      	asrs	r4, r4, #2
 80066fe:	2600      	movs	r6, #0
 8006700:	42a6      	cmp	r6, r4
 8006702:	d109      	bne.n	8006718 <__libc_init_array+0x24>
 8006704:	4d0b      	ldr	r5, [pc, #44]	; (8006734 <__libc_init_array+0x40>)
 8006706:	4c0c      	ldr	r4, [pc, #48]	; (8006738 <__libc_init_array+0x44>)
 8006708:	f001 fa94 	bl	8007c34 <_init>
 800670c:	1b64      	subs	r4, r4, r5
 800670e:	10a4      	asrs	r4, r4, #2
 8006710:	2600      	movs	r6, #0
 8006712:	42a6      	cmp	r6, r4
 8006714:	d105      	bne.n	8006722 <__libc_init_array+0x2e>
 8006716:	bd70      	pop	{r4, r5, r6, pc}
 8006718:	f855 3b04 	ldr.w	r3, [r5], #4
 800671c:	4798      	blx	r3
 800671e:	3601      	adds	r6, #1
 8006720:	e7ee      	b.n	8006700 <__libc_init_array+0xc>
 8006722:	f855 3b04 	ldr.w	r3, [r5], #4
 8006726:	4798      	blx	r3
 8006728:	3601      	adds	r6, #1
 800672a:	e7f2      	b.n	8006712 <__libc_init_array+0x1e>
 800672c:	08007dd8 	.word	0x08007dd8
 8006730:	08007dd8 	.word	0x08007dd8
 8006734:	08007dd8 	.word	0x08007dd8
 8006738:	08007ddc 	.word	0x08007ddc

0800673c <__retarget_lock_init_recursive>:
 800673c:	4770      	bx	lr

0800673e <__retarget_lock_acquire_recursive>:
 800673e:	4770      	bx	lr

08006740 <__retarget_lock_release_recursive>:
 8006740:	4770      	bx	lr

08006742 <memcpy>:
 8006742:	440a      	add	r2, r1
 8006744:	4291      	cmp	r1, r2
 8006746:	f100 33ff 	add.w	r3, r0, #4294967295
 800674a:	d100      	bne.n	800674e <memcpy+0xc>
 800674c:	4770      	bx	lr
 800674e:	b510      	push	{r4, lr}
 8006750:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006754:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006758:	4291      	cmp	r1, r2
 800675a:	d1f9      	bne.n	8006750 <memcpy+0xe>
 800675c:	bd10      	pop	{r4, pc}

0800675e <memset>:
 800675e:	4402      	add	r2, r0
 8006760:	4603      	mov	r3, r0
 8006762:	4293      	cmp	r3, r2
 8006764:	d100      	bne.n	8006768 <memset+0xa>
 8006766:	4770      	bx	lr
 8006768:	f803 1b01 	strb.w	r1, [r3], #1
 800676c:	e7f9      	b.n	8006762 <memset+0x4>
	...

08006770 <sbrk_aligned>:
 8006770:	b570      	push	{r4, r5, r6, lr}
 8006772:	4e0e      	ldr	r6, [pc, #56]	; (80067ac <sbrk_aligned+0x3c>)
 8006774:	460c      	mov	r4, r1
 8006776:	6831      	ldr	r1, [r6, #0]
 8006778:	4605      	mov	r5, r0
 800677a:	b911      	cbnz	r1, 8006782 <sbrk_aligned+0x12>
 800677c:	f000 f96c 	bl	8006a58 <_sbrk_r>
 8006780:	6030      	str	r0, [r6, #0]
 8006782:	4621      	mov	r1, r4
 8006784:	4628      	mov	r0, r5
 8006786:	f000 f967 	bl	8006a58 <_sbrk_r>
 800678a:	1c43      	adds	r3, r0, #1
 800678c:	d00a      	beq.n	80067a4 <sbrk_aligned+0x34>
 800678e:	1cc4      	adds	r4, r0, #3
 8006790:	f024 0403 	bic.w	r4, r4, #3
 8006794:	42a0      	cmp	r0, r4
 8006796:	d007      	beq.n	80067a8 <sbrk_aligned+0x38>
 8006798:	1a21      	subs	r1, r4, r0
 800679a:	4628      	mov	r0, r5
 800679c:	f000 f95c 	bl	8006a58 <_sbrk_r>
 80067a0:	3001      	adds	r0, #1
 80067a2:	d101      	bne.n	80067a8 <sbrk_aligned+0x38>
 80067a4:	f04f 34ff 	mov.w	r4, #4294967295
 80067a8:	4620      	mov	r0, r4
 80067aa:	bd70      	pop	{r4, r5, r6, pc}
 80067ac:	200041f8 	.word	0x200041f8

080067b0 <_malloc_r>:
 80067b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067b4:	1ccd      	adds	r5, r1, #3
 80067b6:	f025 0503 	bic.w	r5, r5, #3
 80067ba:	3508      	adds	r5, #8
 80067bc:	2d0c      	cmp	r5, #12
 80067be:	bf38      	it	cc
 80067c0:	250c      	movcc	r5, #12
 80067c2:	2d00      	cmp	r5, #0
 80067c4:	4607      	mov	r7, r0
 80067c6:	db01      	blt.n	80067cc <_malloc_r+0x1c>
 80067c8:	42a9      	cmp	r1, r5
 80067ca:	d905      	bls.n	80067d8 <_malloc_r+0x28>
 80067cc:	230c      	movs	r3, #12
 80067ce:	603b      	str	r3, [r7, #0]
 80067d0:	2600      	movs	r6, #0
 80067d2:	4630      	mov	r0, r6
 80067d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067d8:	4e2e      	ldr	r6, [pc, #184]	; (8006894 <_malloc_r+0xe4>)
 80067da:	f000 fbcd 	bl	8006f78 <__malloc_lock>
 80067de:	6833      	ldr	r3, [r6, #0]
 80067e0:	461c      	mov	r4, r3
 80067e2:	bb34      	cbnz	r4, 8006832 <_malloc_r+0x82>
 80067e4:	4629      	mov	r1, r5
 80067e6:	4638      	mov	r0, r7
 80067e8:	f7ff ffc2 	bl	8006770 <sbrk_aligned>
 80067ec:	1c43      	adds	r3, r0, #1
 80067ee:	4604      	mov	r4, r0
 80067f0:	d14d      	bne.n	800688e <_malloc_r+0xde>
 80067f2:	6834      	ldr	r4, [r6, #0]
 80067f4:	4626      	mov	r6, r4
 80067f6:	2e00      	cmp	r6, #0
 80067f8:	d140      	bne.n	800687c <_malloc_r+0xcc>
 80067fa:	6823      	ldr	r3, [r4, #0]
 80067fc:	4631      	mov	r1, r6
 80067fe:	4638      	mov	r0, r7
 8006800:	eb04 0803 	add.w	r8, r4, r3
 8006804:	f000 f928 	bl	8006a58 <_sbrk_r>
 8006808:	4580      	cmp	r8, r0
 800680a:	d13a      	bne.n	8006882 <_malloc_r+0xd2>
 800680c:	6821      	ldr	r1, [r4, #0]
 800680e:	3503      	adds	r5, #3
 8006810:	1a6d      	subs	r5, r5, r1
 8006812:	f025 0503 	bic.w	r5, r5, #3
 8006816:	3508      	adds	r5, #8
 8006818:	2d0c      	cmp	r5, #12
 800681a:	bf38      	it	cc
 800681c:	250c      	movcc	r5, #12
 800681e:	4629      	mov	r1, r5
 8006820:	4638      	mov	r0, r7
 8006822:	f7ff ffa5 	bl	8006770 <sbrk_aligned>
 8006826:	3001      	adds	r0, #1
 8006828:	d02b      	beq.n	8006882 <_malloc_r+0xd2>
 800682a:	6823      	ldr	r3, [r4, #0]
 800682c:	442b      	add	r3, r5
 800682e:	6023      	str	r3, [r4, #0]
 8006830:	e00e      	b.n	8006850 <_malloc_r+0xa0>
 8006832:	6822      	ldr	r2, [r4, #0]
 8006834:	1b52      	subs	r2, r2, r5
 8006836:	d41e      	bmi.n	8006876 <_malloc_r+0xc6>
 8006838:	2a0b      	cmp	r2, #11
 800683a:	d916      	bls.n	800686a <_malloc_r+0xba>
 800683c:	1961      	adds	r1, r4, r5
 800683e:	42a3      	cmp	r3, r4
 8006840:	6025      	str	r5, [r4, #0]
 8006842:	bf18      	it	ne
 8006844:	6059      	strne	r1, [r3, #4]
 8006846:	6863      	ldr	r3, [r4, #4]
 8006848:	bf08      	it	eq
 800684a:	6031      	streq	r1, [r6, #0]
 800684c:	5162      	str	r2, [r4, r5]
 800684e:	604b      	str	r3, [r1, #4]
 8006850:	4638      	mov	r0, r7
 8006852:	f104 060b 	add.w	r6, r4, #11
 8006856:	f000 fb95 	bl	8006f84 <__malloc_unlock>
 800685a:	f026 0607 	bic.w	r6, r6, #7
 800685e:	1d23      	adds	r3, r4, #4
 8006860:	1af2      	subs	r2, r6, r3
 8006862:	d0b6      	beq.n	80067d2 <_malloc_r+0x22>
 8006864:	1b9b      	subs	r3, r3, r6
 8006866:	50a3      	str	r3, [r4, r2]
 8006868:	e7b3      	b.n	80067d2 <_malloc_r+0x22>
 800686a:	6862      	ldr	r2, [r4, #4]
 800686c:	42a3      	cmp	r3, r4
 800686e:	bf0c      	ite	eq
 8006870:	6032      	streq	r2, [r6, #0]
 8006872:	605a      	strne	r2, [r3, #4]
 8006874:	e7ec      	b.n	8006850 <_malloc_r+0xa0>
 8006876:	4623      	mov	r3, r4
 8006878:	6864      	ldr	r4, [r4, #4]
 800687a:	e7b2      	b.n	80067e2 <_malloc_r+0x32>
 800687c:	4634      	mov	r4, r6
 800687e:	6876      	ldr	r6, [r6, #4]
 8006880:	e7b9      	b.n	80067f6 <_malloc_r+0x46>
 8006882:	230c      	movs	r3, #12
 8006884:	603b      	str	r3, [r7, #0]
 8006886:	4638      	mov	r0, r7
 8006888:	f000 fb7c 	bl	8006f84 <__malloc_unlock>
 800688c:	e7a1      	b.n	80067d2 <_malloc_r+0x22>
 800688e:	6025      	str	r5, [r4, #0]
 8006890:	e7de      	b.n	8006850 <_malloc_r+0xa0>
 8006892:	bf00      	nop
 8006894:	200041f4 	.word	0x200041f4

08006898 <_puts_r>:
 8006898:	b570      	push	{r4, r5, r6, lr}
 800689a:	460e      	mov	r6, r1
 800689c:	4605      	mov	r5, r0
 800689e:	b118      	cbz	r0, 80068a8 <_puts_r+0x10>
 80068a0:	6983      	ldr	r3, [r0, #24]
 80068a2:	b90b      	cbnz	r3, 80068a8 <_puts_r+0x10>
 80068a4:	f7ff fe88 	bl	80065b8 <__sinit>
 80068a8:	69ab      	ldr	r3, [r5, #24]
 80068aa:	68ac      	ldr	r4, [r5, #8]
 80068ac:	b913      	cbnz	r3, 80068b4 <_puts_r+0x1c>
 80068ae:	4628      	mov	r0, r5
 80068b0:	f7ff fe82 	bl	80065b8 <__sinit>
 80068b4:	4b2c      	ldr	r3, [pc, #176]	; (8006968 <_puts_r+0xd0>)
 80068b6:	429c      	cmp	r4, r3
 80068b8:	d120      	bne.n	80068fc <_puts_r+0x64>
 80068ba:	686c      	ldr	r4, [r5, #4]
 80068bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80068be:	07db      	lsls	r3, r3, #31
 80068c0:	d405      	bmi.n	80068ce <_puts_r+0x36>
 80068c2:	89a3      	ldrh	r3, [r4, #12]
 80068c4:	0598      	lsls	r0, r3, #22
 80068c6:	d402      	bmi.n	80068ce <_puts_r+0x36>
 80068c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80068ca:	f7ff ff38 	bl	800673e <__retarget_lock_acquire_recursive>
 80068ce:	89a3      	ldrh	r3, [r4, #12]
 80068d0:	0719      	lsls	r1, r3, #28
 80068d2:	d51d      	bpl.n	8006910 <_puts_r+0x78>
 80068d4:	6923      	ldr	r3, [r4, #16]
 80068d6:	b1db      	cbz	r3, 8006910 <_puts_r+0x78>
 80068d8:	3e01      	subs	r6, #1
 80068da:	68a3      	ldr	r3, [r4, #8]
 80068dc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80068e0:	3b01      	subs	r3, #1
 80068e2:	60a3      	str	r3, [r4, #8]
 80068e4:	bb39      	cbnz	r1, 8006936 <_puts_r+0x9e>
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	da38      	bge.n	800695c <_puts_r+0xc4>
 80068ea:	4622      	mov	r2, r4
 80068ec:	210a      	movs	r1, #10
 80068ee:	4628      	mov	r0, r5
 80068f0:	f000 f926 	bl	8006b40 <__swbuf_r>
 80068f4:	3001      	adds	r0, #1
 80068f6:	d011      	beq.n	800691c <_puts_r+0x84>
 80068f8:	250a      	movs	r5, #10
 80068fa:	e011      	b.n	8006920 <_puts_r+0x88>
 80068fc:	4b1b      	ldr	r3, [pc, #108]	; (800696c <_puts_r+0xd4>)
 80068fe:	429c      	cmp	r4, r3
 8006900:	d101      	bne.n	8006906 <_puts_r+0x6e>
 8006902:	68ac      	ldr	r4, [r5, #8]
 8006904:	e7da      	b.n	80068bc <_puts_r+0x24>
 8006906:	4b1a      	ldr	r3, [pc, #104]	; (8006970 <_puts_r+0xd8>)
 8006908:	429c      	cmp	r4, r3
 800690a:	bf08      	it	eq
 800690c:	68ec      	ldreq	r4, [r5, #12]
 800690e:	e7d5      	b.n	80068bc <_puts_r+0x24>
 8006910:	4621      	mov	r1, r4
 8006912:	4628      	mov	r0, r5
 8006914:	f000 f978 	bl	8006c08 <__swsetup_r>
 8006918:	2800      	cmp	r0, #0
 800691a:	d0dd      	beq.n	80068d8 <_puts_r+0x40>
 800691c:	f04f 35ff 	mov.w	r5, #4294967295
 8006920:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006922:	07da      	lsls	r2, r3, #31
 8006924:	d405      	bmi.n	8006932 <_puts_r+0x9a>
 8006926:	89a3      	ldrh	r3, [r4, #12]
 8006928:	059b      	lsls	r3, r3, #22
 800692a:	d402      	bmi.n	8006932 <_puts_r+0x9a>
 800692c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800692e:	f7ff ff07 	bl	8006740 <__retarget_lock_release_recursive>
 8006932:	4628      	mov	r0, r5
 8006934:	bd70      	pop	{r4, r5, r6, pc}
 8006936:	2b00      	cmp	r3, #0
 8006938:	da04      	bge.n	8006944 <_puts_r+0xac>
 800693a:	69a2      	ldr	r2, [r4, #24]
 800693c:	429a      	cmp	r2, r3
 800693e:	dc06      	bgt.n	800694e <_puts_r+0xb6>
 8006940:	290a      	cmp	r1, #10
 8006942:	d004      	beq.n	800694e <_puts_r+0xb6>
 8006944:	6823      	ldr	r3, [r4, #0]
 8006946:	1c5a      	adds	r2, r3, #1
 8006948:	6022      	str	r2, [r4, #0]
 800694a:	7019      	strb	r1, [r3, #0]
 800694c:	e7c5      	b.n	80068da <_puts_r+0x42>
 800694e:	4622      	mov	r2, r4
 8006950:	4628      	mov	r0, r5
 8006952:	f000 f8f5 	bl	8006b40 <__swbuf_r>
 8006956:	3001      	adds	r0, #1
 8006958:	d1bf      	bne.n	80068da <_puts_r+0x42>
 800695a:	e7df      	b.n	800691c <_puts_r+0x84>
 800695c:	6823      	ldr	r3, [r4, #0]
 800695e:	250a      	movs	r5, #10
 8006960:	1c5a      	adds	r2, r3, #1
 8006962:	6022      	str	r2, [r4, #0]
 8006964:	701d      	strb	r5, [r3, #0]
 8006966:	e7db      	b.n	8006920 <_puts_r+0x88>
 8006968:	08007d58 	.word	0x08007d58
 800696c:	08007d78 	.word	0x08007d78
 8006970:	08007d38 	.word	0x08007d38

08006974 <puts>:
 8006974:	4b02      	ldr	r3, [pc, #8]	; (8006980 <puts+0xc>)
 8006976:	4601      	mov	r1, r0
 8006978:	6818      	ldr	r0, [r3, #0]
 800697a:	f7ff bf8d 	b.w	8006898 <_puts_r>
 800697e:	bf00      	nop
 8006980:	20000010 	.word	0x20000010

08006984 <cleanup_glue>:
 8006984:	b538      	push	{r3, r4, r5, lr}
 8006986:	460c      	mov	r4, r1
 8006988:	6809      	ldr	r1, [r1, #0]
 800698a:	4605      	mov	r5, r0
 800698c:	b109      	cbz	r1, 8006992 <cleanup_glue+0xe>
 800698e:	f7ff fff9 	bl	8006984 <cleanup_glue>
 8006992:	4621      	mov	r1, r4
 8006994:	4628      	mov	r0, r5
 8006996:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800699a:	f000 baf9 	b.w	8006f90 <_free_r>
	...

080069a0 <_reclaim_reent>:
 80069a0:	4b2c      	ldr	r3, [pc, #176]	; (8006a54 <_reclaim_reent+0xb4>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4283      	cmp	r3, r0
 80069a6:	b570      	push	{r4, r5, r6, lr}
 80069a8:	4604      	mov	r4, r0
 80069aa:	d051      	beq.n	8006a50 <_reclaim_reent+0xb0>
 80069ac:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80069ae:	b143      	cbz	r3, 80069c2 <_reclaim_reent+0x22>
 80069b0:	68db      	ldr	r3, [r3, #12]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d14a      	bne.n	8006a4c <_reclaim_reent+0xac>
 80069b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80069b8:	6819      	ldr	r1, [r3, #0]
 80069ba:	b111      	cbz	r1, 80069c2 <_reclaim_reent+0x22>
 80069bc:	4620      	mov	r0, r4
 80069be:	f000 fae7 	bl	8006f90 <_free_r>
 80069c2:	6961      	ldr	r1, [r4, #20]
 80069c4:	b111      	cbz	r1, 80069cc <_reclaim_reent+0x2c>
 80069c6:	4620      	mov	r0, r4
 80069c8:	f000 fae2 	bl	8006f90 <_free_r>
 80069cc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80069ce:	b111      	cbz	r1, 80069d6 <_reclaim_reent+0x36>
 80069d0:	4620      	mov	r0, r4
 80069d2:	f000 fadd 	bl	8006f90 <_free_r>
 80069d6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80069d8:	b111      	cbz	r1, 80069e0 <_reclaim_reent+0x40>
 80069da:	4620      	mov	r0, r4
 80069dc:	f000 fad8 	bl	8006f90 <_free_r>
 80069e0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80069e2:	b111      	cbz	r1, 80069ea <_reclaim_reent+0x4a>
 80069e4:	4620      	mov	r0, r4
 80069e6:	f000 fad3 	bl	8006f90 <_free_r>
 80069ea:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80069ec:	b111      	cbz	r1, 80069f4 <_reclaim_reent+0x54>
 80069ee:	4620      	mov	r0, r4
 80069f0:	f000 face 	bl	8006f90 <_free_r>
 80069f4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80069f6:	b111      	cbz	r1, 80069fe <_reclaim_reent+0x5e>
 80069f8:	4620      	mov	r0, r4
 80069fa:	f000 fac9 	bl	8006f90 <_free_r>
 80069fe:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006a00:	b111      	cbz	r1, 8006a08 <_reclaim_reent+0x68>
 8006a02:	4620      	mov	r0, r4
 8006a04:	f000 fac4 	bl	8006f90 <_free_r>
 8006a08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a0a:	b111      	cbz	r1, 8006a12 <_reclaim_reent+0x72>
 8006a0c:	4620      	mov	r0, r4
 8006a0e:	f000 fabf 	bl	8006f90 <_free_r>
 8006a12:	69a3      	ldr	r3, [r4, #24]
 8006a14:	b1e3      	cbz	r3, 8006a50 <_reclaim_reent+0xb0>
 8006a16:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006a18:	4620      	mov	r0, r4
 8006a1a:	4798      	blx	r3
 8006a1c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006a1e:	b1b9      	cbz	r1, 8006a50 <_reclaim_reent+0xb0>
 8006a20:	4620      	mov	r0, r4
 8006a22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006a26:	f7ff bfad 	b.w	8006984 <cleanup_glue>
 8006a2a:	5949      	ldr	r1, [r1, r5]
 8006a2c:	b941      	cbnz	r1, 8006a40 <_reclaim_reent+0xa0>
 8006a2e:	3504      	adds	r5, #4
 8006a30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a32:	2d80      	cmp	r5, #128	; 0x80
 8006a34:	68d9      	ldr	r1, [r3, #12]
 8006a36:	d1f8      	bne.n	8006a2a <_reclaim_reent+0x8a>
 8006a38:	4620      	mov	r0, r4
 8006a3a:	f000 faa9 	bl	8006f90 <_free_r>
 8006a3e:	e7ba      	b.n	80069b6 <_reclaim_reent+0x16>
 8006a40:	680e      	ldr	r6, [r1, #0]
 8006a42:	4620      	mov	r0, r4
 8006a44:	f000 faa4 	bl	8006f90 <_free_r>
 8006a48:	4631      	mov	r1, r6
 8006a4a:	e7ef      	b.n	8006a2c <_reclaim_reent+0x8c>
 8006a4c:	2500      	movs	r5, #0
 8006a4e:	e7ef      	b.n	8006a30 <_reclaim_reent+0x90>
 8006a50:	bd70      	pop	{r4, r5, r6, pc}
 8006a52:	bf00      	nop
 8006a54:	20000010 	.word	0x20000010

08006a58 <_sbrk_r>:
 8006a58:	b538      	push	{r3, r4, r5, lr}
 8006a5a:	4d06      	ldr	r5, [pc, #24]	; (8006a74 <_sbrk_r+0x1c>)
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	4604      	mov	r4, r0
 8006a60:	4608      	mov	r0, r1
 8006a62:	602b      	str	r3, [r5, #0]
 8006a64:	f7fb f810 	bl	8001a88 <_sbrk>
 8006a68:	1c43      	adds	r3, r0, #1
 8006a6a:	d102      	bne.n	8006a72 <_sbrk_r+0x1a>
 8006a6c:	682b      	ldr	r3, [r5, #0]
 8006a6e:	b103      	cbz	r3, 8006a72 <_sbrk_r+0x1a>
 8006a70:	6023      	str	r3, [r4, #0]
 8006a72:	bd38      	pop	{r3, r4, r5, pc}
 8006a74:	200041fc 	.word	0x200041fc

08006a78 <siprintf>:
 8006a78:	b40e      	push	{r1, r2, r3}
 8006a7a:	b500      	push	{lr}
 8006a7c:	b09c      	sub	sp, #112	; 0x70
 8006a7e:	ab1d      	add	r3, sp, #116	; 0x74
 8006a80:	9002      	str	r0, [sp, #8]
 8006a82:	9006      	str	r0, [sp, #24]
 8006a84:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006a88:	4809      	ldr	r0, [pc, #36]	; (8006ab0 <siprintf+0x38>)
 8006a8a:	9107      	str	r1, [sp, #28]
 8006a8c:	9104      	str	r1, [sp, #16]
 8006a8e:	4909      	ldr	r1, [pc, #36]	; (8006ab4 <siprintf+0x3c>)
 8006a90:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a94:	9105      	str	r1, [sp, #20]
 8006a96:	6800      	ldr	r0, [r0, #0]
 8006a98:	9301      	str	r3, [sp, #4]
 8006a9a:	a902      	add	r1, sp, #8
 8006a9c:	f000 fb20 	bl	80070e0 <_svfiprintf_r>
 8006aa0:	9b02      	ldr	r3, [sp, #8]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	701a      	strb	r2, [r3, #0]
 8006aa6:	b01c      	add	sp, #112	; 0x70
 8006aa8:	f85d eb04 	ldr.w	lr, [sp], #4
 8006aac:	b003      	add	sp, #12
 8006aae:	4770      	bx	lr
 8006ab0:	20000010 	.word	0x20000010
 8006ab4:	ffff0208 	.word	0xffff0208

08006ab8 <__sread>:
 8006ab8:	b510      	push	{r4, lr}
 8006aba:	460c      	mov	r4, r1
 8006abc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ac0:	f000 fda2 	bl	8007608 <_read_r>
 8006ac4:	2800      	cmp	r0, #0
 8006ac6:	bfab      	itete	ge
 8006ac8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006aca:	89a3      	ldrhlt	r3, [r4, #12]
 8006acc:	181b      	addge	r3, r3, r0
 8006ace:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006ad2:	bfac      	ite	ge
 8006ad4:	6563      	strge	r3, [r4, #84]	; 0x54
 8006ad6:	81a3      	strhlt	r3, [r4, #12]
 8006ad8:	bd10      	pop	{r4, pc}

08006ada <__swrite>:
 8006ada:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ade:	461f      	mov	r7, r3
 8006ae0:	898b      	ldrh	r3, [r1, #12]
 8006ae2:	05db      	lsls	r3, r3, #23
 8006ae4:	4605      	mov	r5, r0
 8006ae6:	460c      	mov	r4, r1
 8006ae8:	4616      	mov	r6, r2
 8006aea:	d505      	bpl.n	8006af8 <__swrite+0x1e>
 8006aec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006af0:	2302      	movs	r3, #2
 8006af2:	2200      	movs	r2, #0
 8006af4:	f000 f9c8 	bl	8006e88 <_lseek_r>
 8006af8:	89a3      	ldrh	r3, [r4, #12]
 8006afa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006afe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b02:	81a3      	strh	r3, [r4, #12]
 8006b04:	4632      	mov	r2, r6
 8006b06:	463b      	mov	r3, r7
 8006b08:	4628      	mov	r0, r5
 8006b0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b0e:	f000 b869 	b.w	8006be4 <_write_r>

08006b12 <__sseek>:
 8006b12:	b510      	push	{r4, lr}
 8006b14:	460c      	mov	r4, r1
 8006b16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b1a:	f000 f9b5 	bl	8006e88 <_lseek_r>
 8006b1e:	1c43      	adds	r3, r0, #1
 8006b20:	89a3      	ldrh	r3, [r4, #12]
 8006b22:	bf15      	itete	ne
 8006b24:	6560      	strne	r0, [r4, #84]	; 0x54
 8006b26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006b2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006b2e:	81a3      	strheq	r3, [r4, #12]
 8006b30:	bf18      	it	ne
 8006b32:	81a3      	strhne	r3, [r4, #12]
 8006b34:	bd10      	pop	{r4, pc}

08006b36 <__sclose>:
 8006b36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b3a:	f000 b8d3 	b.w	8006ce4 <_close_r>
	...

08006b40 <__swbuf_r>:
 8006b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b42:	460e      	mov	r6, r1
 8006b44:	4614      	mov	r4, r2
 8006b46:	4605      	mov	r5, r0
 8006b48:	b118      	cbz	r0, 8006b52 <__swbuf_r+0x12>
 8006b4a:	6983      	ldr	r3, [r0, #24]
 8006b4c:	b90b      	cbnz	r3, 8006b52 <__swbuf_r+0x12>
 8006b4e:	f7ff fd33 	bl	80065b8 <__sinit>
 8006b52:	4b21      	ldr	r3, [pc, #132]	; (8006bd8 <__swbuf_r+0x98>)
 8006b54:	429c      	cmp	r4, r3
 8006b56:	d12b      	bne.n	8006bb0 <__swbuf_r+0x70>
 8006b58:	686c      	ldr	r4, [r5, #4]
 8006b5a:	69a3      	ldr	r3, [r4, #24]
 8006b5c:	60a3      	str	r3, [r4, #8]
 8006b5e:	89a3      	ldrh	r3, [r4, #12]
 8006b60:	071a      	lsls	r2, r3, #28
 8006b62:	d52f      	bpl.n	8006bc4 <__swbuf_r+0x84>
 8006b64:	6923      	ldr	r3, [r4, #16]
 8006b66:	b36b      	cbz	r3, 8006bc4 <__swbuf_r+0x84>
 8006b68:	6923      	ldr	r3, [r4, #16]
 8006b6a:	6820      	ldr	r0, [r4, #0]
 8006b6c:	1ac0      	subs	r0, r0, r3
 8006b6e:	6963      	ldr	r3, [r4, #20]
 8006b70:	b2f6      	uxtb	r6, r6
 8006b72:	4283      	cmp	r3, r0
 8006b74:	4637      	mov	r7, r6
 8006b76:	dc04      	bgt.n	8006b82 <__swbuf_r+0x42>
 8006b78:	4621      	mov	r1, r4
 8006b7a:	4628      	mov	r0, r5
 8006b7c:	f000 f948 	bl	8006e10 <_fflush_r>
 8006b80:	bb30      	cbnz	r0, 8006bd0 <__swbuf_r+0x90>
 8006b82:	68a3      	ldr	r3, [r4, #8]
 8006b84:	3b01      	subs	r3, #1
 8006b86:	60a3      	str	r3, [r4, #8]
 8006b88:	6823      	ldr	r3, [r4, #0]
 8006b8a:	1c5a      	adds	r2, r3, #1
 8006b8c:	6022      	str	r2, [r4, #0]
 8006b8e:	701e      	strb	r6, [r3, #0]
 8006b90:	6963      	ldr	r3, [r4, #20]
 8006b92:	3001      	adds	r0, #1
 8006b94:	4283      	cmp	r3, r0
 8006b96:	d004      	beq.n	8006ba2 <__swbuf_r+0x62>
 8006b98:	89a3      	ldrh	r3, [r4, #12]
 8006b9a:	07db      	lsls	r3, r3, #31
 8006b9c:	d506      	bpl.n	8006bac <__swbuf_r+0x6c>
 8006b9e:	2e0a      	cmp	r6, #10
 8006ba0:	d104      	bne.n	8006bac <__swbuf_r+0x6c>
 8006ba2:	4621      	mov	r1, r4
 8006ba4:	4628      	mov	r0, r5
 8006ba6:	f000 f933 	bl	8006e10 <_fflush_r>
 8006baa:	b988      	cbnz	r0, 8006bd0 <__swbuf_r+0x90>
 8006bac:	4638      	mov	r0, r7
 8006bae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006bb0:	4b0a      	ldr	r3, [pc, #40]	; (8006bdc <__swbuf_r+0x9c>)
 8006bb2:	429c      	cmp	r4, r3
 8006bb4:	d101      	bne.n	8006bba <__swbuf_r+0x7a>
 8006bb6:	68ac      	ldr	r4, [r5, #8]
 8006bb8:	e7cf      	b.n	8006b5a <__swbuf_r+0x1a>
 8006bba:	4b09      	ldr	r3, [pc, #36]	; (8006be0 <__swbuf_r+0xa0>)
 8006bbc:	429c      	cmp	r4, r3
 8006bbe:	bf08      	it	eq
 8006bc0:	68ec      	ldreq	r4, [r5, #12]
 8006bc2:	e7ca      	b.n	8006b5a <__swbuf_r+0x1a>
 8006bc4:	4621      	mov	r1, r4
 8006bc6:	4628      	mov	r0, r5
 8006bc8:	f000 f81e 	bl	8006c08 <__swsetup_r>
 8006bcc:	2800      	cmp	r0, #0
 8006bce:	d0cb      	beq.n	8006b68 <__swbuf_r+0x28>
 8006bd0:	f04f 37ff 	mov.w	r7, #4294967295
 8006bd4:	e7ea      	b.n	8006bac <__swbuf_r+0x6c>
 8006bd6:	bf00      	nop
 8006bd8:	08007d58 	.word	0x08007d58
 8006bdc:	08007d78 	.word	0x08007d78
 8006be0:	08007d38 	.word	0x08007d38

08006be4 <_write_r>:
 8006be4:	b538      	push	{r3, r4, r5, lr}
 8006be6:	4d07      	ldr	r5, [pc, #28]	; (8006c04 <_write_r+0x20>)
 8006be8:	4604      	mov	r4, r0
 8006bea:	4608      	mov	r0, r1
 8006bec:	4611      	mov	r1, r2
 8006bee:	2200      	movs	r2, #0
 8006bf0:	602a      	str	r2, [r5, #0]
 8006bf2:	461a      	mov	r2, r3
 8006bf4:	f7fa f9db 	bl	8000fae <_write>
 8006bf8:	1c43      	adds	r3, r0, #1
 8006bfa:	d102      	bne.n	8006c02 <_write_r+0x1e>
 8006bfc:	682b      	ldr	r3, [r5, #0]
 8006bfe:	b103      	cbz	r3, 8006c02 <_write_r+0x1e>
 8006c00:	6023      	str	r3, [r4, #0]
 8006c02:	bd38      	pop	{r3, r4, r5, pc}
 8006c04:	200041fc 	.word	0x200041fc

08006c08 <__swsetup_r>:
 8006c08:	4b32      	ldr	r3, [pc, #200]	; (8006cd4 <__swsetup_r+0xcc>)
 8006c0a:	b570      	push	{r4, r5, r6, lr}
 8006c0c:	681d      	ldr	r5, [r3, #0]
 8006c0e:	4606      	mov	r6, r0
 8006c10:	460c      	mov	r4, r1
 8006c12:	b125      	cbz	r5, 8006c1e <__swsetup_r+0x16>
 8006c14:	69ab      	ldr	r3, [r5, #24]
 8006c16:	b913      	cbnz	r3, 8006c1e <__swsetup_r+0x16>
 8006c18:	4628      	mov	r0, r5
 8006c1a:	f7ff fccd 	bl	80065b8 <__sinit>
 8006c1e:	4b2e      	ldr	r3, [pc, #184]	; (8006cd8 <__swsetup_r+0xd0>)
 8006c20:	429c      	cmp	r4, r3
 8006c22:	d10f      	bne.n	8006c44 <__swsetup_r+0x3c>
 8006c24:	686c      	ldr	r4, [r5, #4]
 8006c26:	89a3      	ldrh	r3, [r4, #12]
 8006c28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006c2c:	0719      	lsls	r1, r3, #28
 8006c2e:	d42c      	bmi.n	8006c8a <__swsetup_r+0x82>
 8006c30:	06dd      	lsls	r5, r3, #27
 8006c32:	d411      	bmi.n	8006c58 <__swsetup_r+0x50>
 8006c34:	2309      	movs	r3, #9
 8006c36:	6033      	str	r3, [r6, #0]
 8006c38:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006c3c:	81a3      	strh	r3, [r4, #12]
 8006c3e:	f04f 30ff 	mov.w	r0, #4294967295
 8006c42:	e03e      	b.n	8006cc2 <__swsetup_r+0xba>
 8006c44:	4b25      	ldr	r3, [pc, #148]	; (8006cdc <__swsetup_r+0xd4>)
 8006c46:	429c      	cmp	r4, r3
 8006c48:	d101      	bne.n	8006c4e <__swsetup_r+0x46>
 8006c4a:	68ac      	ldr	r4, [r5, #8]
 8006c4c:	e7eb      	b.n	8006c26 <__swsetup_r+0x1e>
 8006c4e:	4b24      	ldr	r3, [pc, #144]	; (8006ce0 <__swsetup_r+0xd8>)
 8006c50:	429c      	cmp	r4, r3
 8006c52:	bf08      	it	eq
 8006c54:	68ec      	ldreq	r4, [r5, #12]
 8006c56:	e7e6      	b.n	8006c26 <__swsetup_r+0x1e>
 8006c58:	0758      	lsls	r0, r3, #29
 8006c5a:	d512      	bpl.n	8006c82 <__swsetup_r+0x7a>
 8006c5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c5e:	b141      	cbz	r1, 8006c72 <__swsetup_r+0x6a>
 8006c60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006c64:	4299      	cmp	r1, r3
 8006c66:	d002      	beq.n	8006c6e <__swsetup_r+0x66>
 8006c68:	4630      	mov	r0, r6
 8006c6a:	f000 f991 	bl	8006f90 <_free_r>
 8006c6e:	2300      	movs	r3, #0
 8006c70:	6363      	str	r3, [r4, #52]	; 0x34
 8006c72:	89a3      	ldrh	r3, [r4, #12]
 8006c74:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006c78:	81a3      	strh	r3, [r4, #12]
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	6063      	str	r3, [r4, #4]
 8006c7e:	6923      	ldr	r3, [r4, #16]
 8006c80:	6023      	str	r3, [r4, #0]
 8006c82:	89a3      	ldrh	r3, [r4, #12]
 8006c84:	f043 0308 	orr.w	r3, r3, #8
 8006c88:	81a3      	strh	r3, [r4, #12]
 8006c8a:	6923      	ldr	r3, [r4, #16]
 8006c8c:	b94b      	cbnz	r3, 8006ca2 <__swsetup_r+0x9a>
 8006c8e:	89a3      	ldrh	r3, [r4, #12]
 8006c90:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006c94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c98:	d003      	beq.n	8006ca2 <__swsetup_r+0x9a>
 8006c9a:	4621      	mov	r1, r4
 8006c9c:	4630      	mov	r0, r6
 8006c9e:	f000 f92b 	bl	8006ef8 <__smakebuf_r>
 8006ca2:	89a0      	ldrh	r0, [r4, #12]
 8006ca4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006ca8:	f010 0301 	ands.w	r3, r0, #1
 8006cac:	d00a      	beq.n	8006cc4 <__swsetup_r+0xbc>
 8006cae:	2300      	movs	r3, #0
 8006cb0:	60a3      	str	r3, [r4, #8]
 8006cb2:	6963      	ldr	r3, [r4, #20]
 8006cb4:	425b      	negs	r3, r3
 8006cb6:	61a3      	str	r3, [r4, #24]
 8006cb8:	6923      	ldr	r3, [r4, #16]
 8006cba:	b943      	cbnz	r3, 8006cce <__swsetup_r+0xc6>
 8006cbc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006cc0:	d1ba      	bne.n	8006c38 <__swsetup_r+0x30>
 8006cc2:	bd70      	pop	{r4, r5, r6, pc}
 8006cc4:	0781      	lsls	r1, r0, #30
 8006cc6:	bf58      	it	pl
 8006cc8:	6963      	ldrpl	r3, [r4, #20]
 8006cca:	60a3      	str	r3, [r4, #8]
 8006ccc:	e7f4      	b.n	8006cb8 <__swsetup_r+0xb0>
 8006cce:	2000      	movs	r0, #0
 8006cd0:	e7f7      	b.n	8006cc2 <__swsetup_r+0xba>
 8006cd2:	bf00      	nop
 8006cd4:	20000010 	.word	0x20000010
 8006cd8:	08007d58 	.word	0x08007d58
 8006cdc:	08007d78 	.word	0x08007d78
 8006ce0:	08007d38 	.word	0x08007d38

08006ce4 <_close_r>:
 8006ce4:	b538      	push	{r3, r4, r5, lr}
 8006ce6:	4d06      	ldr	r5, [pc, #24]	; (8006d00 <_close_r+0x1c>)
 8006ce8:	2300      	movs	r3, #0
 8006cea:	4604      	mov	r4, r0
 8006cec:	4608      	mov	r0, r1
 8006cee:	602b      	str	r3, [r5, #0]
 8006cf0:	f7fa fe95 	bl	8001a1e <_close>
 8006cf4:	1c43      	adds	r3, r0, #1
 8006cf6:	d102      	bne.n	8006cfe <_close_r+0x1a>
 8006cf8:	682b      	ldr	r3, [r5, #0]
 8006cfa:	b103      	cbz	r3, 8006cfe <_close_r+0x1a>
 8006cfc:	6023      	str	r3, [r4, #0]
 8006cfe:	bd38      	pop	{r3, r4, r5, pc}
 8006d00:	200041fc 	.word	0x200041fc

08006d04 <__sflush_r>:
 8006d04:	898a      	ldrh	r2, [r1, #12]
 8006d06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d0a:	4605      	mov	r5, r0
 8006d0c:	0710      	lsls	r0, r2, #28
 8006d0e:	460c      	mov	r4, r1
 8006d10:	d458      	bmi.n	8006dc4 <__sflush_r+0xc0>
 8006d12:	684b      	ldr	r3, [r1, #4]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	dc05      	bgt.n	8006d24 <__sflush_r+0x20>
 8006d18:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	dc02      	bgt.n	8006d24 <__sflush_r+0x20>
 8006d1e:	2000      	movs	r0, #0
 8006d20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006d26:	2e00      	cmp	r6, #0
 8006d28:	d0f9      	beq.n	8006d1e <__sflush_r+0x1a>
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006d30:	682f      	ldr	r7, [r5, #0]
 8006d32:	602b      	str	r3, [r5, #0]
 8006d34:	d032      	beq.n	8006d9c <__sflush_r+0x98>
 8006d36:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006d38:	89a3      	ldrh	r3, [r4, #12]
 8006d3a:	075a      	lsls	r2, r3, #29
 8006d3c:	d505      	bpl.n	8006d4a <__sflush_r+0x46>
 8006d3e:	6863      	ldr	r3, [r4, #4]
 8006d40:	1ac0      	subs	r0, r0, r3
 8006d42:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006d44:	b10b      	cbz	r3, 8006d4a <__sflush_r+0x46>
 8006d46:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006d48:	1ac0      	subs	r0, r0, r3
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	4602      	mov	r2, r0
 8006d4e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006d50:	6a21      	ldr	r1, [r4, #32]
 8006d52:	4628      	mov	r0, r5
 8006d54:	47b0      	blx	r6
 8006d56:	1c43      	adds	r3, r0, #1
 8006d58:	89a3      	ldrh	r3, [r4, #12]
 8006d5a:	d106      	bne.n	8006d6a <__sflush_r+0x66>
 8006d5c:	6829      	ldr	r1, [r5, #0]
 8006d5e:	291d      	cmp	r1, #29
 8006d60:	d82c      	bhi.n	8006dbc <__sflush_r+0xb8>
 8006d62:	4a2a      	ldr	r2, [pc, #168]	; (8006e0c <__sflush_r+0x108>)
 8006d64:	40ca      	lsrs	r2, r1
 8006d66:	07d6      	lsls	r6, r2, #31
 8006d68:	d528      	bpl.n	8006dbc <__sflush_r+0xb8>
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	6062      	str	r2, [r4, #4]
 8006d6e:	04d9      	lsls	r1, r3, #19
 8006d70:	6922      	ldr	r2, [r4, #16]
 8006d72:	6022      	str	r2, [r4, #0]
 8006d74:	d504      	bpl.n	8006d80 <__sflush_r+0x7c>
 8006d76:	1c42      	adds	r2, r0, #1
 8006d78:	d101      	bne.n	8006d7e <__sflush_r+0x7a>
 8006d7a:	682b      	ldr	r3, [r5, #0]
 8006d7c:	b903      	cbnz	r3, 8006d80 <__sflush_r+0x7c>
 8006d7e:	6560      	str	r0, [r4, #84]	; 0x54
 8006d80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d82:	602f      	str	r7, [r5, #0]
 8006d84:	2900      	cmp	r1, #0
 8006d86:	d0ca      	beq.n	8006d1e <__sflush_r+0x1a>
 8006d88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d8c:	4299      	cmp	r1, r3
 8006d8e:	d002      	beq.n	8006d96 <__sflush_r+0x92>
 8006d90:	4628      	mov	r0, r5
 8006d92:	f000 f8fd 	bl	8006f90 <_free_r>
 8006d96:	2000      	movs	r0, #0
 8006d98:	6360      	str	r0, [r4, #52]	; 0x34
 8006d9a:	e7c1      	b.n	8006d20 <__sflush_r+0x1c>
 8006d9c:	6a21      	ldr	r1, [r4, #32]
 8006d9e:	2301      	movs	r3, #1
 8006da0:	4628      	mov	r0, r5
 8006da2:	47b0      	blx	r6
 8006da4:	1c41      	adds	r1, r0, #1
 8006da6:	d1c7      	bne.n	8006d38 <__sflush_r+0x34>
 8006da8:	682b      	ldr	r3, [r5, #0]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d0c4      	beq.n	8006d38 <__sflush_r+0x34>
 8006dae:	2b1d      	cmp	r3, #29
 8006db0:	d001      	beq.n	8006db6 <__sflush_r+0xb2>
 8006db2:	2b16      	cmp	r3, #22
 8006db4:	d101      	bne.n	8006dba <__sflush_r+0xb6>
 8006db6:	602f      	str	r7, [r5, #0]
 8006db8:	e7b1      	b.n	8006d1e <__sflush_r+0x1a>
 8006dba:	89a3      	ldrh	r3, [r4, #12]
 8006dbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006dc0:	81a3      	strh	r3, [r4, #12]
 8006dc2:	e7ad      	b.n	8006d20 <__sflush_r+0x1c>
 8006dc4:	690f      	ldr	r7, [r1, #16]
 8006dc6:	2f00      	cmp	r7, #0
 8006dc8:	d0a9      	beq.n	8006d1e <__sflush_r+0x1a>
 8006dca:	0793      	lsls	r3, r2, #30
 8006dcc:	680e      	ldr	r6, [r1, #0]
 8006dce:	bf08      	it	eq
 8006dd0:	694b      	ldreq	r3, [r1, #20]
 8006dd2:	600f      	str	r7, [r1, #0]
 8006dd4:	bf18      	it	ne
 8006dd6:	2300      	movne	r3, #0
 8006dd8:	eba6 0807 	sub.w	r8, r6, r7
 8006ddc:	608b      	str	r3, [r1, #8]
 8006dde:	f1b8 0f00 	cmp.w	r8, #0
 8006de2:	dd9c      	ble.n	8006d1e <__sflush_r+0x1a>
 8006de4:	6a21      	ldr	r1, [r4, #32]
 8006de6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006de8:	4643      	mov	r3, r8
 8006dea:	463a      	mov	r2, r7
 8006dec:	4628      	mov	r0, r5
 8006dee:	47b0      	blx	r6
 8006df0:	2800      	cmp	r0, #0
 8006df2:	dc06      	bgt.n	8006e02 <__sflush_r+0xfe>
 8006df4:	89a3      	ldrh	r3, [r4, #12]
 8006df6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006dfa:	81a3      	strh	r3, [r4, #12]
 8006dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8006e00:	e78e      	b.n	8006d20 <__sflush_r+0x1c>
 8006e02:	4407      	add	r7, r0
 8006e04:	eba8 0800 	sub.w	r8, r8, r0
 8006e08:	e7e9      	b.n	8006dde <__sflush_r+0xda>
 8006e0a:	bf00      	nop
 8006e0c:	20400001 	.word	0x20400001

08006e10 <_fflush_r>:
 8006e10:	b538      	push	{r3, r4, r5, lr}
 8006e12:	690b      	ldr	r3, [r1, #16]
 8006e14:	4605      	mov	r5, r0
 8006e16:	460c      	mov	r4, r1
 8006e18:	b913      	cbnz	r3, 8006e20 <_fflush_r+0x10>
 8006e1a:	2500      	movs	r5, #0
 8006e1c:	4628      	mov	r0, r5
 8006e1e:	bd38      	pop	{r3, r4, r5, pc}
 8006e20:	b118      	cbz	r0, 8006e2a <_fflush_r+0x1a>
 8006e22:	6983      	ldr	r3, [r0, #24]
 8006e24:	b90b      	cbnz	r3, 8006e2a <_fflush_r+0x1a>
 8006e26:	f7ff fbc7 	bl	80065b8 <__sinit>
 8006e2a:	4b14      	ldr	r3, [pc, #80]	; (8006e7c <_fflush_r+0x6c>)
 8006e2c:	429c      	cmp	r4, r3
 8006e2e:	d11b      	bne.n	8006e68 <_fflush_r+0x58>
 8006e30:	686c      	ldr	r4, [r5, #4]
 8006e32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d0ef      	beq.n	8006e1a <_fflush_r+0xa>
 8006e3a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006e3c:	07d0      	lsls	r0, r2, #31
 8006e3e:	d404      	bmi.n	8006e4a <_fflush_r+0x3a>
 8006e40:	0599      	lsls	r1, r3, #22
 8006e42:	d402      	bmi.n	8006e4a <_fflush_r+0x3a>
 8006e44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e46:	f7ff fc7a 	bl	800673e <__retarget_lock_acquire_recursive>
 8006e4a:	4628      	mov	r0, r5
 8006e4c:	4621      	mov	r1, r4
 8006e4e:	f7ff ff59 	bl	8006d04 <__sflush_r>
 8006e52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006e54:	07da      	lsls	r2, r3, #31
 8006e56:	4605      	mov	r5, r0
 8006e58:	d4e0      	bmi.n	8006e1c <_fflush_r+0xc>
 8006e5a:	89a3      	ldrh	r3, [r4, #12]
 8006e5c:	059b      	lsls	r3, r3, #22
 8006e5e:	d4dd      	bmi.n	8006e1c <_fflush_r+0xc>
 8006e60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e62:	f7ff fc6d 	bl	8006740 <__retarget_lock_release_recursive>
 8006e66:	e7d9      	b.n	8006e1c <_fflush_r+0xc>
 8006e68:	4b05      	ldr	r3, [pc, #20]	; (8006e80 <_fflush_r+0x70>)
 8006e6a:	429c      	cmp	r4, r3
 8006e6c:	d101      	bne.n	8006e72 <_fflush_r+0x62>
 8006e6e:	68ac      	ldr	r4, [r5, #8]
 8006e70:	e7df      	b.n	8006e32 <_fflush_r+0x22>
 8006e72:	4b04      	ldr	r3, [pc, #16]	; (8006e84 <_fflush_r+0x74>)
 8006e74:	429c      	cmp	r4, r3
 8006e76:	bf08      	it	eq
 8006e78:	68ec      	ldreq	r4, [r5, #12]
 8006e7a:	e7da      	b.n	8006e32 <_fflush_r+0x22>
 8006e7c:	08007d58 	.word	0x08007d58
 8006e80:	08007d78 	.word	0x08007d78
 8006e84:	08007d38 	.word	0x08007d38

08006e88 <_lseek_r>:
 8006e88:	b538      	push	{r3, r4, r5, lr}
 8006e8a:	4d07      	ldr	r5, [pc, #28]	; (8006ea8 <_lseek_r+0x20>)
 8006e8c:	4604      	mov	r4, r0
 8006e8e:	4608      	mov	r0, r1
 8006e90:	4611      	mov	r1, r2
 8006e92:	2200      	movs	r2, #0
 8006e94:	602a      	str	r2, [r5, #0]
 8006e96:	461a      	mov	r2, r3
 8006e98:	f7fa fde8 	bl	8001a6c <_lseek>
 8006e9c:	1c43      	adds	r3, r0, #1
 8006e9e:	d102      	bne.n	8006ea6 <_lseek_r+0x1e>
 8006ea0:	682b      	ldr	r3, [r5, #0]
 8006ea2:	b103      	cbz	r3, 8006ea6 <_lseek_r+0x1e>
 8006ea4:	6023      	str	r3, [r4, #0]
 8006ea6:	bd38      	pop	{r3, r4, r5, pc}
 8006ea8:	200041fc 	.word	0x200041fc

08006eac <__swhatbuf_r>:
 8006eac:	b570      	push	{r4, r5, r6, lr}
 8006eae:	460e      	mov	r6, r1
 8006eb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006eb4:	2900      	cmp	r1, #0
 8006eb6:	b096      	sub	sp, #88	; 0x58
 8006eb8:	4614      	mov	r4, r2
 8006eba:	461d      	mov	r5, r3
 8006ebc:	da08      	bge.n	8006ed0 <__swhatbuf_r+0x24>
 8006ebe:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	602a      	str	r2, [r5, #0]
 8006ec6:	061a      	lsls	r2, r3, #24
 8006ec8:	d410      	bmi.n	8006eec <__swhatbuf_r+0x40>
 8006eca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ece:	e00e      	b.n	8006eee <__swhatbuf_r+0x42>
 8006ed0:	466a      	mov	r2, sp
 8006ed2:	f000 fbab 	bl	800762c <_fstat_r>
 8006ed6:	2800      	cmp	r0, #0
 8006ed8:	dbf1      	blt.n	8006ebe <__swhatbuf_r+0x12>
 8006eda:	9a01      	ldr	r2, [sp, #4]
 8006edc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006ee0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006ee4:	425a      	negs	r2, r3
 8006ee6:	415a      	adcs	r2, r3
 8006ee8:	602a      	str	r2, [r5, #0]
 8006eea:	e7ee      	b.n	8006eca <__swhatbuf_r+0x1e>
 8006eec:	2340      	movs	r3, #64	; 0x40
 8006eee:	2000      	movs	r0, #0
 8006ef0:	6023      	str	r3, [r4, #0]
 8006ef2:	b016      	add	sp, #88	; 0x58
 8006ef4:	bd70      	pop	{r4, r5, r6, pc}
	...

08006ef8 <__smakebuf_r>:
 8006ef8:	898b      	ldrh	r3, [r1, #12]
 8006efa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006efc:	079d      	lsls	r5, r3, #30
 8006efe:	4606      	mov	r6, r0
 8006f00:	460c      	mov	r4, r1
 8006f02:	d507      	bpl.n	8006f14 <__smakebuf_r+0x1c>
 8006f04:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006f08:	6023      	str	r3, [r4, #0]
 8006f0a:	6123      	str	r3, [r4, #16]
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	6163      	str	r3, [r4, #20]
 8006f10:	b002      	add	sp, #8
 8006f12:	bd70      	pop	{r4, r5, r6, pc}
 8006f14:	ab01      	add	r3, sp, #4
 8006f16:	466a      	mov	r2, sp
 8006f18:	f7ff ffc8 	bl	8006eac <__swhatbuf_r>
 8006f1c:	9900      	ldr	r1, [sp, #0]
 8006f1e:	4605      	mov	r5, r0
 8006f20:	4630      	mov	r0, r6
 8006f22:	f7ff fc45 	bl	80067b0 <_malloc_r>
 8006f26:	b948      	cbnz	r0, 8006f3c <__smakebuf_r+0x44>
 8006f28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f2c:	059a      	lsls	r2, r3, #22
 8006f2e:	d4ef      	bmi.n	8006f10 <__smakebuf_r+0x18>
 8006f30:	f023 0303 	bic.w	r3, r3, #3
 8006f34:	f043 0302 	orr.w	r3, r3, #2
 8006f38:	81a3      	strh	r3, [r4, #12]
 8006f3a:	e7e3      	b.n	8006f04 <__smakebuf_r+0xc>
 8006f3c:	4b0d      	ldr	r3, [pc, #52]	; (8006f74 <__smakebuf_r+0x7c>)
 8006f3e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006f40:	89a3      	ldrh	r3, [r4, #12]
 8006f42:	6020      	str	r0, [r4, #0]
 8006f44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f48:	81a3      	strh	r3, [r4, #12]
 8006f4a:	9b00      	ldr	r3, [sp, #0]
 8006f4c:	6163      	str	r3, [r4, #20]
 8006f4e:	9b01      	ldr	r3, [sp, #4]
 8006f50:	6120      	str	r0, [r4, #16]
 8006f52:	b15b      	cbz	r3, 8006f6c <__smakebuf_r+0x74>
 8006f54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f58:	4630      	mov	r0, r6
 8006f5a:	f000 fb79 	bl	8007650 <_isatty_r>
 8006f5e:	b128      	cbz	r0, 8006f6c <__smakebuf_r+0x74>
 8006f60:	89a3      	ldrh	r3, [r4, #12]
 8006f62:	f023 0303 	bic.w	r3, r3, #3
 8006f66:	f043 0301 	orr.w	r3, r3, #1
 8006f6a:	81a3      	strh	r3, [r4, #12]
 8006f6c:	89a0      	ldrh	r0, [r4, #12]
 8006f6e:	4305      	orrs	r5, r0
 8006f70:	81a5      	strh	r5, [r4, #12]
 8006f72:	e7cd      	b.n	8006f10 <__smakebuf_r+0x18>
 8006f74:	08006551 	.word	0x08006551

08006f78 <__malloc_lock>:
 8006f78:	4801      	ldr	r0, [pc, #4]	; (8006f80 <__malloc_lock+0x8>)
 8006f7a:	f7ff bbe0 	b.w	800673e <__retarget_lock_acquire_recursive>
 8006f7e:	bf00      	nop
 8006f80:	200041f0 	.word	0x200041f0

08006f84 <__malloc_unlock>:
 8006f84:	4801      	ldr	r0, [pc, #4]	; (8006f8c <__malloc_unlock+0x8>)
 8006f86:	f7ff bbdb 	b.w	8006740 <__retarget_lock_release_recursive>
 8006f8a:	bf00      	nop
 8006f8c:	200041f0 	.word	0x200041f0

08006f90 <_free_r>:
 8006f90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006f92:	2900      	cmp	r1, #0
 8006f94:	d044      	beq.n	8007020 <_free_r+0x90>
 8006f96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f9a:	9001      	str	r0, [sp, #4]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	f1a1 0404 	sub.w	r4, r1, #4
 8006fa2:	bfb8      	it	lt
 8006fa4:	18e4      	addlt	r4, r4, r3
 8006fa6:	f7ff ffe7 	bl	8006f78 <__malloc_lock>
 8006faa:	4a1e      	ldr	r2, [pc, #120]	; (8007024 <_free_r+0x94>)
 8006fac:	9801      	ldr	r0, [sp, #4]
 8006fae:	6813      	ldr	r3, [r2, #0]
 8006fb0:	b933      	cbnz	r3, 8006fc0 <_free_r+0x30>
 8006fb2:	6063      	str	r3, [r4, #4]
 8006fb4:	6014      	str	r4, [r2, #0]
 8006fb6:	b003      	add	sp, #12
 8006fb8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006fbc:	f7ff bfe2 	b.w	8006f84 <__malloc_unlock>
 8006fc0:	42a3      	cmp	r3, r4
 8006fc2:	d908      	bls.n	8006fd6 <_free_r+0x46>
 8006fc4:	6825      	ldr	r5, [r4, #0]
 8006fc6:	1961      	adds	r1, r4, r5
 8006fc8:	428b      	cmp	r3, r1
 8006fca:	bf01      	itttt	eq
 8006fcc:	6819      	ldreq	r1, [r3, #0]
 8006fce:	685b      	ldreq	r3, [r3, #4]
 8006fd0:	1949      	addeq	r1, r1, r5
 8006fd2:	6021      	streq	r1, [r4, #0]
 8006fd4:	e7ed      	b.n	8006fb2 <_free_r+0x22>
 8006fd6:	461a      	mov	r2, r3
 8006fd8:	685b      	ldr	r3, [r3, #4]
 8006fda:	b10b      	cbz	r3, 8006fe0 <_free_r+0x50>
 8006fdc:	42a3      	cmp	r3, r4
 8006fde:	d9fa      	bls.n	8006fd6 <_free_r+0x46>
 8006fe0:	6811      	ldr	r1, [r2, #0]
 8006fe2:	1855      	adds	r5, r2, r1
 8006fe4:	42a5      	cmp	r5, r4
 8006fe6:	d10b      	bne.n	8007000 <_free_r+0x70>
 8006fe8:	6824      	ldr	r4, [r4, #0]
 8006fea:	4421      	add	r1, r4
 8006fec:	1854      	adds	r4, r2, r1
 8006fee:	42a3      	cmp	r3, r4
 8006ff0:	6011      	str	r1, [r2, #0]
 8006ff2:	d1e0      	bne.n	8006fb6 <_free_r+0x26>
 8006ff4:	681c      	ldr	r4, [r3, #0]
 8006ff6:	685b      	ldr	r3, [r3, #4]
 8006ff8:	6053      	str	r3, [r2, #4]
 8006ffa:	4421      	add	r1, r4
 8006ffc:	6011      	str	r1, [r2, #0]
 8006ffe:	e7da      	b.n	8006fb6 <_free_r+0x26>
 8007000:	d902      	bls.n	8007008 <_free_r+0x78>
 8007002:	230c      	movs	r3, #12
 8007004:	6003      	str	r3, [r0, #0]
 8007006:	e7d6      	b.n	8006fb6 <_free_r+0x26>
 8007008:	6825      	ldr	r5, [r4, #0]
 800700a:	1961      	adds	r1, r4, r5
 800700c:	428b      	cmp	r3, r1
 800700e:	bf04      	itt	eq
 8007010:	6819      	ldreq	r1, [r3, #0]
 8007012:	685b      	ldreq	r3, [r3, #4]
 8007014:	6063      	str	r3, [r4, #4]
 8007016:	bf04      	itt	eq
 8007018:	1949      	addeq	r1, r1, r5
 800701a:	6021      	streq	r1, [r4, #0]
 800701c:	6054      	str	r4, [r2, #4]
 800701e:	e7ca      	b.n	8006fb6 <_free_r+0x26>
 8007020:	b003      	add	sp, #12
 8007022:	bd30      	pop	{r4, r5, pc}
 8007024:	200041f4 	.word	0x200041f4

08007028 <__ssputs_r>:
 8007028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800702c:	688e      	ldr	r6, [r1, #8]
 800702e:	429e      	cmp	r6, r3
 8007030:	4682      	mov	sl, r0
 8007032:	460c      	mov	r4, r1
 8007034:	4690      	mov	r8, r2
 8007036:	461f      	mov	r7, r3
 8007038:	d838      	bhi.n	80070ac <__ssputs_r+0x84>
 800703a:	898a      	ldrh	r2, [r1, #12]
 800703c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007040:	d032      	beq.n	80070a8 <__ssputs_r+0x80>
 8007042:	6825      	ldr	r5, [r4, #0]
 8007044:	6909      	ldr	r1, [r1, #16]
 8007046:	eba5 0901 	sub.w	r9, r5, r1
 800704a:	6965      	ldr	r5, [r4, #20]
 800704c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007050:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007054:	3301      	adds	r3, #1
 8007056:	444b      	add	r3, r9
 8007058:	106d      	asrs	r5, r5, #1
 800705a:	429d      	cmp	r5, r3
 800705c:	bf38      	it	cc
 800705e:	461d      	movcc	r5, r3
 8007060:	0553      	lsls	r3, r2, #21
 8007062:	d531      	bpl.n	80070c8 <__ssputs_r+0xa0>
 8007064:	4629      	mov	r1, r5
 8007066:	f7ff fba3 	bl	80067b0 <_malloc_r>
 800706a:	4606      	mov	r6, r0
 800706c:	b950      	cbnz	r0, 8007084 <__ssputs_r+0x5c>
 800706e:	230c      	movs	r3, #12
 8007070:	f8ca 3000 	str.w	r3, [sl]
 8007074:	89a3      	ldrh	r3, [r4, #12]
 8007076:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800707a:	81a3      	strh	r3, [r4, #12]
 800707c:	f04f 30ff 	mov.w	r0, #4294967295
 8007080:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007084:	6921      	ldr	r1, [r4, #16]
 8007086:	464a      	mov	r2, r9
 8007088:	f7ff fb5b 	bl	8006742 <memcpy>
 800708c:	89a3      	ldrh	r3, [r4, #12]
 800708e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007092:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007096:	81a3      	strh	r3, [r4, #12]
 8007098:	6126      	str	r6, [r4, #16]
 800709a:	6165      	str	r5, [r4, #20]
 800709c:	444e      	add	r6, r9
 800709e:	eba5 0509 	sub.w	r5, r5, r9
 80070a2:	6026      	str	r6, [r4, #0]
 80070a4:	60a5      	str	r5, [r4, #8]
 80070a6:	463e      	mov	r6, r7
 80070a8:	42be      	cmp	r6, r7
 80070aa:	d900      	bls.n	80070ae <__ssputs_r+0x86>
 80070ac:	463e      	mov	r6, r7
 80070ae:	6820      	ldr	r0, [r4, #0]
 80070b0:	4632      	mov	r2, r6
 80070b2:	4641      	mov	r1, r8
 80070b4:	f000 fadc 	bl	8007670 <memmove>
 80070b8:	68a3      	ldr	r3, [r4, #8]
 80070ba:	1b9b      	subs	r3, r3, r6
 80070bc:	60a3      	str	r3, [r4, #8]
 80070be:	6823      	ldr	r3, [r4, #0]
 80070c0:	4433      	add	r3, r6
 80070c2:	6023      	str	r3, [r4, #0]
 80070c4:	2000      	movs	r0, #0
 80070c6:	e7db      	b.n	8007080 <__ssputs_r+0x58>
 80070c8:	462a      	mov	r2, r5
 80070ca:	f000 faeb 	bl	80076a4 <_realloc_r>
 80070ce:	4606      	mov	r6, r0
 80070d0:	2800      	cmp	r0, #0
 80070d2:	d1e1      	bne.n	8007098 <__ssputs_r+0x70>
 80070d4:	6921      	ldr	r1, [r4, #16]
 80070d6:	4650      	mov	r0, sl
 80070d8:	f7ff ff5a 	bl	8006f90 <_free_r>
 80070dc:	e7c7      	b.n	800706e <__ssputs_r+0x46>
	...

080070e0 <_svfiprintf_r>:
 80070e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070e4:	4698      	mov	r8, r3
 80070e6:	898b      	ldrh	r3, [r1, #12]
 80070e8:	061b      	lsls	r3, r3, #24
 80070ea:	b09d      	sub	sp, #116	; 0x74
 80070ec:	4607      	mov	r7, r0
 80070ee:	460d      	mov	r5, r1
 80070f0:	4614      	mov	r4, r2
 80070f2:	d50e      	bpl.n	8007112 <_svfiprintf_r+0x32>
 80070f4:	690b      	ldr	r3, [r1, #16]
 80070f6:	b963      	cbnz	r3, 8007112 <_svfiprintf_r+0x32>
 80070f8:	2140      	movs	r1, #64	; 0x40
 80070fa:	f7ff fb59 	bl	80067b0 <_malloc_r>
 80070fe:	6028      	str	r0, [r5, #0]
 8007100:	6128      	str	r0, [r5, #16]
 8007102:	b920      	cbnz	r0, 800710e <_svfiprintf_r+0x2e>
 8007104:	230c      	movs	r3, #12
 8007106:	603b      	str	r3, [r7, #0]
 8007108:	f04f 30ff 	mov.w	r0, #4294967295
 800710c:	e0d1      	b.n	80072b2 <_svfiprintf_r+0x1d2>
 800710e:	2340      	movs	r3, #64	; 0x40
 8007110:	616b      	str	r3, [r5, #20]
 8007112:	2300      	movs	r3, #0
 8007114:	9309      	str	r3, [sp, #36]	; 0x24
 8007116:	2320      	movs	r3, #32
 8007118:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800711c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007120:	2330      	movs	r3, #48	; 0x30
 8007122:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80072cc <_svfiprintf_r+0x1ec>
 8007126:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800712a:	f04f 0901 	mov.w	r9, #1
 800712e:	4623      	mov	r3, r4
 8007130:	469a      	mov	sl, r3
 8007132:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007136:	b10a      	cbz	r2, 800713c <_svfiprintf_r+0x5c>
 8007138:	2a25      	cmp	r2, #37	; 0x25
 800713a:	d1f9      	bne.n	8007130 <_svfiprintf_r+0x50>
 800713c:	ebba 0b04 	subs.w	fp, sl, r4
 8007140:	d00b      	beq.n	800715a <_svfiprintf_r+0x7a>
 8007142:	465b      	mov	r3, fp
 8007144:	4622      	mov	r2, r4
 8007146:	4629      	mov	r1, r5
 8007148:	4638      	mov	r0, r7
 800714a:	f7ff ff6d 	bl	8007028 <__ssputs_r>
 800714e:	3001      	adds	r0, #1
 8007150:	f000 80aa 	beq.w	80072a8 <_svfiprintf_r+0x1c8>
 8007154:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007156:	445a      	add	r2, fp
 8007158:	9209      	str	r2, [sp, #36]	; 0x24
 800715a:	f89a 3000 	ldrb.w	r3, [sl]
 800715e:	2b00      	cmp	r3, #0
 8007160:	f000 80a2 	beq.w	80072a8 <_svfiprintf_r+0x1c8>
 8007164:	2300      	movs	r3, #0
 8007166:	f04f 32ff 	mov.w	r2, #4294967295
 800716a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800716e:	f10a 0a01 	add.w	sl, sl, #1
 8007172:	9304      	str	r3, [sp, #16]
 8007174:	9307      	str	r3, [sp, #28]
 8007176:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800717a:	931a      	str	r3, [sp, #104]	; 0x68
 800717c:	4654      	mov	r4, sl
 800717e:	2205      	movs	r2, #5
 8007180:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007184:	4851      	ldr	r0, [pc, #324]	; (80072cc <_svfiprintf_r+0x1ec>)
 8007186:	f7f9 f84b 	bl	8000220 <memchr>
 800718a:	9a04      	ldr	r2, [sp, #16]
 800718c:	b9d8      	cbnz	r0, 80071c6 <_svfiprintf_r+0xe6>
 800718e:	06d0      	lsls	r0, r2, #27
 8007190:	bf44      	itt	mi
 8007192:	2320      	movmi	r3, #32
 8007194:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007198:	0711      	lsls	r1, r2, #28
 800719a:	bf44      	itt	mi
 800719c:	232b      	movmi	r3, #43	; 0x2b
 800719e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80071a2:	f89a 3000 	ldrb.w	r3, [sl]
 80071a6:	2b2a      	cmp	r3, #42	; 0x2a
 80071a8:	d015      	beq.n	80071d6 <_svfiprintf_r+0xf6>
 80071aa:	9a07      	ldr	r2, [sp, #28]
 80071ac:	4654      	mov	r4, sl
 80071ae:	2000      	movs	r0, #0
 80071b0:	f04f 0c0a 	mov.w	ip, #10
 80071b4:	4621      	mov	r1, r4
 80071b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80071ba:	3b30      	subs	r3, #48	; 0x30
 80071bc:	2b09      	cmp	r3, #9
 80071be:	d94e      	bls.n	800725e <_svfiprintf_r+0x17e>
 80071c0:	b1b0      	cbz	r0, 80071f0 <_svfiprintf_r+0x110>
 80071c2:	9207      	str	r2, [sp, #28]
 80071c4:	e014      	b.n	80071f0 <_svfiprintf_r+0x110>
 80071c6:	eba0 0308 	sub.w	r3, r0, r8
 80071ca:	fa09 f303 	lsl.w	r3, r9, r3
 80071ce:	4313      	orrs	r3, r2
 80071d0:	9304      	str	r3, [sp, #16]
 80071d2:	46a2      	mov	sl, r4
 80071d4:	e7d2      	b.n	800717c <_svfiprintf_r+0x9c>
 80071d6:	9b03      	ldr	r3, [sp, #12]
 80071d8:	1d19      	adds	r1, r3, #4
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	9103      	str	r1, [sp, #12]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	bfbb      	ittet	lt
 80071e2:	425b      	neglt	r3, r3
 80071e4:	f042 0202 	orrlt.w	r2, r2, #2
 80071e8:	9307      	strge	r3, [sp, #28]
 80071ea:	9307      	strlt	r3, [sp, #28]
 80071ec:	bfb8      	it	lt
 80071ee:	9204      	strlt	r2, [sp, #16]
 80071f0:	7823      	ldrb	r3, [r4, #0]
 80071f2:	2b2e      	cmp	r3, #46	; 0x2e
 80071f4:	d10c      	bne.n	8007210 <_svfiprintf_r+0x130>
 80071f6:	7863      	ldrb	r3, [r4, #1]
 80071f8:	2b2a      	cmp	r3, #42	; 0x2a
 80071fa:	d135      	bne.n	8007268 <_svfiprintf_r+0x188>
 80071fc:	9b03      	ldr	r3, [sp, #12]
 80071fe:	1d1a      	adds	r2, r3, #4
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	9203      	str	r2, [sp, #12]
 8007204:	2b00      	cmp	r3, #0
 8007206:	bfb8      	it	lt
 8007208:	f04f 33ff 	movlt.w	r3, #4294967295
 800720c:	3402      	adds	r4, #2
 800720e:	9305      	str	r3, [sp, #20]
 8007210:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80072dc <_svfiprintf_r+0x1fc>
 8007214:	7821      	ldrb	r1, [r4, #0]
 8007216:	2203      	movs	r2, #3
 8007218:	4650      	mov	r0, sl
 800721a:	f7f9 f801 	bl	8000220 <memchr>
 800721e:	b140      	cbz	r0, 8007232 <_svfiprintf_r+0x152>
 8007220:	2340      	movs	r3, #64	; 0x40
 8007222:	eba0 000a 	sub.w	r0, r0, sl
 8007226:	fa03 f000 	lsl.w	r0, r3, r0
 800722a:	9b04      	ldr	r3, [sp, #16]
 800722c:	4303      	orrs	r3, r0
 800722e:	3401      	adds	r4, #1
 8007230:	9304      	str	r3, [sp, #16]
 8007232:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007236:	4826      	ldr	r0, [pc, #152]	; (80072d0 <_svfiprintf_r+0x1f0>)
 8007238:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800723c:	2206      	movs	r2, #6
 800723e:	f7f8 ffef 	bl	8000220 <memchr>
 8007242:	2800      	cmp	r0, #0
 8007244:	d038      	beq.n	80072b8 <_svfiprintf_r+0x1d8>
 8007246:	4b23      	ldr	r3, [pc, #140]	; (80072d4 <_svfiprintf_r+0x1f4>)
 8007248:	bb1b      	cbnz	r3, 8007292 <_svfiprintf_r+0x1b2>
 800724a:	9b03      	ldr	r3, [sp, #12]
 800724c:	3307      	adds	r3, #7
 800724e:	f023 0307 	bic.w	r3, r3, #7
 8007252:	3308      	adds	r3, #8
 8007254:	9303      	str	r3, [sp, #12]
 8007256:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007258:	4433      	add	r3, r6
 800725a:	9309      	str	r3, [sp, #36]	; 0x24
 800725c:	e767      	b.n	800712e <_svfiprintf_r+0x4e>
 800725e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007262:	460c      	mov	r4, r1
 8007264:	2001      	movs	r0, #1
 8007266:	e7a5      	b.n	80071b4 <_svfiprintf_r+0xd4>
 8007268:	2300      	movs	r3, #0
 800726a:	3401      	adds	r4, #1
 800726c:	9305      	str	r3, [sp, #20]
 800726e:	4619      	mov	r1, r3
 8007270:	f04f 0c0a 	mov.w	ip, #10
 8007274:	4620      	mov	r0, r4
 8007276:	f810 2b01 	ldrb.w	r2, [r0], #1
 800727a:	3a30      	subs	r2, #48	; 0x30
 800727c:	2a09      	cmp	r2, #9
 800727e:	d903      	bls.n	8007288 <_svfiprintf_r+0x1a8>
 8007280:	2b00      	cmp	r3, #0
 8007282:	d0c5      	beq.n	8007210 <_svfiprintf_r+0x130>
 8007284:	9105      	str	r1, [sp, #20]
 8007286:	e7c3      	b.n	8007210 <_svfiprintf_r+0x130>
 8007288:	fb0c 2101 	mla	r1, ip, r1, r2
 800728c:	4604      	mov	r4, r0
 800728e:	2301      	movs	r3, #1
 8007290:	e7f0      	b.n	8007274 <_svfiprintf_r+0x194>
 8007292:	ab03      	add	r3, sp, #12
 8007294:	9300      	str	r3, [sp, #0]
 8007296:	462a      	mov	r2, r5
 8007298:	4b0f      	ldr	r3, [pc, #60]	; (80072d8 <_svfiprintf_r+0x1f8>)
 800729a:	a904      	add	r1, sp, #16
 800729c:	4638      	mov	r0, r7
 800729e:	f3af 8000 	nop.w
 80072a2:	1c42      	adds	r2, r0, #1
 80072a4:	4606      	mov	r6, r0
 80072a6:	d1d6      	bne.n	8007256 <_svfiprintf_r+0x176>
 80072a8:	89ab      	ldrh	r3, [r5, #12]
 80072aa:	065b      	lsls	r3, r3, #25
 80072ac:	f53f af2c 	bmi.w	8007108 <_svfiprintf_r+0x28>
 80072b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80072b2:	b01d      	add	sp, #116	; 0x74
 80072b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072b8:	ab03      	add	r3, sp, #12
 80072ba:	9300      	str	r3, [sp, #0]
 80072bc:	462a      	mov	r2, r5
 80072be:	4b06      	ldr	r3, [pc, #24]	; (80072d8 <_svfiprintf_r+0x1f8>)
 80072c0:	a904      	add	r1, sp, #16
 80072c2:	4638      	mov	r0, r7
 80072c4:	f000 f87a 	bl	80073bc <_printf_i>
 80072c8:	e7eb      	b.n	80072a2 <_svfiprintf_r+0x1c2>
 80072ca:	bf00      	nop
 80072cc:	08007d9c 	.word	0x08007d9c
 80072d0:	08007da6 	.word	0x08007da6
 80072d4:	00000000 	.word	0x00000000
 80072d8:	08007029 	.word	0x08007029
 80072dc:	08007da2 	.word	0x08007da2

080072e0 <_printf_common>:
 80072e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072e4:	4616      	mov	r6, r2
 80072e6:	4699      	mov	r9, r3
 80072e8:	688a      	ldr	r2, [r1, #8]
 80072ea:	690b      	ldr	r3, [r1, #16]
 80072ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80072f0:	4293      	cmp	r3, r2
 80072f2:	bfb8      	it	lt
 80072f4:	4613      	movlt	r3, r2
 80072f6:	6033      	str	r3, [r6, #0]
 80072f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80072fc:	4607      	mov	r7, r0
 80072fe:	460c      	mov	r4, r1
 8007300:	b10a      	cbz	r2, 8007306 <_printf_common+0x26>
 8007302:	3301      	adds	r3, #1
 8007304:	6033      	str	r3, [r6, #0]
 8007306:	6823      	ldr	r3, [r4, #0]
 8007308:	0699      	lsls	r1, r3, #26
 800730a:	bf42      	ittt	mi
 800730c:	6833      	ldrmi	r3, [r6, #0]
 800730e:	3302      	addmi	r3, #2
 8007310:	6033      	strmi	r3, [r6, #0]
 8007312:	6825      	ldr	r5, [r4, #0]
 8007314:	f015 0506 	ands.w	r5, r5, #6
 8007318:	d106      	bne.n	8007328 <_printf_common+0x48>
 800731a:	f104 0a19 	add.w	sl, r4, #25
 800731e:	68e3      	ldr	r3, [r4, #12]
 8007320:	6832      	ldr	r2, [r6, #0]
 8007322:	1a9b      	subs	r3, r3, r2
 8007324:	42ab      	cmp	r3, r5
 8007326:	dc26      	bgt.n	8007376 <_printf_common+0x96>
 8007328:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800732c:	1e13      	subs	r3, r2, #0
 800732e:	6822      	ldr	r2, [r4, #0]
 8007330:	bf18      	it	ne
 8007332:	2301      	movne	r3, #1
 8007334:	0692      	lsls	r2, r2, #26
 8007336:	d42b      	bmi.n	8007390 <_printf_common+0xb0>
 8007338:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800733c:	4649      	mov	r1, r9
 800733e:	4638      	mov	r0, r7
 8007340:	47c0      	blx	r8
 8007342:	3001      	adds	r0, #1
 8007344:	d01e      	beq.n	8007384 <_printf_common+0xa4>
 8007346:	6823      	ldr	r3, [r4, #0]
 8007348:	68e5      	ldr	r5, [r4, #12]
 800734a:	6832      	ldr	r2, [r6, #0]
 800734c:	f003 0306 	and.w	r3, r3, #6
 8007350:	2b04      	cmp	r3, #4
 8007352:	bf08      	it	eq
 8007354:	1aad      	subeq	r5, r5, r2
 8007356:	68a3      	ldr	r3, [r4, #8]
 8007358:	6922      	ldr	r2, [r4, #16]
 800735a:	bf0c      	ite	eq
 800735c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007360:	2500      	movne	r5, #0
 8007362:	4293      	cmp	r3, r2
 8007364:	bfc4      	itt	gt
 8007366:	1a9b      	subgt	r3, r3, r2
 8007368:	18ed      	addgt	r5, r5, r3
 800736a:	2600      	movs	r6, #0
 800736c:	341a      	adds	r4, #26
 800736e:	42b5      	cmp	r5, r6
 8007370:	d11a      	bne.n	80073a8 <_printf_common+0xc8>
 8007372:	2000      	movs	r0, #0
 8007374:	e008      	b.n	8007388 <_printf_common+0xa8>
 8007376:	2301      	movs	r3, #1
 8007378:	4652      	mov	r2, sl
 800737a:	4649      	mov	r1, r9
 800737c:	4638      	mov	r0, r7
 800737e:	47c0      	blx	r8
 8007380:	3001      	adds	r0, #1
 8007382:	d103      	bne.n	800738c <_printf_common+0xac>
 8007384:	f04f 30ff 	mov.w	r0, #4294967295
 8007388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800738c:	3501      	adds	r5, #1
 800738e:	e7c6      	b.n	800731e <_printf_common+0x3e>
 8007390:	18e1      	adds	r1, r4, r3
 8007392:	1c5a      	adds	r2, r3, #1
 8007394:	2030      	movs	r0, #48	; 0x30
 8007396:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800739a:	4422      	add	r2, r4
 800739c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80073a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80073a4:	3302      	adds	r3, #2
 80073a6:	e7c7      	b.n	8007338 <_printf_common+0x58>
 80073a8:	2301      	movs	r3, #1
 80073aa:	4622      	mov	r2, r4
 80073ac:	4649      	mov	r1, r9
 80073ae:	4638      	mov	r0, r7
 80073b0:	47c0      	blx	r8
 80073b2:	3001      	adds	r0, #1
 80073b4:	d0e6      	beq.n	8007384 <_printf_common+0xa4>
 80073b6:	3601      	adds	r6, #1
 80073b8:	e7d9      	b.n	800736e <_printf_common+0x8e>
	...

080073bc <_printf_i>:
 80073bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80073c0:	7e0f      	ldrb	r7, [r1, #24]
 80073c2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80073c4:	2f78      	cmp	r7, #120	; 0x78
 80073c6:	4691      	mov	r9, r2
 80073c8:	4680      	mov	r8, r0
 80073ca:	460c      	mov	r4, r1
 80073cc:	469a      	mov	sl, r3
 80073ce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80073d2:	d807      	bhi.n	80073e4 <_printf_i+0x28>
 80073d4:	2f62      	cmp	r7, #98	; 0x62
 80073d6:	d80a      	bhi.n	80073ee <_printf_i+0x32>
 80073d8:	2f00      	cmp	r7, #0
 80073da:	f000 80d8 	beq.w	800758e <_printf_i+0x1d2>
 80073de:	2f58      	cmp	r7, #88	; 0x58
 80073e0:	f000 80a3 	beq.w	800752a <_printf_i+0x16e>
 80073e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80073e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80073ec:	e03a      	b.n	8007464 <_printf_i+0xa8>
 80073ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80073f2:	2b15      	cmp	r3, #21
 80073f4:	d8f6      	bhi.n	80073e4 <_printf_i+0x28>
 80073f6:	a101      	add	r1, pc, #4	; (adr r1, 80073fc <_printf_i+0x40>)
 80073f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80073fc:	08007455 	.word	0x08007455
 8007400:	08007469 	.word	0x08007469
 8007404:	080073e5 	.word	0x080073e5
 8007408:	080073e5 	.word	0x080073e5
 800740c:	080073e5 	.word	0x080073e5
 8007410:	080073e5 	.word	0x080073e5
 8007414:	08007469 	.word	0x08007469
 8007418:	080073e5 	.word	0x080073e5
 800741c:	080073e5 	.word	0x080073e5
 8007420:	080073e5 	.word	0x080073e5
 8007424:	080073e5 	.word	0x080073e5
 8007428:	08007575 	.word	0x08007575
 800742c:	08007499 	.word	0x08007499
 8007430:	08007557 	.word	0x08007557
 8007434:	080073e5 	.word	0x080073e5
 8007438:	080073e5 	.word	0x080073e5
 800743c:	08007597 	.word	0x08007597
 8007440:	080073e5 	.word	0x080073e5
 8007444:	08007499 	.word	0x08007499
 8007448:	080073e5 	.word	0x080073e5
 800744c:	080073e5 	.word	0x080073e5
 8007450:	0800755f 	.word	0x0800755f
 8007454:	682b      	ldr	r3, [r5, #0]
 8007456:	1d1a      	adds	r2, r3, #4
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	602a      	str	r2, [r5, #0]
 800745c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007460:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007464:	2301      	movs	r3, #1
 8007466:	e0a3      	b.n	80075b0 <_printf_i+0x1f4>
 8007468:	6820      	ldr	r0, [r4, #0]
 800746a:	6829      	ldr	r1, [r5, #0]
 800746c:	0606      	lsls	r6, r0, #24
 800746e:	f101 0304 	add.w	r3, r1, #4
 8007472:	d50a      	bpl.n	800748a <_printf_i+0xce>
 8007474:	680e      	ldr	r6, [r1, #0]
 8007476:	602b      	str	r3, [r5, #0]
 8007478:	2e00      	cmp	r6, #0
 800747a:	da03      	bge.n	8007484 <_printf_i+0xc8>
 800747c:	232d      	movs	r3, #45	; 0x2d
 800747e:	4276      	negs	r6, r6
 8007480:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007484:	485e      	ldr	r0, [pc, #376]	; (8007600 <_printf_i+0x244>)
 8007486:	230a      	movs	r3, #10
 8007488:	e019      	b.n	80074be <_printf_i+0x102>
 800748a:	680e      	ldr	r6, [r1, #0]
 800748c:	602b      	str	r3, [r5, #0]
 800748e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007492:	bf18      	it	ne
 8007494:	b236      	sxthne	r6, r6
 8007496:	e7ef      	b.n	8007478 <_printf_i+0xbc>
 8007498:	682b      	ldr	r3, [r5, #0]
 800749a:	6820      	ldr	r0, [r4, #0]
 800749c:	1d19      	adds	r1, r3, #4
 800749e:	6029      	str	r1, [r5, #0]
 80074a0:	0601      	lsls	r1, r0, #24
 80074a2:	d501      	bpl.n	80074a8 <_printf_i+0xec>
 80074a4:	681e      	ldr	r6, [r3, #0]
 80074a6:	e002      	b.n	80074ae <_printf_i+0xf2>
 80074a8:	0646      	lsls	r6, r0, #25
 80074aa:	d5fb      	bpl.n	80074a4 <_printf_i+0xe8>
 80074ac:	881e      	ldrh	r6, [r3, #0]
 80074ae:	4854      	ldr	r0, [pc, #336]	; (8007600 <_printf_i+0x244>)
 80074b0:	2f6f      	cmp	r7, #111	; 0x6f
 80074b2:	bf0c      	ite	eq
 80074b4:	2308      	moveq	r3, #8
 80074b6:	230a      	movne	r3, #10
 80074b8:	2100      	movs	r1, #0
 80074ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80074be:	6865      	ldr	r5, [r4, #4]
 80074c0:	60a5      	str	r5, [r4, #8]
 80074c2:	2d00      	cmp	r5, #0
 80074c4:	bfa2      	ittt	ge
 80074c6:	6821      	ldrge	r1, [r4, #0]
 80074c8:	f021 0104 	bicge.w	r1, r1, #4
 80074cc:	6021      	strge	r1, [r4, #0]
 80074ce:	b90e      	cbnz	r6, 80074d4 <_printf_i+0x118>
 80074d0:	2d00      	cmp	r5, #0
 80074d2:	d04d      	beq.n	8007570 <_printf_i+0x1b4>
 80074d4:	4615      	mov	r5, r2
 80074d6:	fbb6 f1f3 	udiv	r1, r6, r3
 80074da:	fb03 6711 	mls	r7, r3, r1, r6
 80074de:	5dc7      	ldrb	r7, [r0, r7]
 80074e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80074e4:	4637      	mov	r7, r6
 80074e6:	42bb      	cmp	r3, r7
 80074e8:	460e      	mov	r6, r1
 80074ea:	d9f4      	bls.n	80074d6 <_printf_i+0x11a>
 80074ec:	2b08      	cmp	r3, #8
 80074ee:	d10b      	bne.n	8007508 <_printf_i+0x14c>
 80074f0:	6823      	ldr	r3, [r4, #0]
 80074f2:	07de      	lsls	r6, r3, #31
 80074f4:	d508      	bpl.n	8007508 <_printf_i+0x14c>
 80074f6:	6923      	ldr	r3, [r4, #16]
 80074f8:	6861      	ldr	r1, [r4, #4]
 80074fa:	4299      	cmp	r1, r3
 80074fc:	bfde      	ittt	le
 80074fe:	2330      	movle	r3, #48	; 0x30
 8007500:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007504:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007508:	1b52      	subs	r2, r2, r5
 800750a:	6122      	str	r2, [r4, #16]
 800750c:	f8cd a000 	str.w	sl, [sp]
 8007510:	464b      	mov	r3, r9
 8007512:	aa03      	add	r2, sp, #12
 8007514:	4621      	mov	r1, r4
 8007516:	4640      	mov	r0, r8
 8007518:	f7ff fee2 	bl	80072e0 <_printf_common>
 800751c:	3001      	adds	r0, #1
 800751e:	d14c      	bne.n	80075ba <_printf_i+0x1fe>
 8007520:	f04f 30ff 	mov.w	r0, #4294967295
 8007524:	b004      	add	sp, #16
 8007526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800752a:	4835      	ldr	r0, [pc, #212]	; (8007600 <_printf_i+0x244>)
 800752c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007530:	6829      	ldr	r1, [r5, #0]
 8007532:	6823      	ldr	r3, [r4, #0]
 8007534:	f851 6b04 	ldr.w	r6, [r1], #4
 8007538:	6029      	str	r1, [r5, #0]
 800753a:	061d      	lsls	r5, r3, #24
 800753c:	d514      	bpl.n	8007568 <_printf_i+0x1ac>
 800753e:	07df      	lsls	r7, r3, #31
 8007540:	bf44      	itt	mi
 8007542:	f043 0320 	orrmi.w	r3, r3, #32
 8007546:	6023      	strmi	r3, [r4, #0]
 8007548:	b91e      	cbnz	r6, 8007552 <_printf_i+0x196>
 800754a:	6823      	ldr	r3, [r4, #0]
 800754c:	f023 0320 	bic.w	r3, r3, #32
 8007550:	6023      	str	r3, [r4, #0]
 8007552:	2310      	movs	r3, #16
 8007554:	e7b0      	b.n	80074b8 <_printf_i+0xfc>
 8007556:	6823      	ldr	r3, [r4, #0]
 8007558:	f043 0320 	orr.w	r3, r3, #32
 800755c:	6023      	str	r3, [r4, #0]
 800755e:	2378      	movs	r3, #120	; 0x78
 8007560:	4828      	ldr	r0, [pc, #160]	; (8007604 <_printf_i+0x248>)
 8007562:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007566:	e7e3      	b.n	8007530 <_printf_i+0x174>
 8007568:	0659      	lsls	r1, r3, #25
 800756a:	bf48      	it	mi
 800756c:	b2b6      	uxthmi	r6, r6
 800756e:	e7e6      	b.n	800753e <_printf_i+0x182>
 8007570:	4615      	mov	r5, r2
 8007572:	e7bb      	b.n	80074ec <_printf_i+0x130>
 8007574:	682b      	ldr	r3, [r5, #0]
 8007576:	6826      	ldr	r6, [r4, #0]
 8007578:	6961      	ldr	r1, [r4, #20]
 800757a:	1d18      	adds	r0, r3, #4
 800757c:	6028      	str	r0, [r5, #0]
 800757e:	0635      	lsls	r5, r6, #24
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	d501      	bpl.n	8007588 <_printf_i+0x1cc>
 8007584:	6019      	str	r1, [r3, #0]
 8007586:	e002      	b.n	800758e <_printf_i+0x1d2>
 8007588:	0670      	lsls	r0, r6, #25
 800758a:	d5fb      	bpl.n	8007584 <_printf_i+0x1c8>
 800758c:	8019      	strh	r1, [r3, #0]
 800758e:	2300      	movs	r3, #0
 8007590:	6123      	str	r3, [r4, #16]
 8007592:	4615      	mov	r5, r2
 8007594:	e7ba      	b.n	800750c <_printf_i+0x150>
 8007596:	682b      	ldr	r3, [r5, #0]
 8007598:	1d1a      	adds	r2, r3, #4
 800759a:	602a      	str	r2, [r5, #0]
 800759c:	681d      	ldr	r5, [r3, #0]
 800759e:	6862      	ldr	r2, [r4, #4]
 80075a0:	2100      	movs	r1, #0
 80075a2:	4628      	mov	r0, r5
 80075a4:	f7f8 fe3c 	bl	8000220 <memchr>
 80075a8:	b108      	cbz	r0, 80075ae <_printf_i+0x1f2>
 80075aa:	1b40      	subs	r0, r0, r5
 80075ac:	6060      	str	r0, [r4, #4]
 80075ae:	6863      	ldr	r3, [r4, #4]
 80075b0:	6123      	str	r3, [r4, #16]
 80075b2:	2300      	movs	r3, #0
 80075b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075b8:	e7a8      	b.n	800750c <_printf_i+0x150>
 80075ba:	6923      	ldr	r3, [r4, #16]
 80075bc:	462a      	mov	r2, r5
 80075be:	4649      	mov	r1, r9
 80075c0:	4640      	mov	r0, r8
 80075c2:	47d0      	blx	sl
 80075c4:	3001      	adds	r0, #1
 80075c6:	d0ab      	beq.n	8007520 <_printf_i+0x164>
 80075c8:	6823      	ldr	r3, [r4, #0]
 80075ca:	079b      	lsls	r3, r3, #30
 80075cc:	d413      	bmi.n	80075f6 <_printf_i+0x23a>
 80075ce:	68e0      	ldr	r0, [r4, #12]
 80075d0:	9b03      	ldr	r3, [sp, #12]
 80075d2:	4298      	cmp	r0, r3
 80075d4:	bfb8      	it	lt
 80075d6:	4618      	movlt	r0, r3
 80075d8:	e7a4      	b.n	8007524 <_printf_i+0x168>
 80075da:	2301      	movs	r3, #1
 80075dc:	4632      	mov	r2, r6
 80075de:	4649      	mov	r1, r9
 80075e0:	4640      	mov	r0, r8
 80075e2:	47d0      	blx	sl
 80075e4:	3001      	adds	r0, #1
 80075e6:	d09b      	beq.n	8007520 <_printf_i+0x164>
 80075e8:	3501      	adds	r5, #1
 80075ea:	68e3      	ldr	r3, [r4, #12]
 80075ec:	9903      	ldr	r1, [sp, #12]
 80075ee:	1a5b      	subs	r3, r3, r1
 80075f0:	42ab      	cmp	r3, r5
 80075f2:	dcf2      	bgt.n	80075da <_printf_i+0x21e>
 80075f4:	e7eb      	b.n	80075ce <_printf_i+0x212>
 80075f6:	2500      	movs	r5, #0
 80075f8:	f104 0619 	add.w	r6, r4, #25
 80075fc:	e7f5      	b.n	80075ea <_printf_i+0x22e>
 80075fe:	bf00      	nop
 8007600:	08007dad 	.word	0x08007dad
 8007604:	08007dbe 	.word	0x08007dbe

08007608 <_read_r>:
 8007608:	b538      	push	{r3, r4, r5, lr}
 800760a:	4d07      	ldr	r5, [pc, #28]	; (8007628 <_read_r+0x20>)
 800760c:	4604      	mov	r4, r0
 800760e:	4608      	mov	r0, r1
 8007610:	4611      	mov	r1, r2
 8007612:	2200      	movs	r2, #0
 8007614:	602a      	str	r2, [r5, #0]
 8007616:	461a      	mov	r2, r3
 8007618:	f7fa f9e4 	bl	80019e4 <_read>
 800761c:	1c43      	adds	r3, r0, #1
 800761e:	d102      	bne.n	8007626 <_read_r+0x1e>
 8007620:	682b      	ldr	r3, [r5, #0]
 8007622:	b103      	cbz	r3, 8007626 <_read_r+0x1e>
 8007624:	6023      	str	r3, [r4, #0]
 8007626:	bd38      	pop	{r3, r4, r5, pc}
 8007628:	200041fc 	.word	0x200041fc

0800762c <_fstat_r>:
 800762c:	b538      	push	{r3, r4, r5, lr}
 800762e:	4d07      	ldr	r5, [pc, #28]	; (800764c <_fstat_r+0x20>)
 8007630:	2300      	movs	r3, #0
 8007632:	4604      	mov	r4, r0
 8007634:	4608      	mov	r0, r1
 8007636:	4611      	mov	r1, r2
 8007638:	602b      	str	r3, [r5, #0]
 800763a:	f7fa f9fc 	bl	8001a36 <_fstat>
 800763e:	1c43      	adds	r3, r0, #1
 8007640:	d102      	bne.n	8007648 <_fstat_r+0x1c>
 8007642:	682b      	ldr	r3, [r5, #0]
 8007644:	b103      	cbz	r3, 8007648 <_fstat_r+0x1c>
 8007646:	6023      	str	r3, [r4, #0]
 8007648:	bd38      	pop	{r3, r4, r5, pc}
 800764a:	bf00      	nop
 800764c:	200041fc 	.word	0x200041fc

08007650 <_isatty_r>:
 8007650:	b538      	push	{r3, r4, r5, lr}
 8007652:	4d06      	ldr	r5, [pc, #24]	; (800766c <_isatty_r+0x1c>)
 8007654:	2300      	movs	r3, #0
 8007656:	4604      	mov	r4, r0
 8007658:	4608      	mov	r0, r1
 800765a:	602b      	str	r3, [r5, #0]
 800765c:	f7fa f9fb 	bl	8001a56 <_isatty>
 8007660:	1c43      	adds	r3, r0, #1
 8007662:	d102      	bne.n	800766a <_isatty_r+0x1a>
 8007664:	682b      	ldr	r3, [r5, #0]
 8007666:	b103      	cbz	r3, 800766a <_isatty_r+0x1a>
 8007668:	6023      	str	r3, [r4, #0]
 800766a:	bd38      	pop	{r3, r4, r5, pc}
 800766c:	200041fc 	.word	0x200041fc

08007670 <memmove>:
 8007670:	4288      	cmp	r0, r1
 8007672:	b510      	push	{r4, lr}
 8007674:	eb01 0402 	add.w	r4, r1, r2
 8007678:	d902      	bls.n	8007680 <memmove+0x10>
 800767a:	4284      	cmp	r4, r0
 800767c:	4623      	mov	r3, r4
 800767e:	d807      	bhi.n	8007690 <memmove+0x20>
 8007680:	1e43      	subs	r3, r0, #1
 8007682:	42a1      	cmp	r1, r4
 8007684:	d008      	beq.n	8007698 <memmove+0x28>
 8007686:	f811 2b01 	ldrb.w	r2, [r1], #1
 800768a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800768e:	e7f8      	b.n	8007682 <memmove+0x12>
 8007690:	4402      	add	r2, r0
 8007692:	4601      	mov	r1, r0
 8007694:	428a      	cmp	r2, r1
 8007696:	d100      	bne.n	800769a <memmove+0x2a>
 8007698:	bd10      	pop	{r4, pc}
 800769a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800769e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80076a2:	e7f7      	b.n	8007694 <memmove+0x24>

080076a4 <_realloc_r>:
 80076a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076a8:	4680      	mov	r8, r0
 80076aa:	4614      	mov	r4, r2
 80076ac:	460e      	mov	r6, r1
 80076ae:	b921      	cbnz	r1, 80076ba <_realloc_r+0x16>
 80076b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80076b4:	4611      	mov	r1, r2
 80076b6:	f7ff b87b 	b.w	80067b0 <_malloc_r>
 80076ba:	b92a      	cbnz	r2, 80076c8 <_realloc_r+0x24>
 80076bc:	f7ff fc68 	bl	8006f90 <_free_r>
 80076c0:	4625      	mov	r5, r4
 80076c2:	4628      	mov	r0, r5
 80076c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076c8:	f000 f81b 	bl	8007702 <_malloc_usable_size_r>
 80076cc:	4284      	cmp	r4, r0
 80076ce:	4607      	mov	r7, r0
 80076d0:	d802      	bhi.n	80076d8 <_realloc_r+0x34>
 80076d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80076d6:	d812      	bhi.n	80076fe <_realloc_r+0x5a>
 80076d8:	4621      	mov	r1, r4
 80076da:	4640      	mov	r0, r8
 80076dc:	f7ff f868 	bl	80067b0 <_malloc_r>
 80076e0:	4605      	mov	r5, r0
 80076e2:	2800      	cmp	r0, #0
 80076e4:	d0ed      	beq.n	80076c2 <_realloc_r+0x1e>
 80076e6:	42bc      	cmp	r4, r7
 80076e8:	4622      	mov	r2, r4
 80076ea:	4631      	mov	r1, r6
 80076ec:	bf28      	it	cs
 80076ee:	463a      	movcs	r2, r7
 80076f0:	f7ff f827 	bl	8006742 <memcpy>
 80076f4:	4631      	mov	r1, r6
 80076f6:	4640      	mov	r0, r8
 80076f8:	f7ff fc4a 	bl	8006f90 <_free_r>
 80076fc:	e7e1      	b.n	80076c2 <_realloc_r+0x1e>
 80076fe:	4635      	mov	r5, r6
 8007700:	e7df      	b.n	80076c2 <_realloc_r+0x1e>

08007702 <_malloc_usable_size_r>:
 8007702:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007706:	1f18      	subs	r0, r3, #4
 8007708:	2b00      	cmp	r3, #0
 800770a:	bfbc      	itt	lt
 800770c:	580b      	ldrlt	r3, [r1, r0]
 800770e:	18c0      	addlt	r0, r0, r3
 8007710:	4770      	bx	lr
 8007712:	0000      	movs	r0, r0
 8007714:	0000      	movs	r0, r0
	...

08007718 <log10>:
 8007718:	b538      	push	{r3, r4, r5, lr}
 800771a:	ed2d 8b02 	vpush	{d8}
 800771e:	ec55 4b10 	vmov	r4, r5, d0
 8007722:	f000 f839 	bl	8007798 <__ieee754_log10>
 8007726:	4622      	mov	r2, r4
 8007728:	462b      	mov	r3, r5
 800772a:	4620      	mov	r0, r4
 800772c:	4629      	mov	r1, r5
 800772e:	eeb0 8a40 	vmov.f32	s16, s0
 8007732:	eef0 8a60 	vmov.f32	s17, s1
 8007736:	f7f9 fa19 	bl	8000b6c <__aeabi_dcmpun>
 800773a:	b998      	cbnz	r0, 8007764 <log10+0x4c>
 800773c:	2200      	movs	r2, #0
 800773e:	2300      	movs	r3, #0
 8007740:	4620      	mov	r0, r4
 8007742:	4629      	mov	r1, r5
 8007744:	f7f9 f9f4 	bl	8000b30 <__aeabi_dcmple>
 8007748:	b160      	cbz	r0, 8007764 <log10+0x4c>
 800774a:	2200      	movs	r2, #0
 800774c:	2300      	movs	r3, #0
 800774e:	4620      	mov	r0, r4
 8007750:	4629      	mov	r1, r5
 8007752:	f7f9 f9d9 	bl	8000b08 <__aeabi_dcmpeq>
 8007756:	b160      	cbz	r0, 8007772 <log10+0x5a>
 8007758:	f7fe fed0 	bl	80064fc <__errno>
 800775c:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 8007788 <log10+0x70>
 8007760:	2322      	movs	r3, #34	; 0x22
 8007762:	6003      	str	r3, [r0, #0]
 8007764:	eeb0 0a48 	vmov.f32	s0, s16
 8007768:	eef0 0a68 	vmov.f32	s1, s17
 800776c:	ecbd 8b02 	vpop	{d8}
 8007770:	bd38      	pop	{r3, r4, r5, pc}
 8007772:	f7fe fec3 	bl	80064fc <__errno>
 8007776:	ecbd 8b02 	vpop	{d8}
 800777a:	2321      	movs	r3, #33	; 0x21
 800777c:	6003      	str	r3, [r0, #0]
 800777e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007782:	4803      	ldr	r0, [pc, #12]	; (8007790 <log10+0x78>)
 8007784:	f000 b894 	b.w	80078b0 <nan>
 8007788:	00000000 	.word	0x00000000
 800778c:	fff00000 	.word	0xfff00000
 8007790:	08007da1 	.word	0x08007da1
 8007794:	00000000 	.word	0x00000000

08007798 <__ieee754_log10>:
 8007798:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800779c:	ec55 4b10 	vmov	r4, r5, d0
 80077a0:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 80077a4:	462b      	mov	r3, r5
 80077a6:	da2f      	bge.n	8007808 <__ieee754_log10+0x70>
 80077a8:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 80077ac:	4322      	orrs	r2, r4
 80077ae:	d109      	bne.n	80077c4 <__ieee754_log10+0x2c>
 80077b0:	493b      	ldr	r1, [pc, #236]	; (80078a0 <__ieee754_log10+0x108>)
 80077b2:	2200      	movs	r2, #0
 80077b4:	2300      	movs	r3, #0
 80077b6:	2000      	movs	r0, #0
 80077b8:	f7f9 f868 	bl	800088c <__aeabi_ddiv>
 80077bc:	ec41 0b10 	vmov	d0, r0, r1
 80077c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077c4:	2d00      	cmp	r5, #0
 80077c6:	da09      	bge.n	80077dc <__ieee754_log10+0x44>
 80077c8:	ee10 2a10 	vmov	r2, s0
 80077cc:	ee10 0a10 	vmov	r0, s0
 80077d0:	4629      	mov	r1, r5
 80077d2:	f7f8 fd79 	bl	80002c8 <__aeabi_dsub>
 80077d6:	2200      	movs	r2, #0
 80077d8:	2300      	movs	r3, #0
 80077da:	e7ed      	b.n	80077b8 <__ieee754_log10+0x20>
 80077dc:	4b31      	ldr	r3, [pc, #196]	; (80078a4 <__ieee754_log10+0x10c>)
 80077de:	2200      	movs	r2, #0
 80077e0:	4629      	mov	r1, r5
 80077e2:	ee10 0a10 	vmov	r0, s0
 80077e6:	f7f8 ff27 	bl	8000638 <__aeabi_dmul>
 80077ea:	f06f 0235 	mvn.w	r2, #53	; 0x35
 80077ee:	4604      	mov	r4, r0
 80077f0:	460d      	mov	r5, r1
 80077f2:	460b      	mov	r3, r1
 80077f4:	492c      	ldr	r1, [pc, #176]	; (80078a8 <__ieee754_log10+0x110>)
 80077f6:	428b      	cmp	r3, r1
 80077f8:	dd08      	ble.n	800780c <__ieee754_log10+0x74>
 80077fa:	4622      	mov	r2, r4
 80077fc:	462b      	mov	r3, r5
 80077fe:	4620      	mov	r0, r4
 8007800:	4629      	mov	r1, r5
 8007802:	f7f8 fd63 	bl	80002cc <__adddf3>
 8007806:	e7d9      	b.n	80077bc <__ieee754_log10+0x24>
 8007808:	2200      	movs	r2, #0
 800780a:	e7f3      	b.n	80077f4 <__ieee754_log10+0x5c>
 800780c:	1518      	asrs	r0, r3, #20
 800780e:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8007812:	4410      	add	r0, r2
 8007814:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 8007818:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800781c:	f3c3 0813 	ubfx	r8, r3, #0, #20
 8007820:	f7f8 fea0 	bl	8000564 <__aeabi_i2d>
 8007824:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 8007828:	3303      	adds	r3, #3
 800782a:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 800782e:	ec45 4b10 	vmov	d0, r4, r5
 8007832:	4606      	mov	r6, r0
 8007834:	460f      	mov	r7, r1
 8007836:	f000 f843 	bl	80078c0 <__ieee754_log>
 800783a:	a313      	add	r3, pc, #76	; (adr r3, 8007888 <__ieee754_log10+0xf0>)
 800783c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007840:	4630      	mov	r0, r6
 8007842:	4639      	mov	r1, r7
 8007844:	ec59 8b10 	vmov	r8, r9, d0
 8007848:	f7f8 fef6 	bl	8000638 <__aeabi_dmul>
 800784c:	a310      	add	r3, pc, #64	; (adr r3, 8007890 <__ieee754_log10+0xf8>)
 800784e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007852:	4604      	mov	r4, r0
 8007854:	460d      	mov	r5, r1
 8007856:	4640      	mov	r0, r8
 8007858:	4649      	mov	r1, r9
 800785a:	f7f8 feed 	bl	8000638 <__aeabi_dmul>
 800785e:	4602      	mov	r2, r0
 8007860:	460b      	mov	r3, r1
 8007862:	4620      	mov	r0, r4
 8007864:	4629      	mov	r1, r5
 8007866:	f7f8 fd31 	bl	80002cc <__adddf3>
 800786a:	a30b      	add	r3, pc, #44	; (adr r3, 8007898 <__ieee754_log10+0x100>)
 800786c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007870:	4604      	mov	r4, r0
 8007872:	460d      	mov	r5, r1
 8007874:	4630      	mov	r0, r6
 8007876:	4639      	mov	r1, r7
 8007878:	f7f8 fede 	bl	8000638 <__aeabi_dmul>
 800787c:	4602      	mov	r2, r0
 800787e:	460b      	mov	r3, r1
 8007880:	4620      	mov	r0, r4
 8007882:	4629      	mov	r1, r5
 8007884:	e7bd      	b.n	8007802 <__ieee754_log10+0x6a>
 8007886:	bf00      	nop
 8007888:	11f12b36 	.word	0x11f12b36
 800788c:	3d59fef3 	.word	0x3d59fef3
 8007890:	1526e50e 	.word	0x1526e50e
 8007894:	3fdbcb7b 	.word	0x3fdbcb7b
 8007898:	509f6000 	.word	0x509f6000
 800789c:	3fd34413 	.word	0x3fd34413
 80078a0:	c3500000 	.word	0xc3500000
 80078a4:	43500000 	.word	0x43500000
 80078a8:	7fefffff 	.word	0x7fefffff
 80078ac:	00000000 	.word	0x00000000

080078b0 <nan>:
 80078b0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80078b8 <nan+0x8>
 80078b4:	4770      	bx	lr
 80078b6:	bf00      	nop
 80078b8:	00000000 	.word	0x00000000
 80078bc:	7ff80000 	.word	0x7ff80000

080078c0 <__ieee754_log>:
 80078c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078c4:	ec51 0b10 	vmov	r0, r1, d0
 80078c8:	ed2d 8b04 	vpush	{d8-d9}
 80078cc:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80078d0:	b083      	sub	sp, #12
 80078d2:	460d      	mov	r5, r1
 80078d4:	da29      	bge.n	800792a <__ieee754_log+0x6a>
 80078d6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80078da:	4303      	orrs	r3, r0
 80078dc:	ee10 2a10 	vmov	r2, s0
 80078e0:	d10c      	bne.n	80078fc <__ieee754_log+0x3c>
 80078e2:	49cf      	ldr	r1, [pc, #828]	; (8007c20 <__ieee754_log+0x360>)
 80078e4:	2200      	movs	r2, #0
 80078e6:	2300      	movs	r3, #0
 80078e8:	2000      	movs	r0, #0
 80078ea:	f7f8 ffcf 	bl	800088c <__aeabi_ddiv>
 80078ee:	ec41 0b10 	vmov	d0, r0, r1
 80078f2:	b003      	add	sp, #12
 80078f4:	ecbd 8b04 	vpop	{d8-d9}
 80078f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078fc:	2900      	cmp	r1, #0
 80078fe:	da05      	bge.n	800790c <__ieee754_log+0x4c>
 8007900:	460b      	mov	r3, r1
 8007902:	f7f8 fce1 	bl	80002c8 <__aeabi_dsub>
 8007906:	2200      	movs	r2, #0
 8007908:	2300      	movs	r3, #0
 800790a:	e7ee      	b.n	80078ea <__ieee754_log+0x2a>
 800790c:	4bc5      	ldr	r3, [pc, #788]	; (8007c24 <__ieee754_log+0x364>)
 800790e:	2200      	movs	r2, #0
 8007910:	f7f8 fe92 	bl	8000638 <__aeabi_dmul>
 8007914:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8007918:	460d      	mov	r5, r1
 800791a:	4ac3      	ldr	r2, [pc, #780]	; (8007c28 <__ieee754_log+0x368>)
 800791c:	4295      	cmp	r5, r2
 800791e:	dd06      	ble.n	800792e <__ieee754_log+0x6e>
 8007920:	4602      	mov	r2, r0
 8007922:	460b      	mov	r3, r1
 8007924:	f7f8 fcd2 	bl	80002cc <__adddf3>
 8007928:	e7e1      	b.n	80078ee <__ieee754_log+0x2e>
 800792a:	2300      	movs	r3, #0
 800792c:	e7f5      	b.n	800791a <__ieee754_log+0x5a>
 800792e:	152c      	asrs	r4, r5, #20
 8007930:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8007934:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8007938:	441c      	add	r4, r3
 800793a:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800793e:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8007942:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007946:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800794a:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800794e:	ea42 0105 	orr.w	r1, r2, r5
 8007952:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8007956:	2200      	movs	r2, #0
 8007958:	4bb4      	ldr	r3, [pc, #720]	; (8007c2c <__ieee754_log+0x36c>)
 800795a:	f7f8 fcb5 	bl	80002c8 <__aeabi_dsub>
 800795e:	1cab      	adds	r3, r5, #2
 8007960:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007964:	2b02      	cmp	r3, #2
 8007966:	4682      	mov	sl, r0
 8007968:	468b      	mov	fp, r1
 800796a:	f04f 0200 	mov.w	r2, #0
 800796e:	dc53      	bgt.n	8007a18 <__ieee754_log+0x158>
 8007970:	2300      	movs	r3, #0
 8007972:	f7f9 f8c9 	bl	8000b08 <__aeabi_dcmpeq>
 8007976:	b1d0      	cbz	r0, 80079ae <__ieee754_log+0xee>
 8007978:	2c00      	cmp	r4, #0
 800797a:	f000 8122 	beq.w	8007bc2 <__ieee754_log+0x302>
 800797e:	4620      	mov	r0, r4
 8007980:	f7f8 fdf0 	bl	8000564 <__aeabi_i2d>
 8007984:	a390      	add	r3, pc, #576	; (adr r3, 8007bc8 <__ieee754_log+0x308>)
 8007986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800798a:	4606      	mov	r6, r0
 800798c:	460f      	mov	r7, r1
 800798e:	f7f8 fe53 	bl	8000638 <__aeabi_dmul>
 8007992:	a38f      	add	r3, pc, #572	; (adr r3, 8007bd0 <__ieee754_log+0x310>)
 8007994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007998:	4604      	mov	r4, r0
 800799a:	460d      	mov	r5, r1
 800799c:	4630      	mov	r0, r6
 800799e:	4639      	mov	r1, r7
 80079a0:	f7f8 fe4a 	bl	8000638 <__aeabi_dmul>
 80079a4:	4602      	mov	r2, r0
 80079a6:	460b      	mov	r3, r1
 80079a8:	4620      	mov	r0, r4
 80079aa:	4629      	mov	r1, r5
 80079ac:	e7ba      	b.n	8007924 <__ieee754_log+0x64>
 80079ae:	a38a      	add	r3, pc, #552	; (adr r3, 8007bd8 <__ieee754_log+0x318>)
 80079b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079b4:	4650      	mov	r0, sl
 80079b6:	4659      	mov	r1, fp
 80079b8:	f7f8 fe3e 	bl	8000638 <__aeabi_dmul>
 80079bc:	4602      	mov	r2, r0
 80079be:	460b      	mov	r3, r1
 80079c0:	2000      	movs	r0, #0
 80079c2:	499b      	ldr	r1, [pc, #620]	; (8007c30 <__ieee754_log+0x370>)
 80079c4:	f7f8 fc80 	bl	80002c8 <__aeabi_dsub>
 80079c8:	4652      	mov	r2, sl
 80079ca:	4606      	mov	r6, r0
 80079cc:	460f      	mov	r7, r1
 80079ce:	465b      	mov	r3, fp
 80079d0:	4650      	mov	r0, sl
 80079d2:	4659      	mov	r1, fp
 80079d4:	f7f8 fe30 	bl	8000638 <__aeabi_dmul>
 80079d8:	4602      	mov	r2, r0
 80079da:	460b      	mov	r3, r1
 80079dc:	4630      	mov	r0, r6
 80079de:	4639      	mov	r1, r7
 80079e0:	f7f8 fe2a 	bl	8000638 <__aeabi_dmul>
 80079e4:	4606      	mov	r6, r0
 80079e6:	460f      	mov	r7, r1
 80079e8:	b914      	cbnz	r4, 80079f0 <__ieee754_log+0x130>
 80079ea:	4632      	mov	r2, r6
 80079ec:	463b      	mov	r3, r7
 80079ee:	e0a2      	b.n	8007b36 <__ieee754_log+0x276>
 80079f0:	4620      	mov	r0, r4
 80079f2:	f7f8 fdb7 	bl	8000564 <__aeabi_i2d>
 80079f6:	a374      	add	r3, pc, #464	; (adr r3, 8007bc8 <__ieee754_log+0x308>)
 80079f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079fc:	4680      	mov	r8, r0
 80079fe:	4689      	mov	r9, r1
 8007a00:	f7f8 fe1a 	bl	8000638 <__aeabi_dmul>
 8007a04:	a372      	add	r3, pc, #456	; (adr r3, 8007bd0 <__ieee754_log+0x310>)
 8007a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a0a:	4604      	mov	r4, r0
 8007a0c:	460d      	mov	r5, r1
 8007a0e:	4640      	mov	r0, r8
 8007a10:	4649      	mov	r1, r9
 8007a12:	f7f8 fe11 	bl	8000638 <__aeabi_dmul>
 8007a16:	e0a7      	b.n	8007b68 <__ieee754_log+0x2a8>
 8007a18:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007a1c:	f7f8 fc56 	bl	80002cc <__adddf3>
 8007a20:	4602      	mov	r2, r0
 8007a22:	460b      	mov	r3, r1
 8007a24:	4650      	mov	r0, sl
 8007a26:	4659      	mov	r1, fp
 8007a28:	f7f8 ff30 	bl	800088c <__aeabi_ddiv>
 8007a2c:	ec41 0b18 	vmov	d8, r0, r1
 8007a30:	4620      	mov	r0, r4
 8007a32:	f7f8 fd97 	bl	8000564 <__aeabi_i2d>
 8007a36:	ec53 2b18 	vmov	r2, r3, d8
 8007a3a:	ec41 0b19 	vmov	d9, r0, r1
 8007a3e:	ec51 0b18 	vmov	r0, r1, d8
 8007a42:	f7f8 fdf9 	bl	8000638 <__aeabi_dmul>
 8007a46:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 8007a4a:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 8007a4e:	9301      	str	r3, [sp, #4]
 8007a50:	4602      	mov	r2, r0
 8007a52:	460b      	mov	r3, r1
 8007a54:	4680      	mov	r8, r0
 8007a56:	4689      	mov	r9, r1
 8007a58:	f7f8 fdee 	bl	8000638 <__aeabi_dmul>
 8007a5c:	a360      	add	r3, pc, #384	; (adr r3, 8007be0 <__ieee754_log+0x320>)
 8007a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a62:	4606      	mov	r6, r0
 8007a64:	460f      	mov	r7, r1
 8007a66:	f7f8 fde7 	bl	8000638 <__aeabi_dmul>
 8007a6a:	a35f      	add	r3, pc, #380	; (adr r3, 8007be8 <__ieee754_log+0x328>)
 8007a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a70:	f7f8 fc2c 	bl	80002cc <__adddf3>
 8007a74:	4632      	mov	r2, r6
 8007a76:	463b      	mov	r3, r7
 8007a78:	f7f8 fdde 	bl	8000638 <__aeabi_dmul>
 8007a7c:	a35c      	add	r3, pc, #368	; (adr r3, 8007bf0 <__ieee754_log+0x330>)
 8007a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a82:	f7f8 fc23 	bl	80002cc <__adddf3>
 8007a86:	4632      	mov	r2, r6
 8007a88:	463b      	mov	r3, r7
 8007a8a:	f7f8 fdd5 	bl	8000638 <__aeabi_dmul>
 8007a8e:	a35a      	add	r3, pc, #360	; (adr r3, 8007bf8 <__ieee754_log+0x338>)
 8007a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a94:	f7f8 fc1a 	bl	80002cc <__adddf3>
 8007a98:	4642      	mov	r2, r8
 8007a9a:	464b      	mov	r3, r9
 8007a9c:	f7f8 fdcc 	bl	8000638 <__aeabi_dmul>
 8007aa0:	a357      	add	r3, pc, #348	; (adr r3, 8007c00 <__ieee754_log+0x340>)
 8007aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aa6:	4680      	mov	r8, r0
 8007aa8:	4689      	mov	r9, r1
 8007aaa:	4630      	mov	r0, r6
 8007aac:	4639      	mov	r1, r7
 8007aae:	f7f8 fdc3 	bl	8000638 <__aeabi_dmul>
 8007ab2:	a355      	add	r3, pc, #340	; (adr r3, 8007c08 <__ieee754_log+0x348>)
 8007ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ab8:	f7f8 fc08 	bl	80002cc <__adddf3>
 8007abc:	4632      	mov	r2, r6
 8007abe:	463b      	mov	r3, r7
 8007ac0:	f7f8 fdba 	bl	8000638 <__aeabi_dmul>
 8007ac4:	a352      	add	r3, pc, #328	; (adr r3, 8007c10 <__ieee754_log+0x350>)
 8007ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aca:	f7f8 fbff 	bl	80002cc <__adddf3>
 8007ace:	4632      	mov	r2, r6
 8007ad0:	463b      	mov	r3, r7
 8007ad2:	f7f8 fdb1 	bl	8000638 <__aeabi_dmul>
 8007ad6:	460b      	mov	r3, r1
 8007ad8:	4602      	mov	r2, r0
 8007ada:	4649      	mov	r1, r9
 8007adc:	4640      	mov	r0, r8
 8007ade:	f7f8 fbf5 	bl	80002cc <__adddf3>
 8007ae2:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8007ae6:	9b01      	ldr	r3, [sp, #4]
 8007ae8:	3551      	adds	r5, #81	; 0x51
 8007aea:	431d      	orrs	r5, r3
 8007aec:	2d00      	cmp	r5, #0
 8007aee:	4680      	mov	r8, r0
 8007af0:	4689      	mov	r9, r1
 8007af2:	dd48      	ble.n	8007b86 <__ieee754_log+0x2c6>
 8007af4:	4b4e      	ldr	r3, [pc, #312]	; (8007c30 <__ieee754_log+0x370>)
 8007af6:	2200      	movs	r2, #0
 8007af8:	4650      	mov	r0, sl
 8007afa:	4659      	mov	r1, fp
 8007afc:	f7f8 fd9c 	bl	8000638 <__aeabi_dmul>
 8007b00:	4652      	mov	r2, sl
 8007b02:	465b      	mov	r3, fp
 8007b04:	f7f8 fd98 	bl	8000638 <__aeabi_dmul>
 8007b08:	4602      	mov	r2, r0
 8007b0a:	460b      	mov	r3, r1
 8007b0c:	4606      	mov	r6, r0
 8007b0e:	460f      	mov	r7, r1
 8007b10:	4640      	mov	r0, r8
 8007b12:	4649      	mov	r1, r9
 8007b14:	f7f8 fbda 	bl	80002cc <__adddf3>
 8007b18:	ec53 2b18 	vmov	r2, r3, d8
 8007b1c:	f7f8 fd8c 	bl	8000638 <__aeabi_dmul>
 8007b20:	4680      	mov	r8, r0
 8007b22:	4689      	mov	r9, r1
 8007b24:	b964      	cbnz	r4, 8007b40 <__ieee754_log+0x280>
 8007b26:	4602      	mov	r2, r0
 8007b28:	460b      	mov	r3, r1
 8007b2a:	4630      	mov	r0, r6
 8007b2c:	4639      	mov	r1, r7
 8007b2e:	f7f8 fbcb 	bl	80002c8 <__aeabi_dsub>
 8007b32:	4602      	mov	r2, r0
 8007b34:	460b      	mov	r3, r1
 8007b36:	4650      	mov	r0, sl
 8007b38:	4659      	mov	r1, fp
 8007b3a:	f7f8 fbc5 	bl	80002c8 <__aeabi_dsub>
 8007b3e:	e6d6      	b.n	80078ee <__ieee754_log+0x2e>
 8007b40:	a321      	add	r3, pc, #132	; (adr r3, 8007bc8 <__ieee754_log+0x308>)
 8007b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b46:	ec51 0b19 	vmov	r0, r1, d9
 8007b4a:	f7f8 fd75 	bl	8000638 <__aeabi_dmul>
 8007b4e:	a320      	add	r3, pc, #128	; (adr r3, 8007bd0 <__ieee754_log+0x310>)
 8007b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b54:	4604      	mov	r4, r0
 8007b56:	460d      	mov	r5, r1
 8007b58:	ec51 0b19 	vmov	r0, r1, d9
 8007b5c:	f7f8 fd6c 	bl	8000638 <__aeabi_dmul>
 8007b60:	4642      	mov	r2, r8
 8007b62:	464b      	mov	r3, r9
 8007b64:	f7f8 fbb2 	bl	80002cc <__adddf3>
 8007b68:	4602      	mov	r2, r0
 8007b6a:	460b      	mov	r3, r1
 8007b6c:	4630      	mov	r0, r6
 8007b6e:	4639      	mov	r1, r7
 8007b70:	f7f8 fbaa 	bl	80002c8 <__aeabi_dsub>
 8007b74:	4652      	mov	r2, sl
 8007b76:	465b      	mov	r3, fp
 8007b78:	f7f8 fba6 	bl	80002c8 <__aeabi_dsub>
 8007b7c:	4602      	mov	r2, r0
 8007b7e:	460b      	mov	r3, r1
 8007b80:	4620      	mov	r0, r4
 8007b82:	4629      	mov	r1, r5
 8007b84:	e7d9      	b.n	8007b3a <__ieee754_log+0x27a>
 8007b86:	4602      	mov	r2, r0
 8007b88:	460b      	mov	r3, r1
 8007b8a:	4650      	mov	r0, sl
 8007b8c:	4659      	mov	r1, fp
 8007b8e:	f7f8 fb9b 	bl	80002c8 <__aeabi_dsub>
 8007b92:	ec53 2b18 	vmov	r2, r3, d8
 8007b96:	f7f8 fd4f 	bl	8000638 <__aeabi_dmul>
 8007b9a:	4606      	mov	r6, r0
 8007b9c:	460f      	mov	r7, r1
 8007b9e:	2c00      	cmp	r4, #0
 8007ba0:	f43f af23 	beq.w	80079ea <__ieee754_log+0x12a>
 8007ba4:	a308      	add	r3, pc, #32	; (adr r3, 8007bc8 <__ieee754_log+0x308>)
 8007ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007baa:	ec51 0b19 	vmov	r0, r1, d9
 8007bae:	f7f8 fd43 	bl	8000638 <__aeabi_dmul>
 8007bb2:	a307      	add	r3, pc, #28	; (adr r3, 8007bd0 <__ieee754_log+0x310>)
 8007bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bb8:	4604      	mov	r4, r0
 8007bba:	460d      	mov	r5, r1
 8007bbc:	ec51 0b19 	vmov	r0, r1, d9
 8007bc0:	e727      	b.n	8007a12 <__ieee754_log+0x152>
 8007bc2:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8007c18 <__ieee754_log+0x358>
 8007bc6:	e694      	b.n	80078f2 <__ieee754_log+0x32>
 8007bc8:	fee00000 	.word	0xfee00000
 8007bcc:	3fe62e42 	.word	0x3fe62e42
 8007bd0:	35793c76 	.word	0x35793c76
 8007bd4:	3dea39ef 	.word	0x3dea39ef
 8007bd8:	55555555 	.word	0x55555555
 8007bdc:	3fd55555 	.word	0x3fd55555
 8007be0:	df3e5244 	.word	0xdf3e5244
 8007be4:	3fc2f112 	.word	0x3fc2f112
 8007be8:	96cb03de 	.word	0x96cb03de
 8007bec:	3fc74664 	.word	0x3fc74664
 8007bf0:	94229359 	.word	0x94229359
 8007bf4:	3fd24924 	.word	0x3fd24924
 8007bf8:	55555593 	.word	0x55555593
 8007bfc:	3fe55555 	.word	0x3fe55555
 8007c00:	d078c69f 	.word	0xd078c69f
 8007c04:	3fc39a09 	.word	0x3fc39a09
 8007c08:	1d8e78af 	.word	0x1d8e78af
 8007c0c:	3fcc71c5 	.word	0x3fcc71c5
 8007c10:	9997fa04 	.word	0x9997fa04
 8007c14:	3fd99999 	.word	0x3fd99999
	...
 8007c20:	c3500000 	.word	0xc3500000
 8007c24:	43500000 	.word	0x43500000
 8007c28:	7fefffff 	.word	0x7fefffff
 8007c2c:	3ff00000 	.word	0x3ff00000
 8007c30:	3fe00000 	.word	0x3fe00000

08007c34 <_init>:
 8007c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c36:	bf00      	nop
 8007c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c3a:	bc08      	pop	{r3}
 8007c3c:	469e      	mov	lr, r3
 8007c3e:	4770      	bx	lr

08007c40 <_fini>:
 8007c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c42:	bf00      	nop
 8007c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c46:	bc08      	pop	{r3}
 8007c48:	469e      	mov	lr, r3
 8007c4a:	4770      	bx	lr
